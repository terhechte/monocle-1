--
-- PostgreSQL database dump
--

-- Dumped from database version 9.4.7
-- Dumped by pg_dump version 9.4.7
-- Started on 2016-04-27 13:02:18 UTC

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 1 (class 3079 OID 11895)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2184 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 2 (class 3079 OID 16389)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- TOC entry 2185 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = public, pg_catalog;

--
-- TOC entry 212 (class 1255 OID 16574)
-- Name: c_posts_user_handle(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION c_posts_user_handle() RETURNS trigger
    LANGUAGE plpgsql
    AS $$      BEGIN
        IF OLD.handle != NEW.handle THEN
          UPDATE "posts" SET "user_handle" = NEW.handle WHERE "user_id" = NEW.id;
        END IF;
        RETURN NEW;
      END;
$$;


ALTER FUNCTION public.c_posts_user_handle() OWNER TO postgres;

--
-- TOC entry 213 (class 1255 OID 16576)
-- Name: c_posts_voted(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION c_posts_voted() RETURNS trigger
    LANGUAGE plpgsql
    AS $$      BEGIN
        UPDATE "posts" SET voted_user_ids = array_append(voted_user_ids, NEW.user_id) WHERE "id" = NEW.post_id;
        RETURN NEW;
      END;
$$;


ALTER FUNCTION public.c_posts_voted() OWNER TO postgres;

--
-- TOC entry 211 (class 1255 OID 16572)
-- Name: cc_posts_comments_count(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION cc_posts_comments_count() RETURNS trigger
    LANGUAGE plpgsql
    AS $$        BEGIN
          IF (TG_OP = 'DELETE') THEN
            UPDATE "posts" SET "comments_count" = "comments_count" - 1 WHERE "id" = OLD.post_id;
            RETURN OLD;
          ELSIF (TG_OP = 'INSERT') THEN
            UPDATE "posts" SET "comments_count" = "comments_count" + 1 WHERE "id" = NEW."post_id";
            RETURN NEW;
          END IF;
        END;
$$;


ALTER FUNCTION public.cc_posts_comments_count() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 188 (class 1259 OID 16553)
-- Name: comment_votes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comment_votes (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    user_id uuid,
    comment_id uuid,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE comment_votes OWNER TO postgres;

--
-- TOC entry 187 (class 1259 OID 16551)
-- Name: comment_votes_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE comment_votes_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comment_votes_iid_seq OWNER TO postgres;

--
-- TOC entry 2186 (class 0 OID 0)
-- Dependencies: 187
-- Name: comment_votes_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE comment_votes_iid_seq OWNED BY comment_votes.iid;


--
-- TOC entry 182 (class 1259 OID 16480)
-- Name: comments; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comments (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    user_id uuid,
    post_id uuid,
    body text,
    votes integer DEFAULT 0,
    score double precision DEFAULT 0.0,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    flagged integer DEFAULT 0,
    parent_id uuid
);


ALTER TABLE comments OWNER TO postgres;

--
-- TOC entry 181 (class 1259 OID 16478)
-- Name: comments_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE comments_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comments_iid_seq OWNER TO postgres;

--
-- TOC entry 2187 (class 0 OID 0)
-- Dependencies: 181
-- Name: comments_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE comments_iid_seq OWNED BY comments.iid;


--
-- TOC entry 184 (class 1259 OID 16511)
-- Name: post_visits; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE post_visits (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    user_id uuid,
    post_id uuid,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE post_visits OWNER TO postgres;

--
-- TOC entry 183 (class 1259 OID 16509)
-- Name: post_visits_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE post_visits_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE post_visits_iid_seq OWNER TO postgres;

--
-- TOC entry 2188 (class 0 OID 0)
-- Dependencies: 183
-- Name: post_visits_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE post_visits_iid_seq OWNED BY post_visits.iid;


--
-- TOC entry 186 (class 1259 OID 16532)
-- Name: post_votes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE post_votes (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    user_id uuid,
    post_id uuid,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE post_votes OWNER TO postgres;

--
-- TOC entry 185 (class 1259 OID 16530)
-- Name: post_votes_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE post_votes_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE post_votes_iid_seq OWNER TO postgres;

--
-- TOC entry 2189 (class 0 OID 0)
-- Dependencies: 185
-- Name: post_votes_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE post_votes_iid_seq OWNED BY post_votes.iid;


--
-- TOC entry 178 (class 1259 OID 16428)
-- Name: posts; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE posts (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    visits integer DEFAULT 0,
    title text,
    url text,
    slug text,
    oembed json,
    html_title text,
    link_icons json,
    domain text,
    votes integer DEFAULT 0,
    score double precision DEFAULT 0.0,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    user_id uuid,
    open_graph json,
    body text,
    summary text,
    tweet_id text,
    published_at timestamp without time zone,
    comment_count integer DEFAULT 0 NOT NULL,
    comments_count integer DEFAULT 0 NOT NULL,
    user_handle text,
    voted_user_ids uuid[] DEFAULT '{}'::uuid[],
    preview_url text,
    flagged integer DEFAULT 0
);


ALTER TABLE posts OWNER TO postgres;

--
-- TOC entry 177 (class 1259 OID 16426)
-- Name: posts_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE posts_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE posts_iid_seq OWNER TO postgres;

--
-- TOC entry 2190 (class 0 OID 0)
-- Dependencies: 177
-- Name: posts_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE posts_iid_seq OWNED BY posts.iid;


--
-- TOC entry 174 (class 1259 OID 16385)
-- Name: schema_info; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE schema_info (
    version integer DEFAULT 0 NOT NULL
);


ALTER TABLE schema_info OWNER TO postgres;

--
-- TOC entry 180 (class 1259 OID 16456)
-- Name: user_invites; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE user_invites (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    email text,
    code text,
    user_id uuid,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    twitter character varying(255),
    github text,
    invited_user_id uuid
);


ALTER TABLE user_invites OWNER TO postgres;

--
-- TOC entry 179 (class 1259 OID 16454)
-- Name: user_invites_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE user_invites_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_invites_iid_seq OWNER TO postgres;

--
-- TOC entry 2191 (class 0 OID 0)
-- Dependencies: 179
-- Name: user_invites_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE user_invites_iid_seq OWNED BY user_invites.iid;


--
-- TOC entry 176 (class 1259 OID 16402)
-- Name: users; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE users (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    iid integer NOT NULL,
    uid text,
    provider text,
    handle text,
    about text,
    email text,
    url text,
    twitter text,
    karma integer DEFAULT 0,
    name text,
    auth json,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    admin boolean DEFAULT false,
    registered boolean,
    parent_id uuid,
    invites_count integer DEFAULT 0,
    github text,
    secret text,
    manifesto boolean DEFAULT false,
    flagged integer DEFAULT 0
);


ALTER TABLE users OWNER TO postgres;

--
-- TOC entry 175 (class 1259 OID 16400)
-- Name: users_iid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE users_iid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_iid_seq OWNER TO postgres;

--
-- TOC entry 2192 (class 0 OID 0)
-- Dependencies: 175
-- Name: users_iid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE users_iid_seq OWNED BY users.iid;


--
-- TOC entry 2006 (class 2604 OID 16557)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comment_votes ALTER COLUMN iid SET DEFAULT nextval('comment_votes_iid_seq'::regclass);


--
-- TOC entry 1997 (class 2604 OID 16484)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments ALTER COLUMN iid SET DEFAULT nextval('comments_iid_seq'::regclass);


--
-- TOC entry 2002 (class 2604 OID 16515)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_visits ALTER COLUMN iid SET DEFAULT nextval('post_visits_iid_seq'::regclass);


--
-- TOC entry 2004 (class 2604 OID 16536)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_votes ALTER COLUMN iid SET DEFAULT nextval('post_votes_iid_seq'::regclass);


--
-- TOC entry 1986 (class 2604 OID 16432)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY posts ALTER COLUMN iid SET DEFAULT nextval('posts_iid_seq'::regclass);


--
-- TOC entry 1995 (class 2604 OID 16460)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_invites ALTER COLUMN iid SET DEFAULT nextval('user_invites_iid_seq'::regclass);


--
-- TOC entry 1979 (class 2604 OID 16406)
-- Name: iid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY users ALTER COLUMN iid SET DEFAULT nextval('users_iid_seq'::regclass);


--
-- TOC entry 2176 (class 0 OID 16553)
-- Dependencies: 188
-- Data for Name: comment_votes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comment_votes (id, iid, user_id, comment_id, created_at, updated_at) FROM stdin;
c96d29e1-676e-4094-b837-e99da8f947a8	1	f5a3735f-fba7-4403-bccb-c1ea2553b23c	f36b772e-464b-44d1-8567-8241397f8418	\N	\N
5e198d12-fa93-464e-9b95-d40f54bb9a99	2	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	70bfc2e4-7ad2-4f08-b307-46254da6b7e6	\N	\N
\.


--
-- TOC entry 2193 (class 0 OID 0)
-- Dependencies: 187
-- Name: comment_votes_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('comment_votes_iid_seq', 2, true);


--
-- TOC entry 2170 (class 0 OID 16480)
-- Dependencies: 182
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comments (id, iid, user_id, post_id, body, votes, score, created_at, updated_at, flagged, parent_id) FROM stdin;
f36b772e-464b-44d1-8567-8241397f8418	1	f5a3735f-fba7-4403-bccb-c1ea2553b23c	27c1f24b-96fe-4349-9127-15667168b6c7	kkgkkg	1	32464	2016-04-17 13:35:28.83154	2016-04-17 13:35:28.847964	0	\N
70bfc2e4-7ad2-4f08-b307-46254da6b7e6	2	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	77a8f21f-365a-4fee-baf7-c18ce6cc9994	//	1	32481	2016-04-26 13:20:47.770487	2016-04-26 13:21:03.724691	0	\N
\.


--
-- TOC entry 2194 (class 0 OID 0)
-- Dependencies: 181
-- Name: comments_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('comments_iid_seq', 2, true);


--
-- TOC entry 2172 (class 0 OID 16511)
-- Dependencies: 184
-- Data for Name: post_visits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY post_visits (id, iid, user_id, post_id, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 2195 (class 0 OID 0)
-- Dependencies: 183
-- Name: post_visits_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('post_visits_iid_seq', 1, false);


--
-- TOC entry 2174 (class 0 OID 16532)
-- Dependencies: 186
-- Data for Name: post_votes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY post_votes (id, iid, user_id, post_id, created_at, updated_at) FROM stdin;
92a2906f-a66f-4290-9786-ac4a1881f04e	1	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	27c1f24b-96fe-4349-9127-15667168b6c7	\N	\N
e6d9cd22-2873-43de-86e6-d4d726e4bd14	2	7b20098a-1d3a-4aa6-86e4-24a0d525be9e	dc8dadb9-8425-4a66-8c8e-a9fefa2a7f59	\N	\N
9a79ee34-e8ec-4f9d-9e74-ac5759358646	3	7b20098a-1d3a-4aa6-86e4-24a0d525be9e	27c1f24b-96fe-4349-9127-15667168b6c7	\N	\N
6f08ceff-c2f9-40e8-892f-33b7df0e47e1	4	f5a3735f-fba7-4403-bccb-c1ea2553b23c	dc8dadb9-8425-4a66-8c8e-a9fefa2a7f59	\N	\N
b1ff6d88-95b6-4dc0-bfea-29e3dce55f67	5	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	6383a5ae-d1ac-4dfc-ac55-444a8a805946	\N	\N
32be9d75-5e9d-4393-ba5d-7e4a71d183a4	6	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	0c170e3c-fad8-42fc-8e7b-b8b20a68f018	\N	\N
af8b7ff7-b2aa-4f07-8fea-908ee347dc40	7	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	21db4de6-96fe-47af-a18f-a5f74fabcd4a	\N	\N
676c96a7-c6c9-4934-907c-b010013edf01	8	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	5f042c61-5d50-4243-8f82-3ed7463328e8	\N	\N
8e8458f1-d8d5-4511-9d7a-16fb25874601	9	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	a944f400-d2ba-4111-abff-414045e89271	\N	\N
81c42a4f-21a3-4c2b-8d0a-2397154a7625	10	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	2a795984-1b47-4dcf-882c-3facb1565ac6	\N	\N
46b9f87b-d722-4eab-a932-bbec9402dd16	11	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	cd547732-a9ac-457a-8a9c-149eea535b3a	\N	\N
a91a8833-d311-4c91-bb8b-12f0246c66e4	12	d15947e9-3b46-4472-a0cb-dea1a222954c	04c7b4f0-8b85-45a1-92eb-1aa2d3eb7514	\N	\N
a1604608-31c1-4518-88a8-e49e46a06034	13	d15947e9-3b46-4472-a0cb-dea1a222954c	0912e2d4-4ea7-470e-8964-adfa9de1d851	\N	\N
37c0eace-6ffb-42ff-a702-91e92e649892	14	d15947e9-3b46-4472-a0cb-dea1a222954c	77a8f21f-365a-4fee-baf7-c18ce6cc9994	\N	\N
0efba2fb-2b7c-448c-9446-99e98fe16f7c	15	d15947e9-3b46-4472-a0cb-dea1a222954c	0c170e3c-fad8-42fc-8e7b-b8b20a68f018	\N	\N
d19ab7d8-3d05-4c26-ae3c-3a78e7842bc4	16	d15947e9-3b46-4472-a0cb-dea1a222954c	cd547732-a9ac-457a-8a9c-149eea535b3a	\N	\N
750a0a2e-a3ba-4417-89b4-1e816fee2e6d	17	d15947e9-3b46-4472-a0cb-dea1a222954c	dc8dadb9-8425-4a66-8c8e-a9fefa2a7f59	\N	\N
5c24ff8b-727a-450c-9a30-eb27a6d75051	18	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	04c7b4f0-8b85-45a1-92eb-1aa2d3eb7514	\N	\N
885f0d96-09a7-4faa-9aa8-65895ba693e3	19	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	003f25cb-657f-4b76-9188-cb295e34b49c	\N	\N
b5d62dc9-3127-49e2-9d76-f641809653d3	20	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	4e3e2e67-101e-4e16-a0fd-d813cdc547ef	\N	\N
b948e2d0-a8b1-4e66-9e43-8229ec7e1b01	21	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	ce640af4-2155-426a-a006-24545bfe3f6a	\N	\N
b50938f2-a15c-40af-803c-75c0a6dc1b24	22	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	0c170e3c-fad8-42fc-8e7b-b8b20a68f018	\N	\N
d360bf0c-fc9f-4229-83b6-ab51b36bb6a2	23	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	dc8dadb9-8425-4a66-8c8e-a9fefa2a7f59	\N	\N
2e69a283-67fc-4576-9800-d083d4698b14	24	d15947e9-3b46-4472-a0cb-dea1a222954c	ce640af4-2155-426a-a006-24545bfe3f6a	\N	\N
7053b6e9-f50d-4760-ad32-064c7c0e5af6	25	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	ce640af4-2155-426a-a006-24545bfe3f6a	\N	\N
4c5d6c6d-63d1-474c-b7b9-6b7a1bce4685	26	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	b25b9293-533b-4934-8669-c4f82d90fa63	\N	\N
96001f52-c0f2-4067-ae63-aad7275a5200	27	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	f54dd8d1-be73-48d5-ba1e-06c37f57c1a6	\N	\N
cbe97513-effe-48b9-a2b5-ae6c48554c7a	28	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	31c601c9-fb0c-4711-9234-003764650132	\N	\N
43ccd364-d8c3-4e74-949c-ebcac7107690	29	1c0226cf-7d6f-4e48-9f07-68caf18b0d9e	70bcb802-cdc6-48bd-912b-4d1fa9af370a	\N	\N
e4f79da1-2694-4da3-bddd-0e08db2bd616	30	1c0226cf-7d6f-4e48-9f07-68caf18b0d9e	133e1670-ee8e-4adb-97d6-33688d3de585	\N	\N
275915f3-6eab-4527-8019-87ef018680c1	31	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	2f89a439-bc32-4d89-ae43-d27dd17740ce	\N	\N
51b86e2a-6b32-4c5a-899a-c2cc6e8d579e	32	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	2f89a439-bc32-4d89-ae43-d27dd17740ce	\N	\N
e3220de2-96dd-4d80-a15d-ddd8066fc748	33	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	77a8f21f-365a-4fee-baf7-c18ce6cc9994	\N	\N
c7d1ba7f-510e-440b-a622-ceb244748639	34	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	199a2e5f-81b8-474d-9307-e691726a37b8	\N	\N
\.


--
-- TOC entry 2196 (class 0 OID 0)
-- Dependencies: 185
-- Name: post_votes_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('post_votes_iid_seq', 34, true);


--
-- TOC entry 2166 (class 0 OID 16428)
-- Dependencies: 178
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY posts (id, iid, visits, title, url, slug, oembed, html_title, link_icons, domain, votes, score, created_at, updated_at, user_id, open_graph, body, summary, tweet_id, published_at, comment_count, comments_count, user_handle, voted_user_ids, preview_url, flagged) FROM stdin;
dc8dadb9-8425-4a66-8c8e-a9fefa2a7f59	2	0	Introducing GPUImage 2, redesigned in Swift | Sunset Lake Software	http://www.sunsetlakesoftware.com/2016/04/16/introducing-gpuimage-2-redesigned-swift	introducing-gpuimage-2-redesigned-in-swift-sunset-lake-software	{}	Introducing GPUImage 2, redesigned in Swift | Sunset Lake Software	[]	sunsetlakesoftware.com	4	32464.6020600000011	2016-04-17 12:16:35.622754	2016-04-23 14:42:41.616175	7b20098a-1d3a-4aa6-86e4-24a0d525be9e	{"description":null,"title":null,"url":null,"site_name":null,"type":null,"image":null}	\n\t\t<div class="all-attached-images">\n<div class="image-attach-body image-attach-node-622" style="width: 150px;"><a href="/image/gpuimagelogo-smallpng"><img src="http://www.sunsetlakesoftware.com/sites/default/files/images/GPUImageLogo-Small.png" alt="GPUImageLogo-Small.png" title="GPUImageLogo-Small.png" class="image image-preview " width="150" height="150"></a></div>\n</div>\n<p>Back in 2010, I <a href="http://www.sunsetlakesoftware.com/2010/10/22/gpu-accelerated-video-processing-mac-and-ios">gave a talk about the use of OpenGL shaders to accelerate image and video processing on mobile devices</a>. The response from that talk was strong enough that two years later I <a href="http://www.sunsetlakesoftware.com/2012/02/12/introducing-gpuimage-framework">started work</a> on the open source framework <a href="https://github.com/BradLarson/GPUImage">GPUImage</a> with the goal of making this kind of processing more accessible to developers. In an attempt to broaden the reach of this framework, today I'm introducing the completely-rewritten-in-Swift <a href="https://github.com/BradLarson/GPUImage2">GPUImage 2</a> with support for Mac, iOS, and now Linux. This isn't just a port, it's a complete rewrite of the framework.</p>\n<p>I'm still shocked at the popularity of GPUImage, which right now is the <a href="https://github.com/search?l=&amp;o=desc&amp;q=language%3AObjective-C&amp;ref=advsearch&amp;s=stars&amp;type=Repositories&amp;utf8=">fourth-most-starred Objective-C repository on GitHub</a>. I built GPUImage as a means of making it easier to use OpenGL ES shaders to do GPU-accelerated processing of live camera video. It started as a project with the ability to process video from a camera on an iOS device and display it to the screen, and it came with only a single template for a filter. In the years since, it's grown to support movies, images, OpenGL textures, raw binary data, over 100 operations, and the Mac.</p>\n<p>Before I talk about the new version, I'd like to thank everyone who helped make the project what it is today, whether that was through pull requests adding new features or fixes, feedback that pointed out what was needed or broken, or just the many kind words I've heard in the last few years. Again, the response to this little hobby project of mine has never failed to surprise. Many of the contributed fixes and improvements have been rolled into this new framework. </p>\n<h3>Why rewrite in Swift</h3>\n<p>My end goal with GPUImage has been to use it for GPU-accelerated machine vision. There are many applications for machine vision on iOS devices and Macs just waiting for the right tools to come along, but there are even more in areas that Apple's hardware doesn't currently reach. Economies of scale around smartphone hardware have made it possible to build tiny yet capable single-board computers for under $40. I believe that embedded Linux board computers like the Raspberry Pi will have a significant impact in the years to come, particularly as the GPUs within them become more powerful.</p>\n<p>That's why the day that Swift was released as open source, with support for Linux as a target, I started planning out how I could bring GPUImage over to Swift. I've written before about <a href="http://www.sunsetlakesoftware.com/2014/12/02/why-were-rewriting-our-robotics-software-swift">why our company decided to rewrite our robotics software in Swift</a> and <a href="http://www.sunsetlakesoftware.com/2015/11/03/what-we-learned-rewriting-our-robotic-control-software-swift">what we learned from the experience</a>. That process has continued to pay dividends for us months later, leading to an accelerated pace of development while greatly reducing the number of bugs in our software. I had reason to believe that GPUImage will benefit from this, too.</p>\n<p>Therefore, I started fresh and built an entirely new project in Swift. The result is available <a href="https://github.com/BradLarson/GPUImage2">on GitHub</a>. I should caution upfront that this version of the framework is not yet ready for production, as I still need to implement, fix, or test many areas. Almost all operations are working, but some inputs / outputs are nonfunctional and several customization options are missing. Consider this a technology preview.</p>\n<p>It may seem a little odd for me to call this GPUImage 2. After all, I strongly resisted any attempts to add a version to the original GPUImage, and only tagged it with a 0.x.x development version to help those who wanted this on Cocoapods. However, this Swift rewrite dramatically changes the interface, drops compatibility with older OS versions, and is not intended to be used with Objective-C applications. The older version of the framework will remain up to maintain that support, and I needed a way to distinguish between questions and issues involving the rewritten framework and those about the Objective-C one.</p>\n<p>Here are some statistics on the new version of the framework vs. the old:</p>\n<table>\n<thead class="tableHeader-processed">\n<th>GPUImage Version</th>\n<th>Files</th>\n<th>Lines of Code</th>\n</thead>\n<tr class="even">\n<td>Objective-C (without shaders)</td>\n<td>359</td>\n<td>20107</td>\n</tr>\n<tr class="even">\n<td>Swift (without shaders)</td>\n<td>157</td>\n<td>4549</td>\n</tr>\n<tr class="even">\n<td>Shaders</td>\n<td>233</td>\n<td>6670</td>\n</tr>\n</table>\n<p>The rewritten Swift version of the framework, despite doing everything the Objective-C version does*, only uses 4549 lines of non-shader code vs. the 20107 lines of code before (shaders were copied straight across between the two). That's only 22% the size. That reduction in size is due to a radical internal reorganization which makes it far easier to build and define custom filters and other processing operations. For example, take a look at the difference between the <a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageSoftEleganceFilter.m">old GPUImageSoftEleganceFilter</a> (don't forget <a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageSoftEleganceFilter.h">the interface</a>) and <a href="https://github.com/BradLarson/GPUImage2/blob/master/framework/Source/Operations/SoftElegance.swift">the new SoftElegance operation</a>. They do the same thing, yet one is 62 lines long and the other 20. The setup for the new one is much easier to read, as a result.</p>\n<p>* (OK, with just a few nonfunctional parts. See the bottom of this page.)</p>\n<p>The Swift framework has also been made easier to work with. Clear and simple platform-independent data types (Position, Size, Color, etc.) are used to interact with the framework, and you get safe arrays of values from callbacks, rather than raw pointers. Optionals are used to enable and disable overrides, and enums make values like image orientations easy to follow. Chaining of filters is now easier to read using the new --&gt; operator:</p>\n<p></p>\n<div class="geshifilter"><pre class="geshifilter-cocoa">camera --&gt; filter1 --&gt; filter2 --&gt; view</pre></div>\n<p>Compare that to the previous use of addTarget(), and you can see how this new syntax is easier to follow:</p>\n<p></p>\n<div class="geshifilter"><pre class="geshifilter-cocoa">camera.addTarget(filter1)\nfilter1.addTarget(filter2)\nfilter2.addTarget(view)</pre></div>\n<p>I'm very happy with the result. In fact, I most likely will be scaling back my work on the Objective-C version, because the Swift one better serves my needs. The old version will remain for legacy support, but my new development efforts will be focused at GPUImage 2.</p>\n<h3>GPUImage on Linux</h3>\n<p>So it's cleaner and easier to work with, but what about that new Linux support? GPUImage now supports Linux as a target platform, using both OpenGL and OpenGL ES. I've added special support for the Raspberry Pi and its direct rendering to the screen via its Broadcom GPU. Here's the Raspberry Pi 3 rendering live Sobel edge detection from an incoming camera at 720p at 30 FPS:</p>\n<ul style="list-style-type: none;margin-left: auto; margin-right: auto; display: block;width:700px;">\n<li style="display: inline-block; margin-bottom: 1em; margin-left:1em; "> <img src="http://www.sunsetlakesoftware.com/sites/default/files/SobelOnRPi.jpg" alt="Sobel edge detection on Raspberry Pi" title="Sobel edge detection on Raspberry Pi" width="700" height="495">\n</li>\n</ul>\n<p>This is the entirety of the code for the application that does the above:</p>\n<p></p>\n<div class="geshifilter"><pre class="geshifilter-cocoa">import GPUImage\n \nlet camera = V4LCamera(size:Size(width:1280.0, height:720.0))\nlet renderWindow = RPiRenderWindow(width:1280, height:720)\nlet edgeDetection = SobelEdgeDetection()\n \ncamera --&gt; edgeDetection --&gt; renderWindow\n \ncamera.startCapture()\nwhile (true) {\n\tcamera.grabFrame()\n}</pre></div>\n<p>Likewise, here's Sobel edge detection of live video in desktop OpenGL on an Nvidia Jetson TK1 development board (which has a surprisingly powerful GPU in a ~$190 board computer):</p>\n<ul style="list-style-type: none;margin-left: auto; margin-right: auto; display: block;width:700px;">\n<li style="display: inline-block; margin-bottom: 1em; margin-left:1em; "> <img src="http://www.sunsetlakesoftware.com/sites/default/files/SobelOnTK1.jpg" alt="Sobel edge detection on Jetson TK1" title="Sobel edge detection on Jetson TK1" width="700" height="394">\n</li>\n</ul>\n<p>Video input is provided via the Video4Linux API, so any camera compatible with that should work with the framework. As mentioned, OpenGL ES (as used in the Raspberry Pi) and desktop OpenGL APIs are supported via GLUT. Right now, I don't have still image or movie input and output working, as I need to find the right libraries to use for those.</p>\n<p>Building for Linux is a bit of a pain at the moment, since the Swift Package Manager isn't completely operational on ARM Linux devices, and even where it is I don't quite have the framework compatible with it yet. Due to the number of targets supported by the framework, and all the platform-specific code that has to be filtered out, I haven't gotten the right package structure in place yet. That's something I'm actively working on, though, because I want this framework to be as easy to incorporate as typing "swift build".</p>\n<p>In the meantime, I've provided a couple of crude build scripts in the /framework and /examples directories to build the framework and the Linux sample applications by hand. Detailed installation and usage instructions are provided <a href="https://github.com/BradLarson/GPUImage2">in the project's Readme.md</a> following the steps I used to set up my Raspberry Pis and other Linux setups.</p>\n<p>Even with the early hassles, it's stunning to see the same high-performance image processing code written for Mac or iOS running unmodified on a Linux desktop or an embedded computing board. I look forward to the day when all it takes are are few "apt-get"s to pull the right packages, a few lines of code, and a "swift build" to get up and running with GPU-accelerated machine vision on a Raspberry Pi. This <a href="https://github.com/apple/swift/blob/master/docs/Android.md">may even finally answer the many, many people who have asked over the years for an Android port of the framework</a>.</p>\n<h3>What's new</h3>\n<p>I couldn't pass up the opportunity to add some new features to the framework. Some of these have been requested for years.</p>\n<p><b>Filters can now be applied to arbitrary shapes on an image.</b> This works for almost every filter in the framework. You supply an alpha mask to the mask property of the filter. The areas of this mask that are opaque will have the filter applied to them, while the original image will be used for areas that are transparent. This mask can come from a still image, a shape generator operation (new with this version), or even the output from another filter. </p>\n<p>Filters that were created solely to do this, such as the GPUImageGaussianSelectiveBlurFilter, are no longer needed and have been removed.</p>\n<p><b>Crop sizes are now in pixels.</b> While I like to use normalized coordinates throughout the framework, it was a real pain to crop images to a specific size that came from a video source. Typically you'd only know the size of the frames (and thus how to normalize your target size) after the video started playing. As a result, crops can now be defined in pixels and the normalized size is calculated internally.</p>\n<p><b>Gaussian and box blurs now automatically downsample and upsample for performance.</b> When I <a href="http://www.sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu">built the Gaussian blur mechanism in GPUImage</a>, I was very surprised at the benchmarked performance of Core Image for large blur radii. I believe that this performance was achieved by downsampling the image, blurring at a smaller radius, and then upsampling the blurred image. The results from this very closely simulate large blur radii, and this is much, much faster than direct application of a large blur. Therefore, this is now enabled by default in many of my blurs, which should lead to huge performance boosts in many situations. For example, an iPhone 4S now renders a 720p frame with a blur radius of 40 in under 7 ms, where before it would take well over 150 ms.</p>\n<h3>What's changed</h3>\n<p>Because this version requires Swift, and is packaged as a module, the OS version compatibility has been reduced. Here are the version requirements:</p>\n<p>- iOS: 8.0 or higher (Swift is supported on 7.0, but not Mac-style frameworks)<br>\n- OSX: 10.9 or higher<br>\n- Linux: Wherever Swift code can be compiled. Currently, that's Ubuntu 14.04 or higher, along with the many other places it has been ported to. I've gotten this running on the latest Raspbian, for example.</p>\n<p>One of the first things you may notice is that naming has been changed across the framework. Without the need for elaborate naming conventions to avoid namespace collisions, I've simplified the names of types throughout the framework. A GPUImageCamera is now just a camera. GPUImageViews are RenderViews. I've taken to calling anything that takes in or generates an image an operation, rather than a filter, since the framework now does so much more than just filter images. As a result, the -Filter suffix has been removed from many types.</p>\n<p>The framework uses platform-independent types where possible: Size, Color, and Float instead of CGSize, UIColor / NSColor, and CGFloat / GLfloat. This makes it easier to maintain code between Mac, iOS, and Linux. In callback functions, you now get defined arrays of these types instead of raw, unmanaged pointers to bytes. That will make it both easier and safer to work with these callbacks.</p>\n<p>Optionals now make working with overrides for size, etc. much clearer.</p>\n<p>Protocols are used to define types that take in images, produce images, and do both. This is part of a larger shift in architecture from code reuse via inheritance to code reuse via composition. While operations, inputs, and outputs are still classes (I wanted to use reference types to wrap hardware resources), levels of inheritance have been removed on favor of commonly used free functions or the much more capable ShaderProgram and Framebuffer internal types.</p>\n<p>For example, you no longer need to create custom subclasses for filters that take in different numbers of inputs (GPUImageTwoInputFilter and friends). The primary BasicOperation class lets you specify how many inputs you want (1-8), and it does the rest for you. This both cuts down on a ton of code, it also avoids awkward subclasses that didn't make much sense. You just need to provide your shaders and you're good.</p>\n<p>Speaking of shaders, those are now handled in a very different way. In the old Objective-C code, I inlined the shader code within the filter classes themselves via a compiler macro. Such compiler macros are no longer supported in Swift, and Swift <a href="http://stackoverflow.com/questions/24312923/how-can-you-implement-this-multiline-string-literal-macro-in-swift">doesn't have a means for easy multiline string constants</a> of the style that I'd need for copying-and-pasting shaders, so I've devised a different way to handle this.</p>\n<p>Now, all shaders for all operations reside in a special Operations/Shaders subdirectory within the framework. Fragment shaders have a .fsh extension and vertex shaders have a .vsh one. For shaders that are specific to OpenGL, the suffix _GL is used, and for OpenGL ES, _GLES. In that subdirectory is a Swift script that when run parses all of these shader files and generates two Swift files that inline as named string constants all of the shader code specific to the OpenGL API and the OpenGL ES API.</p>\n<p>Whenever you modify a shader or add a new one, you need to run</p>\n<p></p>\n<div class="geshifilter"><pre class="geshifilter-cocoa">./ShaderConverter.sh *</pre></div>\n<p>in that directory for your shader to be re-parsed and included in the Swift code. As some point, I'll do something to automate this scripting as part of the build process in a way that doesn't impact build times too much. For now, you have to run this by hand when you change shaders.</p>\n<p>While slightly less convenient than before, this now means that shaders get full GLSL syntax highlighting in Xcode and this makes it a lot easier to define single-purpose steps in image processing routines without creating a bunch of unnecessary custom subclasses. </p>\n<p>The underlying shader processing code is also much more intelligent, so you no longer need to explicitly attach attributes and uniforms in code, this is all handled for you. Swift's type system and method overloading now let you set a supported type value to a uniform's text name and the framework will convert to the correct OpenGL types and functions for attachment to the uniform.</p>\n<p>Groups are now much easier to define. The OperationGroup class now defines a simple function that's used to set up its internal structure:</p>\n<p></p>\n<div class="geshifilter"><pre class="geshifilter-cocoa">self.configureGroup{input, output in\n    input --&gt; self.unsharpMask\n    input --&gt; self.gaussianBlur --&gt; self.unsharpMask --&gt; output\n}</pre></div>\n<p>which makes it easy to build even complex multistep operations. No more confusion about inputs and outputs from the group, or ordering of targets. One of the things I've been surprised with in GPUImage over the years is how chaining together simple building blocks brings even very complex operations within your reach, and this should help with that.</p>\n<p>Finally, I've changed the way that images are extracted from the framework. Before, you could pull images from any operation at any point. This caused problems with <a href="http://www.sunsetlakesoftware.com/2014/03/17/switching-gpuimage-use-cached-framebuffers">the framebuffer caching mechanism I introduced to dramatically reduce memory usage within the framework</a>. I could never work out all the race conditions involving these transient framebuffers, so I've switched to using defined output classes for extraction of images. If you wish to pull images from the framework, you now need to target the filter you're capturing from to a PictureOutput or RawDataOutput instance. Those classes have asynchronous callbacks to grab and handle image capture in a reliable manner.</p>\n<h3>What's missing</h3>\n<p>As mentioned above, I would not recommend using this for production right now until I stabilize the codebase and add the last few features back in. Among the things that are missing from this release:</p>\n<p>- Still photo camera capture<br>\n- Movie playback and recording<br>\n- Audio recording<br>\n- Stable GCD integration, so most things are done on the main thread, not multithreaded<br>\n- Texture cache acceleration for fast image and raw data extraction off of the GPU<br>\n- Many of the sample applications are missing (raw data handling, object tracking, photo capture)<br>\n- UI element capture<br>\n- Image and view resizing or reorientation after setup of the processing chain<br>\n- This thing probably leaks memory like a sieve</p>\n<p>Equivalents of the following GPUImage filters are also missing right now:</p>\n<p>- GPUImagePerlinNoiseFilter.h<br>\n- GPUImageHoughTransformLineDetector.h<br>\n- GPUImageToneCurveFilter.h<br>\n- GPUImageHistogramFilter.h<br>\n- GPUImageHistogramEqualizationFilter.h<br>\n- GPUImageMosaicFilter.h<br>\n- GPUImagePoissonBlendFilter.h<br>\n- GPUImageJFAVoronoiFilter.h<br>\n- GPUImageVoronoiConsumerFilter.h<br>\n- GPUImageHSBFilter.h</p>\n<p>On Linux, the input and output options are fairly restricted until I settle on a good replacement for Cocoa's image and movie handling capabilities. I may add external modules to add support for things like FFmpeg.</p>\n<h3>Final words</h3>\n<p>My goal is that eventually people will find this framework to be more capable, more reliable, and more extensible than the Objective-C version, while also being easier to work with.</p>\n<p>If you'd like to learn more about this rewrite and my use of GPUImage on embedded Linux devices, <a href="https://windycitythings.com/speakers/">I'll be giving a talk on this</a> at the upcoming <a href="https://windycitythings.com">WindyCityThings conference</a> in Chicago on June 23-24.</p>\n\t	Back in 2010, I gave a talk about the use of OpenGL shaders to accelerate image and video processing on mobile devices. The response from that talk was strong enough that two years later I started work on the open source framework GPUImage with the goal of making this kind of processing more accessible to developers. In an attempt to broaden the reach of this framework, today I'm introducing the completely-rewritten-in-Swift GPUImage 2 with support for Mac, iOS, and now Linux. This isn't just a port, it's a complete rewrite of the framework. I'm still shocked at the popularity of GPUImage, which right now is the fourth-most-starred Objective-C repository on GitHub. I built GPUImage as a means of making it easier to use OpenGL ES shaders to do GPU-accelerated processing of live camera video. It started as a project with the ability to process video from a camera on an iOS device and displa	\N	2016-04-17 12:16:35.522886	0	0	social_collage	{7b20098a-1d3a-4aa6-86e4-24a0d525be9e,f5a3735f-fba7-4403-bccb-c1ea2553b23c,d15947e9-3b46-4472-a0cb-dea1a222954c,00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75}	http://www.sunsetlakesoftware.com/sites/default/files/images/GPUImageLogo-Small.png	0
0912e2d4-4ea7-470e-8964-adfa9de1d851	11	0	Peek: Check your application against your user interface's specification guide(s)	https://github.com/shaps80/peek?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	peek-check-your-application-against-your-user-interface-s-specification-guide-s	{}	GitHub - shaps80/Peek: Take a Peek at your application.	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	1	32475	2016-04-23 13:57:09.003152	2016-04-23 13:57:09.483843	d15947e9-3b46-4472-a0cb-dea1a222954c	{"description":"Take a Peek at your application.","title":"shaps80/Peek","url":"https://github.com/shaps80/Peek","site_name":"GitHub","type":"object","image":"https://avatars1.githubusercontent.com/u/251310?v=3\\u0026s=400"}	<p><a href="https://vimeo.com/162896152"><img src="https://camo.githubusercontent.com/1985675f2bf703ebdfbc030d8c5ebdb2db6466af/687474703a2f2f73686170732e6d652f6173736574732f696d672f7065656b2d666561747572654032782e706e67" name="user-content-Peek on Vimeo" data-canonical-src="http://shaps.me/assets/img/peek-feature@2x.png" style="max-width:100%;"></a></p>\n\n<h1>\n<a id="user-content-peek" class="anchor" href="#peek" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Peek</h1>\n\n<p><a href="http://cocoapods.org/pods/InkKit"><img src="https://camo.githubusercontent.com/4ef21eb1e37afcc556517ac3d430879163b78cdb/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5065656b2e7376673f7374796c653d666c6174" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/Peek.svg?style=flat" style="max-width:100%;"></a>\n<a href="http://cocoapods.org/pods/InkKit"><img src="https://camo.githubusercontent.com/35b06014050b35e8fa0fdec08a85b43992adfa3f/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f5065656b2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/Peek.svg?style=flat" style="max-width:100%;"></a>\n<a href="http://cocoadocs.org/docsets/Warrany"><img src="https://camo.githubusercontent.com/0872f01c80da334075d5ce2bbf036d1286675413/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e67756167652d73776966742d6666363962342e737667" alt="Language" data-canonical-src="https://img.shields.io/badge/language-swift-ff69b4.svg" style="max-width:100%;"></a>\n<a href="http://cocoapods.org/pods/InkKit"><img src="https://camo.githubusercontent.com/a7ae26e895f328e87e9702e13c1af961be762f6e/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f5065656b2e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/Peek.svg?style=flat" style="max-width:100%;"></a></p>\n\n<p>Peek is an open source library that lets you easily check your application against your user interface's specification guide(s). Peek can be used by engineers, designers &amp; testers, allowing developers to spend more time on code and less time checking that fonts, colors and layout are pixel perfect.</p>\n\n<h1>\n<a id="user-content-how-does-it-work" class="anchor" href="#how-does-it-work" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How does it work?</h1>\n\n<p>Tap your volume key(s) to activate/deactivate Peek.</p>\n\n<p>Then tap, or drag your finger across the screen to select a component and see its layout information.</p>\n\n<p>Double-tap anywhere on the screen to bring up the Peek Inspectors. Here peek will show you contextual information about the view you're inspecting. For example, a label will show information such as <code>font</code> and <code>textColor</code>, whereas an image might show information about its <code>size</code> or <code>scaling mode</code>.</p>\n\n<p>You can also tap and hold on any property to copy it to your pasteboard. More features coming soon regarding this -- which will allow you to report issues back to your dev(s).</p>\n\n<p>Peek currently supports a single overlay mode, but more are coming soon -- including an overlay that allows you to see measures <em>between</em> components!</p>\n\n<h1>\n<a id="user-content-demo" class="anchor" href="#demo" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Demo</h1>\n\n<p>The quickest way to see how awesome and useful Peek is, is by downloading this repo and running the sample project included.</p>\n\n<p>Its a small app that perfectly demonstrates the power of Peek!</p>\n\n<h1>\n<a id="user-content-how-do-i-get-started" class="anchor" href="#how-do-i-get-started" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How do I get started?</h1>\n\n<p>Peek was designed to be extremely easy to use.</p>\n\n<p>If you're a designer, send a link to this page to your dev(s) :)</p>\n\n<p>For developers, simply use CocoaPods (alternativel you can simply drag the files into your project)</p>\n\n<div class="highlight highlight-source-ruby"><pre>pod <span class="pl-s"><span class="pl-pds">'</span>Peek<span class="pl-pds">'</span></span></pre></div>\n\n<p>Then add a single line to your App Delegate:</p>\n\n<div class="highlight highlight-source-swift"><pre>window?<span class="pl-k">.</span>peek<span class="pl-k">.</span>enabled <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>\n\n<p>Optionally, I'd suggest adding the <code>DEBUG</code> Swift compiler flag and changing the code to:</p>\n\n<div class="highlight highlight-source-swift"><pre>#<span class="pl-k">if</span> DEBUG\n  window?<span class="pl-k">.</span>peek<span class="pl-k">.</span>enabled <span class="pl-k">=</span> <span class="pl-c1">true</span>\n#endif</pre></div>\n\n<p>You can also provide options when enabling Peek:</p>\n\n<div class="highlight highlight-source-swift"><pre>window?<span class="pl-k">.</span>peek<span class="pl-k">.</span>enableWithOptions { options <span class="pl-k">in</span>\n\n  <span class="pl-c">// Peek will require a shake on the device and simulator</span>\n  options<span class="pl-k">.</span>activationMode <span class="pl-k">=</span> <span class="pl-k">.</span>Shake \n\n  <span class="pl-c">// Container views (UIView) will not be ignored -- Note: this does not include system containers</span>\n  options<span class="pl-k">.</span>shouldIgnoreContainers <span class="pl-k">=</span> <span class="pl-c1">false</span>\n}</pre></div>\n\n<p>Now whenever you run your app, you can now activate/deactivate Peek by pressing one of the volume keys on your device ;)</p>\n\n<h1>\n<a id="user-content-safety-first" class="anchor" href="#safety-first" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Safety First</h1>\n\n<p>Peek is designed to be as safe as possible. Peek will never retain objects from your application. It will never use a background thread. Peek won't even run unless you explicitly enable it!</p>\n\n<p>Go ahead, take a Peek at your app now :)</p>\n\n<h1>\n<a id="user-content-what-about-using-peek-from-the-simulator" class="anchor" href="#what-about-using-peek-from-the-simulator" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>What about using Peek from the simulator?</h1>\n\n<p>Since the volume keys are not available on the Simulator, we can use a shake gesture instead. Simply forward the motion events to Peek by adding the following code to your AppDelegate.swift:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">override</span> <span class="pl-k">func</span> <span class="pl-en">motionBegan</span>(motion: UIEventSubtype, <span class="pl-en">withEvent</span> <span class="pl-smi">event</span>: UIEvent?) {\n  window?<span class="pl-k">.</span>peek<span class="pl-k">.</span>handleShake(motion)\n}</pre></div>\n\n<p>Now you can press <code>CMD+CTRL+Z</code> (or use the Menu option) to activate/deactivate Peek from your Simulator.</p>\n\n<h1>\n<a id="user-content-supported-platforms-and-versions" class="anchor" href="#supported-platforms-and-versions" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Supported Platforms and Versions</h1>\n\n<p>Peek is tested and supported on iOS 8 and above. Its also iPhone and iPad supported, in all orientations. In fact, Peek will only rotate if your app can ;)</p>\n\n<h1>\n<a id="user-content-about-peek" class="anchor" href="#about-peek" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>About Peek</h1>\n\n<ol>\n<li>Peek only requires a single line of code to get started</li>\n<li>Peek is disabled by default, so just make sure to use <code>#if DEBUG</code> to prevent it from being included in your release binary</li>\n<li>No 3rd party code or libraries are used in Peek -- all code is my own!</li>\n<li>Peek never interferes with your apps normal behavior, gestures or layout -- and it NEVER retains an object from your application</li>\n<li>Peek supports all orientations and devices.</li>\n</ol>\n<h1>\n<a id="user-content-how-does-peek-work" class="anchor" href="#how-does-peek-work" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How does Peek work?</h1>\n\n<p>Peek scans all the views in your entire view hierarchy that is currently on the screen then overlays these views with layout information.</p>\n\n<p>Peek then uses its filtering system to best determine which views you care about and those that you are not likely to be interested in.</p>\n\n<p>For example, by default Peek will not show you many of Apple's system components unless they are subclassed. A label however is a perfect exception to this, where you might not want to see all labels in a tab-bar but you do want to see the labels inside a cell.</p>\n\n<p>Peek presents itself in its own window that sits directly on top of your own app's user interface to ensure that it doesn't interfere with normal functionality.</p>\n\n<p>Peek also allows you to test all supported orientations on both iPhone and iPad.</p>\n\n<h1>\n<a id="user-content-roadmap" class="anchor" href="#roadmap" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Roadmap</h1>\n\n<p>There are a lot more features still to come, here's a short preview I think are quite interesting:</p>\n\n<ul>\n<li>Slack Integration (post issues to a Slack channel)</li>\n<li>Image crop indicators</li>\n<li>Auto Layout overlays</li>\n</ul>\n<h1>\n<a id="user-content-attribution" class="anchor" href="#attribution" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Attribution</h1>\n\n<p>Original concept, code and app design by <a href="http://twitter.com/shaps" title="Shaps on Twitter">@shaps</a><br>\nIcon design by <a href="http://twitter.com/h1brd" title="Marco on Twitter">@h1brd</a></p>\n	Peek is an open source library that lets you easily check your application against your user interface's specification guide(s). Peek can be used by engineers, designers & testers, allowing developers to spend more time on code and less time checking that fonts, colors and layout are pixel perfect. Tap your volume key(s) to activate/deactivate Peek. Then tap, or drag your finger across the screen to select a component and see its layout information. Double-tap anywhere on the screen to bring up the Peek Inspectors. Here peek will show you contextual information about the view you're inspecting. For example, a label will show information such as  and , whereas an image might show information about its  or . You can also tap and hold on any property to copy it to your pasteboard. More features coming soon regarding this -- which will allow you to report issues back to your dev(s). Peek curr	\N	2016-04-23 13:57:09.000713	0	0	swiftfan20841	{d15947e9-3b46-4472-a0cb-dea1a222954c}	https://camo.githubusercontent.com/1985675f2bf703ebdfbc030d8c5ebdb2db6466af/687474703a2f2f73686170732e6d652f6173736574732f696d672f7065656b2d666561747572654032782e706e67	0
21db4de6-96fe-47af-a18f-a5f74fabcd4a	5	0	Learn Recursion with Swift	http://waynewbishop.com/swift/recursion	learn-recursion-with-swift	{}	Learn Recursion with Swift — Wayne Bishop	[]	waynewbishop.com	1	32475	2016-04-23 09:17:45.734436	2016-04-23 09:17:46.030198	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":null,"title":"Learn Recursion with Swift","url":"http://waynewbishop.com/swift/recursion/","site_name":"Wayne Bishop","type":"website","image":null}	<h3 class="text-align-left">TOPICS</h3>\n<p class="text-align-left"><a href="/swift">Introduction</a></p>\n<p class="text-align-left"><a href="/swift/big-o-notation">Big O Notation</a></p>\n<p class="text-align-left"><a href="/swift/sorting-algorithms">Sorting</a> </p>\n<p class="text-align-left"><a href="/swift/linked-lists">Linked Lists</a></p>\n<p class="text-align-left"><a href="/swift/generics">Generics</a></p>\n<p class="text-align-left"><a href="/swift/closures">Closures</a></p>\n<p class="text-align-left"><a href="/swift/binary-search-trees">Binary Search Trees</a></p>\n<p class="text-align-left"><a href="/swift/binary-search-tree-rotations">Tree Balancing</a></p>\n<p class="text-align-left"><a href="/swift/tries">Tries</a></p>\n<p class="text-align-left"><a href="/swift/stacks-queues">Stacks &amp; Queues</a></p>\n<p class="text-align-left"><a href="/swift/graphs">Graphs</a></p>\n<p class="text-align-left"><a href="/swift/graphs/dijkstra">Shortest Paths</a></p>\n<p class="text-align-left"><a href="/swift/heaps">Heaps</a></p>\n<p class="text-align-left"><a href="/swift/traversals">Traversals</a></p>\n<p class="text-align-left"><a href="/swift/hashtables">Hash Tables</a></p>\n<p class="text-align-left"><a href="/swift/control-structures">Control Structures</a></p>\n<p class="text-align-left"><a href="/swift/recursion">Recursion</a></p>\n<p class="text-align-left"><a href="/swift/bloom-filters">Bloom Filters</a></p>\n<p class="text-align-left"><a href="/swift/unit-testing">Unit Testing</a></p>	Binary Search Trees Control Structures	\N	2016-04-23 09:17:45.644598	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
27c1f24b-96fe-4349-9127-15667168b6c7	1	0	Force optionals in multi-unwrapped "guard let" or "if let"	https://appventure.me/2016/04/14/force-optionals-in-guard-or-let-optional-binding/	force-optionals-in-multi-unwrapped-guard-let-or-if-let	{}	Force optionals in multi-unwrapped "guard let" or "if let"	[]	appventure.me	2	32464.3010299999987	2016-04-17 10:53:33.679929	2016-04-17 12:17:14.355384	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Mixing optional and non-optional functions in a guard is impossible and requires breaking up the lines. Here's a neat solution on how to circ","title":"Force optionals in multi-unwrapped \\"guard let\\" or \\"if let\\"","url":"http://appventure.me/2016/04/14/force-optionals-in-guard-or-let-optional-binding/","site_name":null,"type":null,"image":"http://appventure.me/img-content/2016-04-14-force-optionals-in-guard-or-let-optional-binding-feature-image.jpg"}	<h6>\n<i class="fi-pencil"></i> Thu, 14 Apr 2016 <a href="/2016/04/14/force-optionals-in-guard-or-let-optional-binding/">#</a>\n</h6>\n\n        <h3><a href="/2016/04/14/force-optionals-in-guard-or-let-optional-binding/">Force optionals in multi-unwrapped "guard let" or "if let"</a></h3>\n\n        <div class="actual-content">\n<!-- #+feature-image: /img-content/2016-04-14-force-optionals-in-guard-or-let-optional-binding-feature-image.jpg -->\n\n<p>\nI really love unwrapping optionals in a multi- <code>guard</code> or <code>let</code> statement with additional <code>where</code> clauses added. <a href="https://appventure.me/2016/03/29/three-tips-for-clean-swift-code/">See my previous post on this here</a>. However, sometimes I run into a situation where I have one function call (or a array subscript) in between my others that does not return an optional:\n</p>\n\n<div class="org-src-container">\n\n<pre class="src src-swift">// Imagine this function does something complicated\nfunc someArray() -&gt; [Int]? {\n    return [1, 2, 3, 4, 5, 6]\n}\n\nfunc example() {\n    guard let array = someArray(),\n\tnumberThree = array[2]\n\twhere numberThree == 3\n\telse { return }\n    print(numberThree)\n}\n</pre>\n</div>\n\n<p>\nThis doesn't work. The compiler will explain to you that it expects an optional: \n</p>\n\n<blockquote>\n<p>\n"Initializer for conditional binding must have Optional type, not 'Int'"\n</p>\n</blockquote>\n\n<p>\nSo, what you oftentimes end up with, instead, is something like this:\n</p>\n\n<div class="org-src-container">\n\n<pre class="src src-swift">func example() {\n    guard let array = someArray() else { return }\n    let numberThree = array[2]\n    guard numberThree == 3 else { return }\n    print(numberThree)\n}\n</pre>\n</div>\n\n<p>\nNot only is this awful to look at, you also have to write the failure block twice. That's ok for a simple example as this one <code>{ return }</code>, but when you have to perform a bit more work in there you'll have to repeat code blocks; and that's bad <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>. \n</p>\n\n<p>\nSo what's the solution here? Well, since the <code>guard</code> or <code>let</code> requires an optional, we can just as well create one and unpack it again:\n</p>\n\n<div class="org-src-container">\n\n<pre class="src src-swift">func example() {\n    guard let array = someArray(),\n\tnumberThree = Optional.Some(array[2])\n\twhere numberThree == 3\n\telse { return }\n    print(numberThree)\n}\n</pre>\n</div>\n\n<p>\nAs you may remember, Swift's optionals are internally more or less <code>enums</code> with a <code>.Some</code> and a <code>.None</code> case. So what we're doing here is creating a new <code>.Some</code> case only to unwrap it again in the very same line: The <code>array[2]</code> expression will be wrapped with <code>Optional.Some</code> and then unwrapped again into <code>numberThree</code>. \n</p>\n\n<p>\nThere is a wee bit of overhead here, but on the other hand it does allow us to keep the <code>guard</code> or <code>let</code> unwrappings much cleaner.\n</p>\n\n<p>\nThis obviously doesn't just work with array subscripts like <code>array[3]</code> but also with any non-optional function, i.e.:\n</p>\n\n<div class="org-src-container">\n\n<pre class="src src-swift" id="feature-image">guard let aString = optionalString(),\n    elements = Optional.Some(aString.characters.split("/")),\n    last = elements.last,\n    count = Optional.Some(last.characters.count),\n    where count == 5 else { fatalError("Wrong Path") }\nprint("We have \\(count) items in \\(last)")\n</pre>\n</div>\n<div id="footnotes">\n<h2 class="footnotes">Footnotes: </h2>\n<div id="text-footnotes">\n\n<div class="footdef">\n<sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup><p>Or you start refactoring this into seperate closures or functions, but that's an awful lot of work for just one guard statement</p>\n</div>\n\n\n</div>\n</div>\n</div>\n\n        <div id="followme">\n            <p>If you read this far, you should follow me (<a href="http://www.twitter.com/terhechte">@terhechte</a>) <br> on <a href="http://www.twitter.com/terhechte"><i class="fi-social-twitter"></i> Twitter</a></p>\n            <br><a href="https://twitter.com/share" class="twitter-share-button" data-via="terhechte" data-size="large" data-count="none">Tweet</a>\n</div>\n        \n\n        <div class="footnotes">\n            <ol></ol>\n</div>\n\n        <p class="anchor"><i class="fi-anchor"></i></p>\n \n      	I really love unwrapping optionals in a multi-  or  statement with additional  clauses added. See my previous post on this here. However, sometimes I run into a situation where I have one function call (or a array subscript) in between my others that does not return an optional: This doesn't work. The compiler will explain to you that it expects an optional: "Initializer for conditional binding must have Optional type, not 'Int'" So, what you oftentimes end up with, instead, is something like this: Not only is this awful to look at, you also have to write the failure block twice. That's ok for a simple example as this one , but when you have to perform a bit more work in there you'll have to repeat code blocks; and that's bad 1. So what's the solution here? Well, since the  or  requires an optional, we can just as well create one and unpack it again: As you may remember, Swift's optionals	\N	2016-04-17 10:53:33.569284	0	1	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c,7b20098a-1d3a-4aa6-86e4-24a0d525be9e}	\N	0
0c170e3c-fad8-42fc-8e7b-b8b20a68f018	4	0	apple/swift-evolution: Mutability and Foundation Value Types	https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md	apple-swift-evolution-mutability-and-foundation-value-types	{}	swift-evolution/0069-swift-mutability-for-foundation.md at master · apple/swift-evolution · GitHub	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	3	32475.4771212999985	2016-04-23 09:10:39.568149	2016-04-23 14:42:31.912626	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"swift-evolution - This maintains proposals for changes and user-visible enhancements to the Swift Programming Language.","title":"apple/swift-evolution","url":"https://github.com/apple/swift-evolution","site_name":"GitHub","type":"object","image":"https://avatars0.githubusercontent.com/u/10639145?v=3\\u0026s=400"}	<h1>\n<a id="user-content-mutability-and-foundation-value-types" class="anchor" href="#mutability-and-foundation-value-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Mutability and Foundation Value Types</h1>\n\n<ul>\n<li>Proposal: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md">SE-0069</a>\n</li>\n<li>Author(s): Tony Parker <a href="mailto:anthony.parker@apple.com">anthony.parker@apple.com</a>\n</li>\n<li>Status: <strong>Awaiting review</strong>\n</li>\n<li>Review Manager: TBD</li>\n</ul>\n<h2>\n<a id="user-content-introduction" class="anchor" href="#introduction" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Introduction</h2>\n\n<p>One of the core principles of Swift is "mutability when you need it." This is espoused by Apple's official documentation about Swift:</p>\n\n<ul>\n<li><a href="https://developer.apple.com/swift/blog/?id=10">Value and Reference Types - Swift Developer Blog</a></li>\n<li><a href="https://developer.apple.com/videos/play/wwdc2015-414/">Building Better Apps with Value Types in Swift - WWDC 2015 (Doug Gregor)</a></li>\n<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-ID82">Swift Programming Language - Classes and Structures</a></li>\n</ul>\n<p>This concept is so important that it is literally the second thing taught in <em>The Swift Programming Language</em>, right after <code>print("Hello, world!")</code>:</p>\n\n<blockquote>\n<p><strong>Simple Values</strong></p>\n\n<p>Use <code>let</code> to make a constant and <code>var</code> to make a variable. The value of a constant doesn't need to be known at compile time, but you must assign it a value exactly once.</p>\n\n<p><strong>Excerpt From: Apple Inc. "<a href="https://itun.es/us/jEUH0.l__">The Swift Programming Language (Swift 2.1).</a></strong>" </p>\n</blockquote>\n\n<p>When certain Foundation types are imported into Swift, they do not fully take advantage of the features that Swift has to offer developers for controlling mutability of their objects. </p>\n\n<p>This proposal describes a straightforward concept for providing this capability. It describes a set of new Foundation value types which wrap their corresponding reference types. This is a technique used by the standard library. This allows us to:</p>\n\n<ol>\n<li>Improve the developer experience, </li>\n<li>Increase performance for small types like <code>Date</code>\n</li>\n<li>Preserving the ability for developers to customize the behavior of most types.</li>\n</ol>\n<p>This proposal describes the fundamental ideas and provides general justification.</p>\n\n<h2>\n<a id="user-content-motivation" class="anchor" href="#motivation" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Motivation</h2>\n\n<p>Foundation itself already uses many value types in Objective-C and Swift:</p>\n\n<ul>\n<li>Primitive C types (<code>double</code>, <code>long</code>, <code>int64_t</code>, and more)</li>\n<li>Architecture-hiding integer types (<code>NSUInteger</code>, <code>NSInteger</code>)</li>\n<li>Enumerations (276 in Foundation)</li>\n<li>Option sets (51 in Foundation)</li>\n<li>C structure types (18 in Foundation, including <code>Point</code>, <code>Rect</code>, <code>EdgeInsets</code>, <code>Decimal</code>)</li>\n</ul>\n<p>In C, developers can control the mutability of these value types by using the <code>const</code> keyword:</p>\n\n<div class="highlight highlight-source-c"><pre><span class="pl-k">const</span> NSPoint p = {<span class="pl-c1">1</span>, <span class="pl-c1">2</span>};\np.x = <span class="pl-c1">3</span>; <span class="pl-c">// Error: error: cannot assign to variable 'p' with const-qualified type 'const NSPoint'</span></pre></div>\n\n<p>In Swift, developers control the mutability of these value types by using <code>let</code> instead of <code>var</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> p <span class="pl-k">=</span> NSPoint(x: <span class="pl-c1">1</span>, y: <span class="pl-c1">2</span>)\np<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-c">// Error: cannot assign to property: 'p' is a 'let' constant</span></pre></div>\n\n<p>However, struct types in Swift have far more functionality available to them than their primitive C ancestors:</p>\n\n<ul>\n<li>Methods</li>\n<li>Initializers</li>\n<li>Access control (private, public, internal) on both methods and ivars</li>\n<li>Conformance to protocols, including default implementations from those protocols</li>\n<li>Generics support</li>\n<li>Ability to modify without sacrificing binary compatibility</li>\n</ul>\n<p>The Swift standard library takes full advantage of these new capabilities for <code>String</code>, <code>Array</code>, <code>Dictionary</code>, <code>Set</code>, and others. In fact, we go as far as to automatically bridge these Foundation types to the standard library struct type when API using them is imported into Swift.</p>\n\n<h4>\n<a id="user-content-fixing-a-mutability-impedance-mismatch" class="anchor" href="#fixing-a-mutability-impedance-mismatch" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Fixing a Mutability Impedance Mismatch</h4>\n\n<p>The public API of the Swift standard library itself is composed of almost entirely value types (109 <code>struct</code>, 6 <code>class</code>, as of Swift 2.2).</p>\n\n<p>The pervasive presence of struct types in the standard library, plus the aforementioned automatic bridging of all Cocoa SDK API when imported into Swift, leads to the feeling of an API impedance mismatch for key unbridged Foundation reference types.</p>\n\n<p>This is because in our Objective-C API, we sometimes provide mutability via methods that return a new version of an immutable receiver:</p>\n\n<div class="highlight highlight-source-objc"><pre><span class="pl-c">// NSDate</span>\n- (<span class="pl-k">instancetype</span>)dateByAddingTimeInterval:(<span class="pl-c1">NSTimeInterval</span>)ti;\n\n<span class="pl-c">// NSURL</span>\n- (nullable <span class="pl-c1">NSURL</span> *)URLByAppendingPathExtension:(<span class="pl-c1">NSString</span> *)pathExtension;</pre></div>\n\n<p>And sometimes via mutable properties:</p>\n\n<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NSDateComponents</span> : <span class="pl-e">NSObject</span> &lt;<span class="pl-c1">NSCopying</span>, <span class="pl-c1">NSSecureCoding</span>&gt;\n\n<span class="pl-k">@property</span> (nullable, <span class="pl-k">copy</span>) <span class="pl-c1">NSCalendar</span> *calendar;\n<span class="pl-k">@property</span> (nullable, <span class="pl-k">copy</span>) <span class="pl-c1">NSTimeZone</span> *timeZone;\n<span class="pl-k">@property</span> <span class="pl-k">NSInteger</span> era;\n<span class="pl-k">@property</span> <span class="pl-k">NSInteger</span> year;\n<span class="pl-c">// etc.</span>\n<span class="pl-k">@end</span></pre></div>\n\n<p>However, we do not use the C <code>const</code> keyword for controlling mutable behavior on Objective-C classes.</p>\n\n<p>Focusing on the <code>NSDate</code> example, let's translate the existing design pattern directly into Swift:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> myDate <span class="pl-k">=</span> Date()\n<span class="pl-k">let</span> myLaterDate <span class="pl-k">=</span> myDate<span class="pl-k">.</span>dateByAddingTimeInterval(<span class="pl-c1">60</span>)</pre></div>\n\n<p>Unfortunately, this feels awkward for two reasons:</p>\n\n<ol>\n<li>The <code>var</code> or <code>let</code> keywords mean almost nothing. The code above behaves exactly the same if it uses <code>var</code> instead of <code>let</code>. This is a major language feature we are dropping on the floor.</li>\n<li>The only way to mutate <code>Date</code> is to create a new one. This does not match with the idea of "mutability when you need it."</li>\n</ol>\n<p>The following code is a more natural match for the way Swift developers would expect this to work:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">var</span> myDate <span class="pl-k">=</span> Date()\nmyDate<span class="pl-k">.</span>addTimeInterval(<span class="pl-c1">60</span>) <span class="pl-c">// OK</span>\n\n<span class="pl-k">let</span> myOtherDate <span class="pl-k">=</span> Date()\nmyOtherDate<span class="pl-k">.</span>addTimeInterval(<span class="pl-c1">60</span>) <span class="pl-c">// Error, as expected</span></pre></div>\n\n<p>It is important to remember that the <code>Date</code> API author still controls the methods available on the type, and does not have to provide mutability for every property (as they would in a C struct). For types where we want to provide limited mutability, we can make all properties <code>get</code> only and add <code>mutable</code> methods to tightly control state and maintain internal consistency. For example, in the case of <code>Date</code> the <code>NSTimeInterval</code> ivar is still private to the implementation while we provide a <code>mutable func</code> to add a time interval.</p>\n\n<h4>\n<a id="user-content-predictable-composition" class="anchor" href="#predictable-composition" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Predictable Composition</h4>\n\n<p>Swift provides automatic and natural support for copying value types just by using assignment. However, when a value type contains a reference type, the developer must take special care to ensure that the reference type is copied correctly. For some Foundation types, this means calling <code>copy()</code>. If this is not done correctly, then the failure will be found at runtime.</p>\n\n<p>As an example, let's borrow the Barcode example from the official Swift documentation.</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">enum</span> Barcode {\n    <span class="pl-k">case</span> UPCA(<span class="pl-c1">Int</span>, <span class="pl-c1">Int</span>, <span class="pl-c1">Int</span>, <span class="pl-c1">Int</span>)\n    <span class="pl-k">case</span> QRCode(<span class="pl-c1">String</span>)\n    <span class="pl-k">case</span> SpecialCode(IncrementingCode)\n}</pre></div>\n\n<p><code>SpecialCode</code> is a new kind of mutable barcode that contains an incrementing counter. Let's say that this counter is backed by mutable data.</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Simplified for clarity</span>\n<span class="pl-k">struct</span> IncrementingCode {\n    <span class="pl-k">private</span> <span class="pl-k">var</span> data <span class="pl-k">:</span> NSMutableData\n    <span class="pl-k">init</span>() { <span class="pl-c">/* Store a value of 0 in our Data */</span> }\n    <span class="pl-k">func</span> <span class="pl-en">increment</span>() {\n       <span class="pl-c">// Retrieve the value, increment, and set it back</span>\n    }\n}</pre></div>\n\n<p>This code has an error that is not obvious at first. To see what it is, let's look at some example code:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">var</span> aCode <span class="pl-k">=</span> IncrementingCode()\naCode<span class="pl-k">.</span>increment() <span class="pl-c">// value == 1</span>\n\n<span class="pl-c">// Compose this incrementing code (appears to be a value type) into another value type (an enum)</span>\n<span class="pl-k">let</span> barcode <span class="pl-k">=</span> Barcode<span class="pl-k">.</span>SpecialCode(aCode) <span class="pl-c">// BarCode.SpecialCode, value 1</span>\n\naCode<span class="pl-k">.</span>increment()\n<span class="pl-c">// barcode is now a BarCode.SpecialCode with value 2 -- but barcode was "let" and should have been immutable.</span></pre></div>\n\n<p>The error is that the <code>IncrementingCode</code> type should have implemented copy-on write behavior when containing a reference type. Without that, "copies" of the value type are actually sharing all underlying data through the <code>NSMutableData</code> reference.</p>\n\n<p>Today, developers using basic mutable Foundation types like <code>MutableData</code> must fix this themselves by re-implementing the same box/unbox logic each time they use the reference type.</p>\n\n<p>If <code>Data</code> were instead a value type, then the <code>Data</code> struct itself handles the copying and developers do not have to manually box it.</p>\n\n<h4>\n<a id="user-content-meaningful-mutable-keywords" class="anchor" href="#meaningful-mutable-keywords" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Meaningful Mutable Keywords</h4>\n\n<p>The error above would have been obvious with a value type. Plus, that error would be found at compile time instead of runtime. As an example, let's use an Integer instead:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">struct</span> IncrementingCode_Value {\n    <span class="pl-k">var</span> val <span class="pl-k">:</span> <span class="pl-c1">Int8</span>\n    <span class="pl-k">init</span>() { val <span class="pl-k">=</span> <span class="pl-c1">0</span> }\n    <span class="pl-k">func</span> <span class="pl-en">increment</span>() {\n        val <span class="pl-k">+=</span> <span class="pl-c1">1</span> <span class="pl-c">// error: 'self' is immutable</span>\n    }\n}</pre></div>\n\n<p>The compiler correctly told us that a mutating operation must be marked as such on the structure type. When <code>val</code> was a mutable reference type, the mutation was unknown to the compiler and it could not help.</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">mutating</span> <span class="pl-k">func</span> <span class="pl-en">increment</span>() {\n    val <span class="pl-k">+=</span> <span class="pl-c1">1</span> <span class="pl-c">// ok</span>\n}</pre></div>\n\n<h2>\n<a id="user-content-proposed-solution" class="anchor" href="#proposed-solution" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Proposed solution</h2>\n\n<p>Value types which hold more than a trivial amount of data in Swift are implemented using a copy on write technique. In this case, the value type is effectively a pointer to a shared reference type [^impldetails].</p>\n\n<p>[^impldetails]: This proposal describes a high-level approach to implementation; the details may be more complex. For example, we use a custom subclass of the abstract <code>NSData</code> class to enable Swift reference counting even when bridged back to Objective-C. These details are out of the scope of this proposal.</p>\n\n<p>The reference type is traditionally private to the implementation. However, by publishing the reference type, we can allow customization of its behavior via subclassing while simultaneously providing value semantics. In the case of Foundation value types, the published reference type is the current class type.</p>\n\n<h3>\n<a id="user-content-new-value-types" class="anchor" href="#new-value-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>New Value Types</h3>\n\n<p>The following value types will be added in the Swift overlay. Immutable/mutable pairs (e.g. <code>Data</code> and <code>MutableData</code>) will become one mutable struct type:</p>\n\n<table>\n<thead><tr>\n<th>Value Type</th>\n<th>Class Type</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>AffineTransform</td>\n<td>NSAffineTransform</td>\n</tr>\n<tr>\n<td>CharacterSet</td>\n<td>NSCharacterSet, NSMutableCharacterSet</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>NSDate</td>\n</tr>\n<tr>\n<td>DateComponents</td>\n<td>NSDateComponents</td>\n</tr>\n<tr>\n<td>Data</td>\n<td>NSData, NSMutableData</td>\n</tr>\n<tr>\n<td>IndexSet</td>\n<td>NSIndexSet, NSMutableIndexSet</td>\n</tr>\n<tr>\n<td>IndexPath</td>\n<td>NSIndexPath</td>\n</tr>\n<tr>\n<td>Notification</td>\n<td>NSNotification</td>\n</tr>\n<tr>\n<td>PersonNameComponents</td>\n<td>NSPersonNameComponents</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>NSURL</td>\n</tr>\n<tr>\n<td>URLComponents</td>\n<td>NSURLComponents</td>\n</tr>\n<tr>\n<td>URLQueryItem</td>\n<td>NSURLQueryItem</td>\n</tr>\n<tr>\n<td>UUID</td>\n<td>NSUUID</td>\n</tr>\n</tbody>\n</table>\n<p>These new <code>struct</code> types will be implemented in the Swift overlay. Immutable/mutable pairs (e.g. <code>Data</code> and <code>MutableData</code>) will become one mutable struct type.</p>\n\n<p>These types will have the same functionality as their corresponding <code>NS</code> type. In some cases, we will add new functionality if it is directly related to the new type becoming "more Swifty". However, we want API changes to remain focused on the task of converting these to value types and avoid feature creep by considering too much new API. The overlay is deployed back to the first supported release for Swift, so the implementation of these types will use the existing reference type API.</p>\n\n<p>For a small number of these types, we will copy the contents and not hold a reference. This set of types is:</p>\n\n<ul>\n<li>AffineTransform</li>\n<li>Date</li>\n<li>Notification</li>\n</ul>\n<p>The criteria for inclusion in this list is primarily a small memory footprint or a requirement for rapid mutation to avoid reference counting or bridging cost.</p>\n\n<p>Some of the struct types will gain mutating methods. In general, the implementation of the struct type will forward to the underlying reference type, so as to allow a subclass to customize the behavior. If the struct is not initialized with a reference type (using a cast), then it is free to implement as much or as little behavior as it chooses either by delegation to the standard Foundation reference type or via a customized Swift implementation. However, our first version will rely heavily on the existing logic in the Objective-C Foundation framework. This approach is important to reduce the risk.</p>\n\n<h2>\n<a id="user-content-detailed-design" class="anchor" href="#detailed-design" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Detailed design</h2>\n\n<p>The class types will be marked with an attribute that annotates them as Swift struct types [^swiftattr]. The struct types will be implemented in the Swift overlay. This re-implementation may either simply contain the Foundation reference type or reimplement functionality from Objective-C in Swift. Extremely simple types such as <code>Date</code> do not contain complicated logic, and writing their implementation in Swift will provide a performance benefit to all Swift users as well as a shared implementation for Swift Open Source.</p>\n\n<p>[^swiftattr]: In the short term, a compiler attribute that can be applied via API notes will be used. This avoids a lock-step dependency between the framework code and overlay.</p>\n\n<p>When these types are returned from Objective-C methods, they will be automatically bridged into the equivalent struct type. When these types are passed into Objective-C methods, they will be automatically bridged into the equivalent class type. The <em>Bridging</em> section below contains more information.</p>\n\n<p>Larger value types (for example, <code>Data</code>, <code>DateComponents</code>, and <code>URLComponents</code>) will be implemented with <em>copy on write</em> behavior. This preserves the performance characteristics of a reference type while maintaining conformance with the Swift mutability model.</p>\n\n<p>In the Swift overlay, each struct type adopts a new protocol that describes its behavior as a bridged type, along with common behavior of <code>Equatable</code>, <code>Hashable</code>, etc. The name of the protocol is <code>ReferenceConvertible</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">/// Decorates types which are backed by a Foundation reference type.</span>\n<span class="pl-k">public</span> <span class="pl-k">protocol</span> ReferenceConvertible <span class="pl-k">:</span> _ObjectiveCBridgeable, <span class="pl-c1">CustomStringConvertible</span>, <span class="pl-c1">CustomDebugStringConvertible</span>, <span class="pl-c1">Hashable</span>, <span class="pl-c1">Equatable</span> {\n    associatedtype ReferenceType <span class="pl-k">:</span> NSObject\n}</pre></div>\n\n<h4>\n<a id="user-content-type-conversion" class="anchor" href="#type-conversion" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Type Conversion</h4>\n\n<p>Each reference type may be cast to its corresponding struct type. This may be used to wrap a custom subclass of the reference type. For example, in <code>Data</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">class</span> MyData <span class="pl-k">:</span> NSMutableData { }\n\n<span class="pl-k">func</span> <span class="pl-en">myData</span>() <span class="pl-k">-&gt;</span> Data {\n    <span class="pl-k">return</span> MyData() <span class="pl-k">as</span> Data\n}</pre></div>\n\n<p>It is also possible to get the reference type from the struct type (<code>myData as? NSData</code>) [^mutref].</p>\n\n<p>[^mutref]: In practice, we will use a custom subclass of the reference type where possible. This custom <code>NSObject</code> subclass uses the same Swift reference counting mechanism as a Swift class, which should maintain the correct behavior for uniqueness-checking.</p>\n\n<h4>\n<a id="user-content-custom-behavior" class="anchor" href="#custom-behavior" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Custom Behavior</h4>\n\n<p>The most obvious drawback to using a struct is that the type can no longer be subclassed. At first glance, this would seem to prevent the customization of behavior of these types. However, by publicizing the reference type and providing a mechanism to wrap it (<code>mySubclassInstance as ValueType</code>), we enable subclasses to provide customized behavior.</p>\n\n<p>As a case study, we will look at the Foundation <code>Data</code> type.</p>\n\n<h5>\n<a id="user-content-developer-experience--api" class="anchor" href="#developer-experience--api" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Developer Experience / API</h5>\n\n<p>The following is a simplified example of how the Foundation-provided <code>struct Data</code> would be used by developers. It is the same as today, except that we can take advantage of Swift's built-in support for mutability via <code>let</code> and <code>var</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// We have already setup two buffers with some data</span>\n<span class="pl-k">let</span> d <span class="pl-k">=</span> Data(bytes: buffer1, length: buffer1Size)\n<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pse">\\(</span><span class="pl-s1">d</span><span class="pl-pse">)</span><span class="pl-pds">"</span></span>) \n<span class="pl-c">// &lt;68656c6c 6f00&gt;</span>\n\n<span class="pl-c">// Note: d2 does not copy the data here</span>\n<span class="pl-k">var</span> d2 <span class="pl-k">=</span> d \n\n<span class="pl-c">// ... it copies it here, on mutation, automatically when needed</span>\nd2<span class="pl-k">.</span>appendBytes(buffer2, length: buffer2Size)\n\n<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pse">\\(</span><span class="pl-s1">d</span><span class="pl-pse">)</span> <span class="pl-pse">\\(</span><span class="pl-s1">d2</span><span class="pl-pse">)</span><span class="pl-pds">"</span></span>) \n<span class="pl-c">// &lt;68656c6c 6f00&gt; &lt;68656c6c 6f002077 6f726c64 00&gt;</span></pre></div>\n\n<h5>\n<a id="user-content-implementation-details" class="anchor" href="#implementation-details" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Implementation Details</h5>\n\n<p>The methods and properties we want <code>Data</code> to have are defined on the structure itself. The reference type has similar (but not exactly the same) API [^apidiffs]. <code>Data</code> can adopt Swift standard library protocols like <code>MutableCollectionType</code>. </p>\n\n<p>[^apidiffs]: We will remove deprecated API from the value type. We will also remove API that is expressed differently via adoption of a Swift protocol.</p>\n\n<p>The implementation calls through to the stored reference type. If we add API to <code>NSData</code> in the future, then we will also add it to <code>Data</code>.</p>\n\n<p>Here is an over-simplified look at the <code>Data</code> structure [^moreimpldetails]:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">public</span> <span class="pl-k">struct</span> Data <span class="pl-k">:</span> <span class="pl-c1">Equatable</span>, <span class="pl-c1">Hashable</span>, Coding, <span class="pl-c1">MutableCollectionType</span> {\n    <span class="pl-k">private</span> <span class="pl-k">var</span> _box <span class="pl-k">:</span> _DataBox <span class="pl-c">// Holds an NSData pointer</span>\n\n    <span class="pl-k">public</span> <span class="pl-k">var</span> count <span class="pl-k">:</span> <span class="pl-c1">Int</span> {\n        <span class="pl-k">let</span> reference <span class="pl-k">=</span> <span class="pl-k">...</span> <span class="pl-c">// Get reference out of the box</span>\n        <span class="pl-k">return</span> reference<span class="pl-k">.</span><span class="pl-c1">length</span>\n    }\n\n    <span class="pl-c">// Etc.</span>\n}</pre></div>\n\n<p>[^moreimpldetails]: Exact implementation is out of scope for this proposal. This example is provided to help clarify the intended behavior, not as a reference for implementation.</p>\n\n<p>Note that this structure is only 1 word in size, the same as a <code>class Data</code> pointer would be. The <code>_DataBox</code> type is an internal class type which holds a reference to the actual storage of the data. This is the key to both class clusters and copy-on-write behavior. The implementation of the storage is abstracted from the <code>struct Data</code> itself, and therefore from users of <code>struct Data</code>.</p>\n\n<p>The <code>struct Data</code> may be initialized with any <code>NSData</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">/// Create Data with a custom backing reference type.</span>\n<span class="pl-k">class</span> MyData <span class="pl-k">:</span> NSData { }\n\n<span class="pl-k">let</span> dataReference <span class="pl-k">=</span> MyData()\n<span class="pl-k">let</span> dataValue <span class="pl-k">=</span> dataReference <span class="pl-k">as</span> Data\n<span class="pl-c">// dataValue copies dataReference </span></pre></div>\n\n<p>This allows anyone to create their own kind of <code>Data</code> without exposing the implementation details or even existence of that new type. Just like in Objective-C, when we store a reference type we must call <code>copy()</code>. If the reference type is immutable then this copy will be cheap (calling <code>retain</code>).</p>\n\n<p>In the most common case where a developer does not provide a custom reference type, then the backing store is our existing <code>NSData</code> and <code>NSMutableData</code> implementations. This consolidates logic into one place and provides cheap bridging in many cases (see <em>Bridging</em> for more information).</p>\n\n<p>Over time, <code>struct Data</code> may choose to move some of the logic from the Objective-C implementation into Swift to provide bridge-free behavior. This is mostly predicated on our ability to ship Swift framework code. We want to maintain as much capability to add new functionality and fix bugs as possible, without requiring apps to update. This means that most logic should be in the dynamic library instead of the embedded standard library.</p>\n\n<h4>\n<a id="user-content-customization-example" class="anchor" href="#customization-example" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Customization Example</h4>\n\n<p>Here is a simple <code>Data</code> that holds bytes initialized to <code>0x01</code> instead of <code>0</code>, and lazily creates backing storage when required.</p>\n\n<p>It can customize the default superclass implementation in <code>NSData</code>. For example, it can provide a more efficient implementation of <code>getBytes(_:length:)</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">class</span> AllOnesData <span class="pl-k">:</span> NSMutableData {\n    <span class="pl-k">var</span> _pointer <span class="pl-k">:</span> <span class="pl-c1">UnsafeMutableBufferPointer</span><span class="pl-k">&lt;</span><span class="pl-c1">Void</span><span class="pl-k">&gt;</span>?\n    <span class="pl-k">override</span> <span class="pl-k">func</span> <span class="pl-en">getBytes</span>(buffer: <span class="pl-c1">UnsafeMutablePointer</span><span class="pl-k">&lt;</span><span class="pl-c1">Void</span><span class="pl-k">&gt;</span>, length: <span class="pl-c1">Int</span>) {\n        <span class="pl-k">if</span> <span class="pl-k">let</span> d <span class="pl-k">=</span> _pointer {\n            <span class="pl-c">// Get the real data from the buffer</span>\n            memmove(buffer, d<span class="pl-k">.</span><span class="pl-c1">baseAddress</span>, length)\n        } <span class="pl-k">else</span> {\n            <span class="pl-c">// A more efficient implementation of getBytes in the case where no one has asked for our backing bytes</span>\n            memset(buffer, <span class="pl-c1">1</span>, length)\n        }\n    }\n    <span class="pl-c">// ... Other implementations</span>\n}</pre></div>\n\n<p>To test the abstraction, here is a simple function which treats all <code>Data</code> equally:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">func</span> <span class="pl-en">printFirstByte</span>(<span class="pl-en">of</span> <span class="pl-smi">data</span> <span class="pl-k">:</span> Data) {\n    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>It's <span class="pl-pse">\\(</span><span class="pl-s1"><span class="pl-c1">UnsafePointer</span><span class="pl-k">&lt;</span><span class="pl-c1">UInt8</span><span class="pl-k">&gt;</span>(data.bytes)<span class="pl-k">.</span>pointee</span><span class="pl-pse">)</span><span class="pl-pds">"</span></span>)\n}</pre></div>\n\n<p>And here is how a developer would use it:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Create a custom Data type and pass it to the same function</span>\n<span class="pl-k">let</span> allOnesData <span class="pl-k">=</span> AllOnesData(length: <span class="pl-c1">5</span>) <span class="pl-k">as</span> Data\nprintFirstByte(of: allOnesData) <span class="pl-c">// It's 1</span></pre></div>\n\n<p>The abstraction of our custom <code>AllOnesData</code> class from all API that deals with <code>Data</code> demonstrates the key feature of Foundation's class cluster types.</p>\n\n<h3>\n<a id="user-content-performance" class="anchor" href="#performance" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Performance</h3>\n\n<p>It is important to maintain a high bar for performance while making this transition.</p>\n\n<blockquote>\n<p>Note: The final design of the resilience feature for Swift will have an impact on these numbers.</p>\n</blockquote>\n\n<h4>\n<a id="user-content-memory" class="anchor" href="#memory" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Memory</h4>\n\n<p>Using Swift structures for our smallest types can be as effective as using tagged pointers in Objective-C.</p>\n\n<p>For example, <code>struct Date</code> is the same size as an <code>NSDate</code> pointer:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">public</span> <span class="pl-k">struct</span> Date {\n    <span class="pl-c">// All methods, properties, etc. left out here, but they make no difference to the size of each Date instance</span>\n    <span class="pl-k">private</span> <span class="pl-k">var</span> _time <span class="pl-k">:</span> NSTimeInterval\n}</pre></div>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Date is <span class="pl-pse">\\(</span><span class="pl-s1"><span class="pl-c1">sizeof</span>(Date)</span><span class="pl-pse">)</span> bytes<span class="pl-pds">"</span></span>) <span class="pl-c">// Date is 8 bytes</span>\n<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>NSDate is <span class="pl-pse">\\(</span><span class="pl-s1"><span class="pl-c1">sizeof</span>(NSDate)</span><span class="pl-pse">)</span> bytes<span class="pl-pds">"</span></span>) <span class="pl-c">// NSDate is 8 bytes</span></pre></div>\n\n<p>For larger struct types, implementation is based on a copy-on-write mechanism. This means the structure itself is still just one word. For Foundation reference types which are always immutable, the structure holds the reference directly [^evenmoreimpldetails]:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">public</span> <span class="pl-k">struct</span> URL {\n    <span class="pl-k">private</span> <span class="pl-k">var</span> _url <span class="pl-k">:</span> NSURL\n\n    <span class="pl-c">// Methods go here</span>\n}</pre></div>\n\n<p>[^evenmoreimpldetails]: In some cases, we may choose to use some of Swift's unmanaged ref count features to reduce the overhead of calling retain/release.</p>\n\n<p>As long as the struct is not mutated, instances share the same pointer to <code>_url</code>. When the struct is mutated, then the ivar is assigned to a new instance:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">mutating</span> <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">appendPathComponent</span>(pathComponent: <span class="pl-c1">String</span>) {\n    _url <span class="pl-k">=</span> _url<span class="pl-k">.</span>URLByAppendingPathComponent(pathComponent)\n}</pre></div>\n\n<p>For types which support mutation (e.g. <code>Data</code>), a <em>box</em> is used to hold a pointer to the reference. A Swift standard library function is used to check reference counts, allowing us to skip a copy when it is not necessary:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Simplified; assume _box holds a NSMutableData</span>\n<span class="pl-k">public</span> <span class="pl-k">mutating</span> <span class="pl-k">func</span> <span class="pl-en">appendBytes</span>(bytes: <span class="pl-c1">UnsafePointer</span><span class="pl-k">&lt;</span><span class="pl-c1">UInt8</span><span class="pl-k">&gt;</span>, count: <span class="pl-c1">Int</span>) {\n    <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isUniquelyReferencedNonObjC</span>(<span class="pl-k">&amp;</span>_box) {\n        <span class="pl-c">// Make a mutable copy first with original bytes and length</span>\n        <span class="pl-k">let</span> copy <span class="pl-k">=</span> _box<span class="pl-k">.</span>reference<span class="pl-k">.</span>mutableCopy() <span class="pl-k">as!</span> NSMutableData\n        copy<span class="pl-k">.</span>appendBytes(bytes, length: count)\n        _box <span class="pl-k">=</span> _DataBox(copy)\n    } <span class="pl-k">else</span> {\n        _box<span class="pl-k">.</span>reference<span class="pl-k">.</span>appendBytes(bytes, length: count)\n    }\n}</pre></div>\n\n<p>This provides about the same memory usage as a class in Objective-C, because these structures are a single pointer. However, there is an additional pointer dereference required to get the reference type pointer.</p>\n\n<h4>\n<a id="user-content-cpu" class="anchor" href="#cpu" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>CPU</h4>\n\n<p>When the Swift compiler has knowledge about the layout of the structure, it can sometimes make optimizations that are otherwise unavailable.</p>\n\n<p>There are two cases we should consider here:</p>\n\n<ol>\n<li>Extremely small value types like <code>Date</code> (1 pointer size).</li>\n<li>Larger value types like <code>URL</code>. These are actually also 1 pointer size, because they would be implemented with copy-on-write, and therefore share storage unless mutated. This is the same approach as we use in Objective-C and therefore the performance characteristics are approximately equal.</li>\n</ol>\n<h5>\n<a id="user-content-access-to-member-data" class="anchor" href="#access-to-member-data" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Access to Member Data</h5>\n\n<p>In microbenchmarks designed to test access time for <code>Date.timeIntervalSinceReferenceDate</code>, the Swift struct consistently performed about 15% faster. Although the <code>NSDate</code> was tagged, the overhead of calling through <code>objc_msgSend</code> was enough to make a difference versus more direct access.</p>\n\n<h5>\n<a id="user-content-mutation" class="anchor" href="#mutation" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Mutation</h5>\n\n<p>In microbenchmarks designed to test mutation for a new <code>Date.addTimeInterval</code> versus creating new <code>NSDate</code> objects with <code>dateByAddingTimeInterval</code>, the mutation approach was consistently about 40 times faster. The Objective-C code becomes slow when falling off the tagged pointer path which results in significant overhead from calling into <code>malloc</code> and <code>free</code>.</p>\n\n<h5>\n<a id="user-content-passing-to-function" class="anchor" href="#passing-to-function" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Passing to Function</h5>\n\n<p>In microbenchmarks designed to test performance of passing the struct to a function versus passing the <code>NSDate</code> reference to a function, the Swift struct consistently performed about twice as fast. Part of the reason for the additional overhead is that the Swift compiler knows it can omit calls to <code>retain</code> and <code>release</code> when working with a Swift structure.</p>\n\n<h3>\n<a id="user-content-bridging" class="anchor" href="#bridging" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Bridging</h3>\n\n<p>Swift has an existing mechanism to support bridging of Swift struct types to Objective-C reference types. It is used for <code>NSNumber</code>, <code>NSString</code>, <code>NSArray</code>, and more. Although it has some performance limitations (especially around eager copying of collection types), these new struct types will use the same functionality for two reasons:</p>\n\n<ol>\n<li>We do not have block important improvements to our API on the invention of a new bridging system.</li>\n<li>If and when the existing bridging system is improved, we will also be able to take advantage of those improvements.</li>\n</ol>\n<p>Bridged struct types adopt a compiler-defined protocol called <code>_ObjectiveCBridgeable</code>. This protocol defines methods that convert Swift to Objective-C and vice-versa [^objcbridge].</p>\n\n<p>[^objcbridge]: See also <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0058-objectivecbridgeable.md">SE-0058</a>. Although the public version of the feature has been deferred from Swift 3, we will still use the internal mechanism for now.</p>\n\n<h4>\n<a id="user-content-from-objective-c-to-swift" class="anchor" href="#from-objective-c-to-swift" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>From Objective-C to Swift</h4>\n\n<p>When a bridged object is returned from an Objective-C method to Swift, the compiler automatically inserts a call to a function in the protocol that performs whatever work is necessary to return the correct result.</p>\n\n<p>For a simple struct type like <code>Date</code>, we simply construct the right structure by getting the value out of the class:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">return</span> Date(timeIntervalSinceReferenceDate: input<span class="pl-k">.</span>timeIntervalSinceReferenceDate)</pre></div>\n\n<p>For the more complex types, both bridging and casting (<code>myReference as Struct</code>) use a private initializers for the value types that accept references. This creates a new struct with the Objective-C pointer:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Simplified</span>\n<span class="pl-k">public</span> <span class="pl-k">struct</span> Data {\n    <span class="pl-c">// For use by bridging code only.</span>\n    <span class="pl-k">private</span> <span class="pl-k">init</span>(dataReference: NSData) {\n        <span class="pl-k">self</span><span class="pl-k">.</span>dataReference <span class="pl-k">=</span> dataReference<span class="pl-k">.</span>copy()\n    }\n}</pre></div>\n\n<p>Just as in Objective-C, when we store a value type we must call copy to protect ourselves from mutation to that reference after the initializer returns.</p>\n\n<p>In almost all API in the SDK, the returned value type is immutable. In these cases, the <code>copy</code> is simply a <code>retain</code> and this operation is cheap. If the returned type is mutable, then we must pay the full cost of the copy.</p>\n\n<h4>\n<a id="user-content-from-swift-to-objective-c" class="anchor" href="#from-swift-to-objective-c" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>From Swift to Objective-C</h4>\n\n<p>For simple struct types like <code>Date</code>, we will create a new <code>NSDate</code> when the value is bridged.</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">return</span> NSDate(timeIntervalSinceReferenceDate: _time)</pre></div>\n\n<p>For reference-holding types like <code>Data</code>, we simply pass our interior <code>NSData</code> pointer back to Objective-C. The underlying data is not copied at bridging time. If the receiver of that data wishes to store it, then they should call <code>copy</code> as usual. In some cases, we can use a technique employed by other bridge types to actually share a reference count between Swift and Objective-C, therefore preserving the value semantics of the type on the Swift side if the Objective-C code retains the reference.</p>\n\n<h4>\n<a id="user-content-archiving" class="anchor" href="#archiving" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Archiving</h4>\n\n<p>Encoding any of the new value types is possible by bridging them to their corresponding reference type and using all of the usual <code>NSCoding</code> mechanisms. An improved archiving system for Swift is a future goal and out of scope for this proposal.</p>\n\n<h4>\n<a id="user-content-copying" class="anchor" href="#copying" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Copying</h4>\n\n<p>In Swift, there is no need to conform to the <code>NSCopying</code> protocol. Copies are made by the implementation automatically and on-demand via a copy-on-write implementation.</p>\n\n<p>When a Swift value type is sent to Objective-C, then it is converted into the corresponding reference type (see <em>Bridging</em> above). In this case, the receiver may want to perform a <code>copy</code> in order to isolate itself from mutations that may happen to the object after the method call returns. This is the same as what is required in frameworks today.</p>\n\n<p>If a custom subclass of a reference type is used, then that subclass must implement <code>copyWithZone</code> as per the usual rules. The struct type will call <code>copy</code> and <code>mutableCopy</code> on it when it determines it needs to copy.</p>\n\n<h3>\n<a id="user-content-existing-objective-c-api-that-uses-reference-types" class="anchor" href="#existing-objective-c-api-that-uses-reference-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Existing Objective-C API that uses Reference Types</h3>\n\n<p>In the vast majority of cases, reference type API will appear as the bridged type.</p>\n\n<p>However, if a reference type is used as a pointer-to-pointer (e.g., <code>NSData **</code>) then it will appear in Swift API as a reference type (<code>AutoreleasingUnsafeMutablePointer&lt;NSData&gt;</code>). These cases are rare in our SDK for the proposed Foundation value types.</p>\n\n<h3>\n<a id="user-content-binary-compatibility" class="anchor" href="#binary-compatibility" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Binary Compatibility</h3>\n\n<p>The Swift team is developing an extensive proposal for binary compatibility. Details are are in the <a href="https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst">LibraryEvolution.rst</a> document. The current draft allows the following modifications for struct types in future versions of Foundation:</p>\n\n<blockquote>\n<p>Swift structs are a little more flexible than their C counterparts. By default, the following changes are permitted:</p>\n\n<ul>\n<li>Reordering any existing members, including stored properties.</li>\n<li>Adding any new members, including stored properties.</li>\n<li>Changing existing properties from stored to computed or vice versa.</li>\n<li>Changing the body of any methods, initializers, or accessors.</li>\n<li>Adding or removing an observing accessor (willSet or didSet) to/from an existing property. This is effectively the same as modifying the body of a setter.</li>\n<li>Removing any non-public, non-versioned members, including stored properties.</li>\n<li>Adding a new protocol conformance (with proper availability annotations).</li>\n<li>Removing conformances to non-public protocols.</li>\n</ul>\n</blockquote>\n\n<h2>\n<a id="user-content-impact-on-existing-code" class="anchor" href="#impact-on-existing-code" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Impact on existing code</h2>\n\n<p>There is no impact on existing Objective-C clients, either for source or binary compatibility.</p>\n\n<p>The impact on existing Swift code will be much higher:</p>\n\n<ul>\n<li>Existing Swift code that uses the reference types will be calling SDK code that uses value types</li>\n<li>We do not propose to automatically migrate uses of <code>NSData</code> to the new API vended by <code>Data</code>. The migrator will do the minimum amount of change possible. This will prevent new or changed behavior from surprising developers (for example, the more important distinction of <code>let</code> vs <code>var</code> for these types).</li>\n<li>Existing Swift subclasses of the reference types will remain as-is.</li>\n<li>Developers will be required to manually switch to the new API, if they choose to do so. In some cases, this may be more than a simple renaming of a method. They may choose to take advantage of the new, meaningful difference between <code>let</code> and <code>var</code>.</li>\n</ul>\n<h2>\n<a id="user-content-potential-future-directions" class="anchor" href="#potential-future-directions" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Potential Future Directions</h2>\n\n<p>This proposal uses the existing <code>NS</code> classes as the customization point for the value types which store a reference. A future proposal could introduce a new Swift protocol, removing the requirement to subclass. This would be a great way to express the requirements of Foundation's class clusters. Implementing this approach would require quite a bit of new code to provide default implementations, which is why we defer it from this proposal.</p>\n\n<h2>\n<a id="user-content-alternatives-considered" class="anchor" href="#alternatives-considered" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Alternatives considered</h2>\n\n<h3>\n<a id="user-content-do-nothing" class="anchor" href="#do-nothing" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Do Nothing</h3>\n\n<p>We know from our experience with Swift so far that if we do not provide these value types then others will, often by wrapping our types. It would be better if we provide one canonical API for greater consistency across all Swift code. This is, after all, the purpose of the Foundation framework.</p>\n\n<p>Here are some of the most popular Swift projects on GitHub. For comparison purposes, at the time of writing, Foundation itself has 1,500+ stars on GitHub.</p>\n\n<ul>\n<li>\n<a href="https://github.com/Alamofire/Alamofire">Alamofire</a> - A networking library, 14,000+ stars on GitHub\n\n<ul>\n<li>4 struct types, including a key <code>Response</code> type</li>\n</ul>\n</li>\n<li>\n<a href="https://github.com/Carthage/Carthage">Carthage</a> - A package manager, 5,800+ stars on GitHub\n\n<ul>\n<li>35 struct types, including command pattern objects, URLs, modules and submodules, errors, build arguments, build settings</li>\n</ul>\n</li>\n<li>\n<a href="https://github.com/PerfectlySoft/Perfect">Perfect</a> - A server-side app library, 5,000+ stars on GitHub\n\n<ul>\n<li>6 struct types, including configuration types, database queries, route map and socket types</li>\n</ul>\n</li>\n<li>\n<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> - Reactive programming library, 2,900+ stars on GitHub\n\n<ul>\n<li>14 struct types, including logging, events, observers, and a <code>Bag</code> collection type</li>\n</ul>\n</li>\n</ul>\n<h3>\n<a id="user-content-hide-reference-types-completely" class="anchor" href="#hide-reference-types-completely" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Hide Reference Types Completely</h3>\n\n<p>This was our first approach, but it has several downsides:</p>\n\n<ul>\n<li>A tremendous amount of risk, because there is no fallback if we miss an API or if we do not consider an esoteric use case.</li>\n<li>Requires more boilerplate in the overlay (introduction of a protocol, dummy subclass which calls through to Swift code, etc.), which introduces more opportunity for error.</li>\n<li>Considered to be extremely difficult to implement for the migrator. This means that most Swift code would have to be manually fixed up.</li>\n<li>If implementing the <code>struct</code> types requires changes to the frameworks that ship on the OS, we may be in a very difficult situation as the overlay has to run as far back as OS X 10.9 and iOS 7.</li>\n</ul>\n<h3>\n<a id="user-content-change-the-name-of-the-reference-types" class="anchor" href="#change-the-name-of-the-reference-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Change the Name of the Reference Types</h3>\n\n<p>We considered changing the name of the reference types (e.g., <code>NSData</code> to <code>DataReference</code>), but decided to simply leave the NS prefix in place. This allows for a more natural transition to the value type without causing a lot of churn on existing code. It also avoids introducing a new name. We will have to document carefully what the difference is between the reference type and the value type, so developers can become familiar with our convention.</p>\n\n<h3>\n<a id="user-content-other-potential-foundation-value-types" class="anchor" href="#other-potential-foundation-value-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Other Potential Foundation Value Types</h3>\n\n<p>Several criteria were used to develop the list of proposed value types:</p>\n\n<ol>\n<li>The type must not rely upon object identity.</li>\n<li>The reference type most likely already implements <code>NSCopying</code> and <code>NSCoding</code>.</li>\n<li>The most interesting value types can provide new mutable API. If there are no mutations possible, it may still make sense as a value type but it is lower priority.</li>\n</ol>\n<p>The following classes were considered and rejected or deferred for the described reasons:</p>\n\n<ul>\n<li>\n<code>Locale</code>: This class has API for an automatically updating current locale. It would be surprising for a <code>let</code> value to change based on user preferences. It may be reconsidered in the future.</li>\n<li>\n<code>Progress</code>: Progress objects are meant to be mutated, so the idea of a constant one (with <code>let</code>) does not make much sense. Additionally, <code>NSProgress</code> has object identity via the concept of <code>becomeCurrent</code> and <code>resignCurrent</code>.</li>\n<li>\n<code>Operation</code>: This class is designed to be subclassed and overridden to provide customized behavior.</li>\n<li>\n<code>Calendar</code>: This class has API for an automatically updating current calendar. It may be reconsidered in the future.</li>\n<li>\n<code>Port</code>: This class has a delegate, which would make for confusing value semantics as delegates require identity for their callbacks to make sense.</li>\n<li>\n<code>Number</code> and <code>Value</code>: These are already partially bridged. Some improvements could be made but we wish to consider them separately from this proposal.</li>\n<li>\n<code>Predicate</code>: We will consider this type in a future proposal.</li>\n<li>\n<code>OrderedSet</code>, <code>CountedSet</code>: We will consider these types in a future proposal.</li>\n<li>\n<code>NSError</code>: NSError is already partially bridged to the Swift <code>ErrorProtocol</code> type, which makes introducing a concrete value type difficult. We will consider improvements in this area in a future proposal.</li>\n<li>\n<code>NSAttributedString</code>: This is an obvious candidate for a value type. However, we want to take more time to get this one right, since it is the fundamental class for the entire text system. We will address it in a future proposal.</li>\n<li>\n<code>NSURLSession</code> and related networking types: We will consider these types in a future proposal.</li>\n</ul>	One of the core principles of Swift is "mutability when you need it." This is espoused by Apple's official documentation about Swift: This concept is so important that it is literally the second thing taught in The Swift Programming Language, right after : Use  to make a constant and  to make a variable. The value of a constant doesn't need to be known at compile time, but you must assign it a value exactly once. Excerpt From: Apple Inc. "The Swift Programming Language (Swift 2.1)." When certain Foundation types are imported into Swift, they do not fully take advantage of the features that Swift has to offer developers for controlling mutability of their objects. This proposal describes a straightforward concept for providing this capability. It describes a set of new Foundation value types which wrap their corresponding reference types. This is a technique used by the standard library. T	\N	2016-04-23 09:10:39.565127	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c,d15947e9-3b46-4472-a0cb-dea1a222954c,00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75}	\N	0
6383a5ae-d1ac-4dfc-ac55-444a8a805946	3	0	This Xcode plugin shows Xcode app version in the Dock and App Switcher icon	https://github.com/dvkch/SYXcodeIconVersion	this-xcode-plugin-shows-xcode-app-version-in-the-dock-and-app-switcher-icon	{}	GitHub - dvkch/SYXcodeIconVersion: This Xcode plugin shows Xcode app version in the Dock and App Switcher icon	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	1	32475	2016-04-23 09:01:23.10252	2016-04-23 09:01:23.606195	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"SYXcodeIconVersion - This Xcode plugin shows Xcode app version in the Dock and App Switcher icon","title":"dvkch/SYXcodeIconVersion","url":"https://github.com/dvkch/SYXcodeIconVersion","site_name":"GitHub","type":"object","image":"https://avatars3.githubusercontent.com/u/1838148?v=3\\u0026s=400"}	<h1>\n<a id="user-content-xcode-icon-version" class="anchor" href="#xcode-icon-version" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Xcode Icon Version</h1>\n\n<p>Tired of this Xcode icon always showing multiple times in your App Switch with no help watshoever as to which version you are currently using? Well, no more !</p>\n\n<h1>\n<a id="user-content-how-does-it-look" class="anchor" href="#how-does-it-look" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How does it look?</h1>\n\n<p>Here is the app switcher with four different versions of Xcode running</p>\n\n<p><a href="https://raw.githubusercontent.com/dvkch/SYXcodeIconVersion/master/image_appswitcher.png" target="_blank"><img src="https://raw.githubusercontent.com/dvkch/SYXcodeIconVersion/master/image_appswitcher.png" alt="Screenshot" style="max-width:100%;"></a></p>\n\n<p>And here is your Dock</p>\n\n<p><a href="https://raw.githubusercontent.com/dvkch/SYXcodeIconVersion/master/image_dock.png" target="_blank"><img src="https://raw.githubusercontent.com/dvkch/SYXcodeIconVersion/master/image_dock.png" alt="Screenshot" style="max-width:100%;"></a></p>\n\n<h1>\n<a id="user-content-how-can-i-get-it" class="anchor" href="#how-can-i-get-it" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How can I get it?</h1>\n\n<p>It can either be done via <a href="http://alcatraz.io/">Alcatraz</a> or by downloading the <a href="/dvkch/SYXcodeIconVersion/blob/master/github.com/dvkch/SYXcodeIconVersion">GitHub project</a> and building <code>SYXcodeIconVersion.xcodeproj</code> in Xcode, which will automagically install the plugin.</p>\n\n<h1>\n<a id="user-content-license" class="anchor" href="#license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>License</h1>\n\n<p>Use it as you like, don't blame me if your Macbook never restarts, and share with your friends,</p>\n\n<p>-- dvkch</p>\n	Tired of this Xcode icon always showing multiple times in your App Switch with no help watshoever as to which version you are currently using? Well, no more ! Here is the app switcher with four different versions of Xcode running And here is your Dock It can either be done via Alcatraz or by downloading the GitHub project and building  in Xcode, which will automagically install the plugin. Use it as you like, don't blame me if your Macbook never restarts, and share with your friends,	\N	2016-04-23 09:01:22.982799	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	https://raw.githubusercontent.com/dvkch/SYXcodeIconVersion/master/image_appswitcher.png	0
5f042c61-5d50-4243-8f82-3ed7463328e8	6	0	Default reflection	http://ericasadun.com/2016/04/18/default-reflection/	default-reflection	{"version":"1.0","provider_name":"Erica Sadun","provider_url":"http://ericasadun.com","author_name":"erica","author_url":"http://ericasadun.com/author/admin/","title":"Default reflection","type":"rich","width":600,"height":338,"html":"\\u003cblockquote class=\\"wp-embedded-content\\"\\u003e\\u003ca href=\\"http://ericasadun.com/2016/04/18/default-reflection/\\"\\u003eDefault reflection\\u003c/a\\u003e\\u003c/blockquote\\u003e\\n\\u003cscript type='text/javascript'\\u003e\\n\\u003c!--//--\\u003e\\u003c![CDATA[//\\u003e\\u003c!--\\n\\t\\t!function(a,b){\\"use strict\\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\\"MSIE 10\\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\\\./),i=b.querySelectorAll(\\"iframe.wp-embedded-content\\"),j=b.querySelectorAll(\\"blockquote.wp-embedded-content\\");for(c=0;c\\u003cj.length;c++)j[c].style.display=\\"none\\";for(c=0;c\\u003ci.length;c++)if(d=i[c],d.style.display=\\"\\",!d.getAttribute(\\"data-secret\\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\\"#?secret=\\"+f,d.setAttribute(\\"data-secret\\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\\"security\\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\\"'+d.secret+'\\"]'),k=b.querySelectorAll('blockquote[data-secret=\\"'+d.secret+'\\"]');for(e=0;e\\u003ck.length;e++)k[e].style.display=\\"none\\";for(e=0;e\\u003cj.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display=\\"\\",\\"height\\"===d.message){if(g=parseInt(d.value,10),g\\u003e1e3)g=1e3;else if(200\\u003e~~g)g=200;f.height=g}if(\\"link\\"===d.message)if(h=b.createElement(\\"a\\"),i=b.createElement(\\"a\\"),h.href=f.getAttribute(\\"src\\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\\"message\\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\\"DOMContentLoaded\\",c,!1),a.addEventListener(\\"load\\",c,!1)}(window,document);\\n//--\\u003e\\u003c!]]\\u003e\\n\\u003c/script\\u003e\\u003ciframe sandbox=\\"allow-scripts\\" security=\\"restricted\\" src=\\"http://ericasadun.com/2016/04/18/default-reflection/embed/\\" width=\\"600\\" height=\\"338\\" title=\\"Embedded WordPress Post\\" frameborder=\\"0\\" marginwidth=\\"0\\" marginheight=\\"0\\" scrolling=\\"no\\" class=\\"wp-embedded-content\\"\\u003e\\u003c/iframe\\u003e"}	Default reflection — Erica Sadun	[]	ericasadun.com	1	32475	2016-04-23 09:18:07.433348	2016-04-23 09:18:08.573814	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Have you ever noticed how useless Swift’s class representations are? Value types automatically  show their members and values but classes don’t. What if you could add a simple way to au…","title":"Default reflection","url":"http://ericasadun.com/2016/04/18/default-reflection/","site_name":"Erica Sadun","type":"article","image":"http://ericasadun.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-18-at-12.55.01-PM.png"}			\N	2016-04-23 09:18:07.4296	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
a944f400-d2ba-4111-abff-414045e89271	7	0	Push Notification in practice in Swift	http://www.fantageek.com/blog/2016/04/15/push-notification-in-practice/	push-notification-in-practice-in-swift	{}	Push Notification in practice | Fantageek	[{"type":"icon","href":"/img/jacman.jpg","sizes":null,"width":null,"height":null},{"type":"icon","href":"/img/jacman.jpg","sizes":null,"width":null,"height":null}]	fantageek.com	1	32475	2016-04-23 09:18:37.434527	2016-04-23 09:18:37.476141	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Here are my notes for working with Push Notification, updated for iOS 9\\nHow to register\\nRegister to receive push notification\\n\\nregisterForRemoteNotificationTypes is deprecated in iOS 8+\\n1UIApplication","title":"Push Notification in practice","url":"http://www.fantageek.com/blog/2016/04/15/push-notification-in-practice/index.html","site_name":"Fantageek","type":"article","image":null}	\n\t\t\n\t\t<div id="toc" class="toc-article">\n\t\t\t<strong class="toc-title">Contents</strong>\n\t\t\n\t\t\t<ol class="toc">\n<li class="toc-item toc-level-2"><a class="toc-link" href="#How-to-register"><span class="toc-number">1.</span> <span class="toc-text">How to register</span></a></li>\n<li class="toc-item toc-level-2"><a class="toc-link" href="#When-to-register"><span class="toc-number">2.</span> <span class="toc-text">When to register</span></a></li>\n<li class="toc-item toc-level-2"><a class="toc-link" href="#didReceiveRemoteNotification"><span class="toc-number">3.</span> <span class="toc-text">didReceiveRemoteNotification</span></a></li>\n<li class="toc-item toc-level-2">\n<a class="toc-link" href="#How-to-handle"><span class="toc-number">4.</span> <span class="toc-text">How to handle</span></a><ol class="toc-child">\n<li class="toc-item toc-level-4"><a class="toc-link" href="#Case-1-Foreground"><span class="toc-number">4.0.1.</span> <span class="toc-text">Case 1: Foreground</span></a></li>\n<li class="toc-item toc-level-4"><a class="toc-link" href="#Case-2-Background"><span class="toc-number">4.0.2.</span> <span class="toc-text">Case 2: Background</span></a></li>\n<li class="toc-item toc-level-4"><a class="toc-link" href="#Case-3-Terminated"><span class="toc-number">4.0.3.</span> <span class="toc-text">Case 3: Terminated</span></a></li>\n</ol>\n</li>\n</ol>\n<li class="toc-item toc-level-2"><a class="toc-link" href="#System-alert"><span class="toc-number">5.</span> <span class="toc-text">System alert</span></a></li>\n<li class="toc-item toc-level-2"><a class="toc-link" href="#Silent-push-payload"><span class="toc-number">6.</span> <span class="toc-text">Silent push payload</span></a></li>\n<li class="toc-item toc-level-2"><a class="toc-link" href="#Reference"><span class="toc-number">7.</span> <span class="toc-text">Reference</span></a></li>\n\t\t\n\t\t</div>\n\t\t\n\t\t<p>Here are my notes for working with Push Notification, updated for iOS 9</p>\n<h2 id="How-to-register">\n<a href="#How-to-register" class="headerlink" title="How to register"></a>How to register</h2>\n<ul>\n<li>Register to receive push notification</li>\n</ul>\n<p><code>registerForRemoteNotificationTypes</code> is deprecated in iOS 8+</p>\n<figure class="highlight swift"><table><tr>\n<td class="gutter"><pre><span class="line">1</span><br></pre></td>\n<td class="code"><pre><span class="line"><span class="type">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</span><br></pre></td>\n</tr></table></figure><ul>\n<li>Register to alert user through UI</li>\n</ul>\n<blockquote>\n<p>If your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways</p>\n</blockquote>\n<figure class="highlight swift"><table><tr>\n<td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td>\n<td class="code"><pre><span class="line"><span class="keyword">let</span> types: <span class="type">UIUserNotificationType</span> = [.<span class="type">Badge</span>, .<span class="type">Sound</span>, .<span class="type">Alert</span>]</span><br><span class="line"><span class="keyword">let</span> categories = <span class="type">Set</span>&lt;<span class="type">UIUserNotificationCategory</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> settings = <span class="type">UIUserNotificationSettings</span>(forTypes: types, categories: categories)</span><br><span class="line"></span><br><span class="line"><span class="type">UIApplication</span>.sharedApplication().registerUserNotificationSettings(settings)</span><br></pre></td>\n</tr></table></figure><p>You don't need to wait for <code>registerUserNotificationSettings</code> to callback before calling <code>registerForRemoteNotifications</code></p>\n<h2 id="When-to-register">\n<a href="#When-to-register" class="headerlink" title="When to register"></a>When to register</h2>\n<ul>\n<li><a href="https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html" target="_blank" rel="external">Registering, Scheduling, and Handling User Notifications</a></li>\n</ul>\n<blockquote>\n<p>Never cache a device token; always get the token from the system whenever you need it. If your app previously registered for remote notifications, calling the registerForRemoteNotifications method again does not incur any additional overhead, and iOS returns the existing device token to your app delegate immediately. In addition, iOS calls your delegate method any time the device token changes, not just in response to your app registering or re-registering</p>\n<p>The user can change the notification settings for your app at any time using the Settings app. Because settings can change, always call the registerUserNotificationSettings: at launch time and use the application:didRegisterUserNotificationSettings: method to get the response. If the user disallows specific notification types, avoid using those types when configuring local and remote notifications for your app.</p>\n</blockquote>\n<h2 id="didReceiveRemoteNotification">\n<a href="#didReceiveRemoteNotification" class="headerlink" title="didReceiveRemoteNotification"></a>didReceiveRemoteNotification</h2>\n<p>About <code>application:didReceiveRemoteNotification:</code></p>\n<blockquote>\n<p>Implement the application:didReceiveRemoteNotification:fetchCompletionHandler: method instead of this one whenever possible. If your delegate implements both methods, the app object calls the application:didReceiveRemoteNotification:fetchCompletionHandler: method.</p>\n<p>If the app is not running when a remote notification arrives, the method launches the app and provides the appropriate information in the launch options dictionary. The app does not call this method to handle that remote notification. Instead, your implementation of the application:willFinishLaunchingWithOptions: or application:didFinishLaunchingWithOptions: method needs to get the remote notification payload data and respond appropriately.</p>\n</blockquote>\n<p>About <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code></p>\n<p>This is for silent push notification with <code>content-available</code></p>\n<blockquote>\n<p>Unlike the application:didReceiveRemoteNotification: method, which is called only when your app is running in the foreground, the system calls this method when your app is running in the foreground or background</p>\n<p>In addition, if you enabled the remote notifications background mode, the system launches your app (or wakes it from the suspended state) and puts it in the background state when a push notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again.</p>\n<p>If the user opens your app from the system-displayed alert, the system may call this method again when your app is about to enter the foreground so that you can update your user interface and display information pertaining to the notification.</p>\n</blockquote>\n<h2 id="How-to-handle">\n<a href="#How-to-handle" class="headerlink" title="How to handle"></a>How to handle</h2>\n<p>Usually, the use of push notification is to display a specific article, a specific DetailViewController, ... in your app. So the good practices are</p>\n<ul>\n<li>When the app is in foreground: Gently display some kind of alert view and ask the user whether he would like to go to that specific page or not</li>\n<li>When user is brought from background to foreground, or from terminated to foreground: Just navigate to that specific page. For example, if you use UINavigationController, you can set that specific page the top most ViewController, if you use UITabBarController, you can set that specific page the selected tab, something like that</li>\n</ul>\n<figure class="highlight swift"><table><tr>\n<td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td>\n<td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">handlePushNotification</span><span class="params">(userInfo: NSDictionary)</span></span> {</span><br><span class="line">    <span class="comment">// Check applicationState</span></span><br><span class="line">\t<span class="keyword">if</span> (applicationState == <span class="type">UIApplicationStateActive</span>) {</span><br><span class="line">        <span class="comment">// Application is running in foreground</span></span><br><span class="line">        showAlertForPushNotification(userInfo)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (applicationState == <span class="type">UIApplicationStateBackground</span> || applicationState == <span class="type">UIApplicationStateInactive</span>) {</span><br><span class="line">    <span class="comment">// Application is brought from background or launched after terminated</span></span><br><span class="line">        handlePushNotification(userInfo)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td>\n</tr></table></figure><p>Here we create another method `handlePushNotification:`` to handle push notification. When you receive push notification, 3 cases can occur</p>\n<h4 id="Case-1-Foreground">\n<a href="#Case-1-Foreground" class="headerlink" title="Case 1: Foreground"></a>Case 1: Foreground</h4>\n<p>Loud push</p>\n<ul>\n<li>No system alert</li>\n<li>\n<code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n</ul>\n<p>Silent push</p>\n<ul>\n<li>No system alert</li>\n<li>\n<code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n</ul>\n<h4 id="Case-2-Background">\n<a href="#Case-2-Background" class="headerlink" title="Case 2: Background"></a>Case 2: Background</h4>\n<p>Loud push</p>\n<ul>\n<li>System alert</li>\n<li>No method called</li>\n<li>Tap notification and <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n<li>Tap on App Icon and nothing is called</li>\n</ul>\n<p>Silent push</p>\n<ul>\n<li>System alert</li>\n<li>\n<code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called. If app is suspended, its state changed to <code>UIApplicationStateBackground</code>\n</li>\n<li>Tap notification and <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n<li>Tap on App Icon and nothing is called</li>\n</ul>\n<h4 id="Case-3-Terminated">\n<a href="#Case-3-Terminated" class="headerlink" title="Case 3: Terminated"></a>Case 3: Terminated</h4>\n<p>Loud push</p>\n<ul>\n<li>System alert</li>\n<li>No method called</li>\n<li>Tap notification and <code>application:didFinishLaunchingWithOptions:</code> with <code>launchOptions</code>,  <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n<li>Tap on App Icon and <code>application:didFinishLaunchingWithOptions:</code> is called with <code>launchOptions</code> set to nil</li>\n</ul>\n<p>Silent push</p>\n<ul>\n<li>System alert</li>\n<li>\n<code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called. If app was not killed by user, it is woke up and state changed to <code>UIApplicationStateInactive</code>.</li>\n<li>Tap notification and <code>application:didFinishLaunchingWithOptions:</code> with <code>launchOptions</code>,  <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li>\n<li>Tap on App Icon and <code>application:didFinishLaunchingWithOptions:</code> is called with <code>launchOptions</code> set to nil</li>\n</ul>\n<h2 id="System-alert">\n<a href="#System-alert" class="headerlink" title="System alert"></a>System alert</h2>\n<p>System alert only show if the payload contains "alert"</p>\n<figure class="highlight json"><table><tr>\n<td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td>\n<td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"aps"</span> : {</span><br><span class="line">        <span class="attr">"alert"</span> : {</span><br><span class="line">            <span class="attr">"title"</span> : <span class="string">"Game Request"</span>,</span><br><span class="line">            <span class="attr">"body"</span> : <span class="string">"Bob wants to play poker"</span>,</span><br><span class="line">            <span class="attr">"action-loc-key"</span> : <span class="string">"PLAY"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"badge"</span> : <span class="number">5</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"param1"</span> : <span class="string">"bar"</span>,</span><br><span class="line">    <span class="attr">"param2"</span> : [ <span class="string">"bang"</span>,  <span class="string">"whiz"</span> ]</span><br><span class="line">}</span><br></pre></td>\n</tr></table></figure><h2 id="Silent-push-payload">\n<a href="#Silent-push-payload" class="headerlink" title="Silent push payload"></a>Silent push payload</h2>\n<p>For now I see that silent push must contain "sound" for <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> to be called when app is in background</p>\n<figure class="highlight json"><table><tr>\n<td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td>\n<td class="code"><pre><span class="line">{</span><br><span class="line"> <span class="attr">"aps"</span>: {</span><br><span class="line">   <span class="attr">"content-available"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"alert"</span>: <span class="string">"hello"</span> // include this if we want to show alert</span><br><span class="line">   <span class="string">"sound"</span>: <span class="string">""</span> // this does the trick</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"param1"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"param2"</span>: <span class="string">"text"</span></span><br><span class="line">}</span><br></pre></td>\n</tr></table></figure><h2 id="Reference">\n<a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>\n<ul>\n<li><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html" target="_blank" rel="external">Scheduling, Registering, and Handling Notifications</a></li>\n<li><a href="http://www.abdus.me/ios-programming-tips/handle-push-notifications-when-arrived-ios/" target="_blank" rel="external">Handle push notifications when arrived in ios application</a></li>\n<li><a href="http://stackoverflow.com/questions/5099483/how-to-respond-to-push-notification-view-if-app-is-already-running-in-the-backgr" target="_blank" rel="external">How to respond to push notification view if app is already running in the background</a></li>\n<li><a href="http://stackoverflow.com/questions/5056689/didreceiveremotenotification-when-in-background" target="_blank" rel="external">didReceiveRemoteNotification when in background</a></li>\n<li><a href="http://samwize.com/2015/08/07/how-to-handle-remote-notification-with-background-mode-enabled/" target="_blank" rel="external">How to handle remote notification with background mode enabled</a></li>\n<li><a href="http://stackoverflow.com/questions/20569201/remote-notification-method-called-twice" target="_blank" rel="external">Remote notification method called twice</a></li>\n</ul>	Here are my notes for working with Push Notification, updated for iOS 9 is deprecated in iOS 8+ If your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways You don't need to wait for  to callback before calling Never cache a device token; always get the token from the system whenever you need it. If your app previously registered for remote notifications, calling the registerForRemoteNotifications method again does not incur any additional overhead, and iOS returns the existing device token to your app delegate immediately. In addition, iOS calls your delegate method any time the device token changes, not just in response to your app registering or re-registering The user can change the notification settings for your app at any time using the Settings app. Because settings can change	\N	2016-04-23 09:18:37.432574	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
2a795984-1b47-4dcf-882c-3facb1565ac6	8	0	A Swift Refactor — The Traveled iOS Developer’s Guide	https://medium.com/the-traveled-ios-developers-guide/a-swift-refactor-831e9a8f18a#.p2h1fh65m	a-swift-refactor-the-traveled-ios-developer-s-guide	{}	A Swift Refactor — The Traveled iOS Developer’s Guide — Medium	[{"type":"icon","href":"/apple-touch-icon-ipad-retina.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-iphone-retina.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-ipad.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null}]	medium.com	1	32475	2016-04-23 09:19:23.772092	2016-04-23 09:19:24.28649	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"PunGame = .Strong","title":"A Swift Refactor — The Traveled iOS Developer’s Guide","url":"https://medium.com/the-traveled-ios-developers-guide/a-swift-refactor-831e9a8f18a","site_name":"Medium","type":"article","image":"https://cdn-images-1.medium.com/max/1200/1*iCWoxoeB-ijojQDlMnSYJg.jpeg"}	<h3 name="3118" id="3118" class="graf--h3 graf-after--figure">A Swift Refactor</h3>\n<h4 name="0b46" id="0b46" class="graf--h4 graf-after--h3">PunGame =.Strong</h4>\n<p name="1bc5" id="1bc5" class="graf--p graf--hasDropCapModel graf--hasDropCap graf-after--h4"><span class="graf-dropCap">F</span>undamentals are key. Without them, you're left hedging your bets on a fragile foundation. I believe that's true for every craft and person, regardless the walk of life one hails from.</p>\n<p name="4fb5" id="4fb5" class="graf--p graf-after--p">But, the rub is this: fundamentals are inherently anything but--mastering them takes time, it's also difficult and it requires a deliberate and concerted effort from a human being. In programming, specifically in terms of Swift--it begins with understanding optionals, grasping collections and embracing Swift's design decisions.</p>\n<p name="8f3f" id="8f3f" class="graf--p graf-after--p">So today, we'll attempt to level up your Swift fundamentals game by refactoring a method using some Swift trickery. In short--we'll get cute.</p>\n<h4 name="a24e" id="a24e" class="graf--h4 graf-after--p">TheSetup.Init()</h4>\n<p name="079f" id="079f" class="graf--p graf-after--h4">Let's take a peek at the sample specimen. In our fictitious Swift scenario, there is a function that handles the end of a round of some kind of game.</p>\n<p name="8dc8" id="8dc8" class="graf--p graf-after--p">When the game concludes, some logic occurs to see if a user scored an "A+", 5 stars, gold ribbon or whatever else badge of merit you'd like to imagine that is ubiquitous with such mobile games.</p>\n<p name="e4e8" id="e4e8" class="graf--p graf-after--p">If that's the case, some logic runs with a print() for debugging purposes, and a mysterious function that nobody dares touch returns either a Struct instance or String to use as a "Congrats!" message that'll display three times.</p>\n<p name="38c2" id="38c2" class="graf--p graf-after--p">It's rife with some weirdness, the original author is gone--and all we can do is Swift it up to be a little nicer. And Swift it we shall.</p>\n<p name="225a" id="225a" class="graf--p graf-after--p">Without further ado, meet your advisary:</p>\n<pre name="cd19" id="cd19" class="graf--pre graf-after--p">//Assume PlayerRound is a simple struct with a roundScore Int<br>//CongratsMessage is also a struct with a roundCongrats String</pre>\n<pre name="3683" id="3683" class="graf--pre graf-after--pre">let aRound:PlayerRound? = PlayerRound()</pre>\n<pre name="38f9" id="38f9" class="graf--pre graf-after--pre">if aRound != nil<br>{<br>    if aRound?.roundScore? &gt;= 5 &amp;&amp; aRound?.roundScore? &lt;= 10<br>    {<br>        print("Score gets an A+")</pre>\n<pre name="c502" id="c502" class="graf--pre graf-after--pre">        let iterationNum = [1,2,3]<br>        for i in 0...iterationNum.count<br>        {<br>            print("Awesome, we are showing a victory message!!")</pre>\n<pre name="d8da" id="d8da" class="graf--pre graf-after--pre">            let message = self.randomCongrats()<br>            switch message<br>            {<br>                case let message where message is String:<br>                    print(message)<br>                case let message where message is CongratsMessage:<br>                    print(message.roundCongrats)<br>                default: <br>                    print("Uh oh")<br>            }<br>        }<br>    }<br>}</pre>\n<p name="cc82" id="cc82" class="graf--p graf-after--pre">As you can see, there's work to be done here. Let's dance.</p>\n<h4 name="467a" id="467a" class="graf--h4 graf-after--p">Round 1: Pattern Matching</h4>\n<p name="1165" id="1165" class="graf--p graf-after--h4">The first thing you notice is the double conditional if statement. It would seem, in this beloved fake game, that if one scores anywhere between 5 points and 10 they are bequeathed the revered A+ badge. While the logic is sound, and though you aren't too crazy about the magic numbers--you see a chance to strike.</p>\n<p name="96e3" id="96e3" class="graf--p graf-after--p">Enter the ~= operator, pattern matching to the core. When it's all said and done, the ~= matches two values of the same type, so who is to say we can't match between a range of Ints?</p>\n<p name="7027" id="7027" class="graf--p graf-after--p">Since you notice that aRound won't be nil, you refactor this:</p>\n<pre name="70e4" id="70e4" class="graf--pre graf-after--p">if aRound?.roundScore? &gt;= 5 &amp;&amp; aRound?.roundScore? &lt;= 10</pre>\n<p name="4997" id="4997" class="graf--p graf-after--pre">To this:</p>\n<pre name="de39" id="de39" class="graf--pre graf-after--p">if 5...10 ~= aRound!.roundScore!</pre>\n<p name="ec63" id="ec63" class="graf--p graf-after--pre">Boom--we're already chippin' away at this thing! Our first edit is cemented, but this just gives you more drive. There are more to come.</p>\n<h4 name="b962" id="b962" class="graf--h4 graf-after--p">Round 2: Intuitive Optional Unwrapping</h4>\n<p name="9a40" id="9a40" class="graf--p graf-after--h4">Hmm, you aren't fond of force unwrapping those values. Even though you know they aren't nil, still--it just feels a bit off? You assert that this is a time to unwrap optionals in the traditional way.</p>\n<p name="8487" id="8487" class="graf--p graf-after--p">For the first pass, we take this out:</p>\n<pre name="79cc" id="79cc" class="graf--pre graf-after--p">if aRound != nil</pre>\n<p name="8418" id="8418" class="graf--p graf-after--pre">And go with the more familiar:</p>\n<pre name="9f3c" id="9f3c" class="graf--pre graf-after--p">if let round = aRound</pre>\n<p name="74fc" id="74fc" class="graf--p graf-after--pre">And, that does feel a bit better. However, looking at the method we realize the only thing we care about is the score held in aRound. So, you roll up your sleeves and dish out a combo:</p>\n<pre name="f247" id="f247" class="graf--pre graf-after--p">if let playerScore = aRound?.roundScore where 5...10 ~= playerScore</pre>\n<p name="b13c" id="b13c" class="graf--p graf-after--pre">Presto! This function doesn't even do anything if the sweet spot of 5-10 isn't met, so why not unwrap an optional and move the range check all in one?</p>\n<p name="2241" id="2241" class="graf--p graf-after--p">Again, this just adds more refactoring fuel to your proverbial fire. You continue.</p>\n<h4 name="ccdb" id="ccdb" class="graf--h4 graf-after--p">Round 3: The Odd Array</h4>\n<p name="d14b" id="d14b" class="graf--p graf-after--h4">At this point you turn your attention to the spot where a "Congrats!" message is displayed a few times in a loop. But--you notice an oddity.</p>\n<p name="489c" id="489c" class="graf--p graf-after--p">Could it be? A wholly random and untimely Array?</p>\n<pre name="06b0" id="06b0" class="graf--pre graf-after--p">let iterationNum = [1,2,3]<br>for i in 0...iterationNum.count</pre>\n<p name="7d4a" id="7d4a" class="graf--p graf-after--pre">It seems it's only used to create a bounds. And, who knows the story here? Did the original developer have a different plan, and then later course correct and forget about this? Did others see it as well, and then have the same thought but ended up not touching it because it feels....like a trap of some sort?</p>\n<p name="9f66" id="9f66" class="graf--p graf-after--p">Who knows--but you're unshaken. Your first gut reaction is to tighten up the Array initialization:</p>\n<pre name="bc5f" id="bc5f" class="graf--pre graf-after--p">let iterationNum = Array(1...3)</pre>\n<p name="e337" id="e337" class="graf--p graf-after--pre">You think, "It's just numbers! I can use a range to initialize it!"--and that's certainly true. You go further and realize the index is never used, the intention seems to just be printing a message 3 times. So, you bust out the wildcard instead of the "i":</p>\n<pre name="a323" id="a323" class="graf--pre graf-after--p">for _ in 0...iterationNum.count</pre>\n<p name="e006" id="e006" class="graf--p graf-after--pre">And after that, you realize the root of the problem. The Array doesn't even need to be there, we could just write it like this:</p>\n<pre name="0b3d" id="0b3d" class="graf--pre graf-after--p">for _ in 0...3</pre>\n<p name="fd52" id="fd52" class="graf--p graf-after--pre">....and you do, but then another thought sweeps into your head:</p>\n<h4 name="d374" id="d374" class="graf--h4 graf-after--p">Round 4: Fun with Extensions</h4>\n<p name="a536" id="a536" class="graf--p graf-after--h4">What if we need to do a few things a set number of times going forward? What if we had a pragmatic and uber readable way to do something like that?</p>\n<p name="f1ca" id="f1ca" class="graf--p graf-after--p">You smile at the computer and take another sip of your lukewarm coffee. You have just the thing:</p>\n<pre name="0ee1" id="0ee1" class="graf--pre graf-after--p">extension Int<br>{<br>    func times(task: () -&gt; ())<br>    {<br>        for _ in 0..&lt;self<br>        {<br>            task()<br>        }<br>    }<br>}</pre>\n<p name="8c25" id="8c25" class="graf--p graf-after--pre">Due to Swift's accessible approach to retroactive modeling, you just crafted a simple way to do numbered operations. And so it is, you insert yet another refactoring win:</p>\n<p name="0a72" id="0a72" class="graf--p graf-after--p">This:</p>\n<pre name="14e6" id="14e6" class="graf--pre graf-after--p">for i in 0...iterationNum.count<br>{<br>    print("Awesome, we are showing a victory message!!")</pre>\n<pre name="a252" id="a252" class="graf--pre graf-after--pre">    let message = self.randomCongrats()<br>    switch message<br>    {<br>        case let message where message is String:<br>             print(message)<br>        case let message where message is CongratsMessage:<br>             print(message.roundCongrats)<br>        default: <br>             print("Uh oh")<br>    }<br>}</pre>\n<p name="6eea" id="6eea" class="graf--p graf-after--pre">Goes to this:</p>\n<pre name="3799" id="3799" class="graf--pre graf-after--p">3.times<br>{<br>    print("Awesome, we are showing a victory message!!")</pre>\n<pre name="4b49" id="4b49" class="graf--pre graf-after--pre">    let message = self.randomCongrats()<br>    switch message<br>    {<br>        case let message where message is String:<br>             print(message)<br>        case let message where message is CongratsMessage:<br>             print(message.roundCongrats)<br>        default: <br>             print("Uh oh")<br>    }<br>}</pre>\n<p name="419b" id="419b" class="graf--p graf-after--pre">....hey oh!</p>\n<h4 name="6681" id="6681" class="graf--h4 graf-after--p">Round 5: Nil Coalescing Operator</h4>\n<p name="5a62" id="5a62" class="graf--p graf-after--h4">While you were close to pumping your fist on your finest refactor of the week, your heart quickly skips a beat - a runtime exception! The already troublesome randomCongrats() function seems to be returning a nil value sometimes!</p>\n<p name="eaee" id="eaee" class="graf--p graf-after--p">After a quick check at it's signature, sure enough--your thoughts are confirmed:</p>\n<pre name="be59" id="be59" class="graf--pre graf-after--p">func randomCongrats() -&gt; AnyObject?</pre>\n<p name="9d1a" id="9d1a" class="graf--p graf-after--pre">Argh! You go to tighten up the function only to find it's a thousand lines! You'd rather stay away--anymore dancing in there could do more harm than good. So, you look to solve the problem here.</p>\n<p name="abd2" id="abd2" class="graf--p graf-after--p">Perhaps we fix it via optional unwrapping on the message variable? It's an option, but a nifty operator comes to mind: the nil coalescing operator.</p>\n<p name="8fc0" id="8fc0" class="graf--p graf-after--p">We rewrite this:</p>\n<pre name="514d" id="514d" class="graf--pre graf-after--p">let message = self.randomCongrats()</pre>\n<p name="dcf8" id="dcf8" class="graf--p graf-after--pre">...to instead go with this:</p>\n<pre name="c386" id="c386" class="graf--pre graf-after--p">let message = self.randomCongrats() ?? "Woohoo - great score!"</pre>\n<p name="7b4c" id="7b4c" class="graf--p graf-after--pre">And we move on to the next win, because we know nil values will never weasel their way in front of our function's execution hereafter. If randomCongrats() nils us up, we'll set the message to a friendly default string.</p>\n<h4 name="8dd1" id="8dd1" class="graf--h4 graf-after--p">Round 6: Tighter Type Checks</h4>\n<p name="b2bf" id="b2bf" class="graf--p graf-after--h4">Now that we've sort of dealt with the nil value, we gaze upon the switch statement. It seems as though we've just got to deal with the AnyObject? return type, so checking the type at runtime will occur regardless.</p>\n<p name="3ec2" id="3ec2" class="graf--p graf-after--p">But, <a href="https://twitter.com/terhechte/status/711357380479426560" data-href="https://twitter.com/terhechte/status/711357380479426560" class="markup--anchor markup--p-anchor" rel="nofollow">we frequent Twitter</a>. And because of that, we know we can at least sprinkle a little bit of syntactic sugar on it:</p>\n<pre name="5d97" id="5d97" class="graf--pre graf-after--p">3.times<br>{<br>    print("Awesome, we are showing a victory message!!")</pre>\n<pre name="6f62" id="6f62" class="graf--pre graf-after--pre">    let message = self.randomCongrats() ?? "Woohoo - great score!"<br>    switch message<br>    {<br>        case is String:<br>             print(message)<br>        case is CongratsMessage:<br>             print(message.roundCongrats)<br>        default: <br>             print("Uh oh")<br>    }<br>}</pre>\n<p name="23a1" id="23a1" class="graf--p graf-after--pre">Nice--no need for all of the let x where x is y syntax. We're going places--but to really top it off, you find one more piece of low hanging fruit.</p>\n<h4 name="cf70" id="cf70" class="graf--h4 graf-after--p">Round 7: The Touch Up</h4>\n<p name="56fb" id="56fb" class="graf--p graf-after--h4">The next fix you wish to implement? It's small, almost inconsequential. But, does it ever just give it that last finishing touch.</p>\n<p name="6f8c" id="6f8c" class="graf--p graf-after--p">Those little debug messages:</p>\n<pre name="5788" id="5788" class="graf--pre graf-after--p">print("Score gets an A+")</pre>\n<p name="ccca" id="ccca" class="graf--p graf-after--pre">and</p>\n<pre name="894a" id="894a" class="graf--pre graf-after--p">print("Awesome, we are showing a victory message!!")</pre>\n<p name="dd5f" id="dd5f" class="graf--p graf-after--pre">You recall that you've heard talk that a robust logging framework is about to be put in place. Perhaps that explains the sporadic print() statements you've been seeing. Either way, it's time to take things to 10.</p>\n<p name="507f" id="507f" class="graf--p graf-after--p">You take them both out, and replace it with some information that could actually be helpful down the road:</p>\n<pre name="0185" id="0185" class="graf--pre graf-after--p">print("Invoking \\(#function) on \\(#line)")</pre>\n<p name="9101" id="9101" class="graf--p graf-after--pre">You're an astute Swift developer--and you remember that the screaming snake case symbols (i.e. __FUNCTION__) have been retooled for Swift 2.2. Now, with these little numbers you just included, the compiler will actually print out the function name and the exact line. Ammo we can use.</p>\n<p name="1614" id="1614" class="graf--p graf-after--p">You're tempted to include #file too, but you know you've done enough at this point. The new function looks much more Swiftier, and you're happy with it!</p>\n<h4 name="64f7" id="64f7" class="graf--h4 graf-after--p">The final product</h4>\n<pre name="9808" id="9808" class="graf--pre graf-after--h4">if let highScore = aRound?.roundScore where 5...10 ~= highScore<br>{<br>    print("Invoking \\(#function) on \\(#line)")<br><br>    3.times<br>    {<br>        let message = randomCongrats() ?? "Woohoo -- great score!"<br><br>        switch message<br>        {<br>             case is String:<br>                 print(message)<br>             case is CongratsMessage:<br>                 print(message.roundCongrats)<br>             default:<br>                 print("Uh oh")<br>        }<br>    }<br>}</pre>\n<p name="1df5" id="1df5" class="graf--p graf-after--pre">...and then you send your pull request with a warm smile, knowing you've just been filled with the feeling of accomplishment that can only be evoked from the pure thrill of software engineering.</p>\n<h4 name="3570" id="3570" class="graf--h4 graf-after--p">Wrapping Up</h4>\n<p name="2de0" id="2de0" class="graf--p graf-after--h4">In all seriousness and imaginary scenario aside, Swift has a lot of bells and whistles, and it's likely no one person will ever know them all.</p>\n<p name="0775" id="0775" class="graf--p graf-after--p">But we can know some of them.</p>\n<p name="1cd7" id="1cd7" class="graf--p graf-after--p">And knowing some of them leads to a lot of fun, cleaner and more expressive code. True, there are more pressing problems with our sample func (the type checking, the ominous function returning a String or a Struct, etc.), but the point is--sometimes I.R.L. you don't have control over those things.</p>\n<p name="58e6" id="58e6" class="graf--p graf-after--p graf--last">But, most of the time we can Swift them up to be a bit nicer. Until next time, thanks for reading and I'll talk to you in 14.days { writeNextPost() }</p>	Fundamentals are key. Without them, you're left hedging your bets on a fragile foundation. I believe that's true for every craft and person, regardless the walk of life one hails from. But, the rub is this: fundamentals are inherently anything but--mastering them takes time, it's also difficult and it requires a deliberate and concerted effort from a human being. In programming, specifically in terms of Swift--it begins with understanding optionals, grasping collections and embracing Swift's design decisions. So today, we'll attempt to level up your Swift fundamentals game by refactoring a method using some Swift trickery. In short--we'll get cute. Let's take a peek at the sample specimen. In our fictitious Swift scenario, there is a function that handles the end of a round of some kind of game. When the game concludes, some logic occurs to see if a user scored an "A+", 5 stars, gold ribb	\N	2016-04-23 09:19:23.768223	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
04c7b4f0-8b85-45a1-92eb-1aa2d3eb7514	10	0	A toolbox of AI modules written in Swift	https://github.com/KevinCoble/AIToolbox?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	a-toolbox-of-ai-modules-written-in-swift	{}	GitHub - KevinCoble/AIToolbox: A toolbox of AI modules written in Swift:  Graphs/Trees, Support Vector Machines, Neural Networks, PCA, K-Means, Genetic Algorithms	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	2	32475.3010299999987	2016-04-23 13:56:28.983485	2016-04-23 13:59:48.166227	d15947e9-3b46-4472-a0cb-dea1a222954c	{"description":"AIToolbox - A toolbox of AI modules written in Swift:  Graphs/Trees, Support Vector Machines, Neural Networks, PCA, K-Means, Genetic Algorithms","title":"KevinCoble/AIToolbox","url":"https://github.com/KevinCoble/AIToolbox","site_name":"GitHub","type":"object","image":"https://avatars1.githubusercontent.com/u/16549117?v=3\\u0026s=400"}	<h1>\n<a id="user-content-aitoolbox" class="anchor" href="#aitoolbox" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>AIToolbox</h1>\n\n<p>A toolbox of AI modules written in Swift:  Graphs/Trees, Linear Regression, Support Vector Machines, Neural Networks, PCA, KMeans, Genetic Algorithms, MDP, Mixture of Gaussians</p>\n\n<p>This framework uses the Accelerate library to speed up computations\nWritten for Swift 2.2.  Will update to 3 when officially released</p>\n\n<p>SVM ported from the public domain LIBSVM repository\nSee <a href="https://www.csie.ntu.edu.tw/%7Ecjlin/libsvm/">https://www.csie.ntu.edu.tw/~cjlin/libsvm/</a> for more information</p>\n\n<p>The Metal Neural Network uses the Metal framework for a Neural Network using the GPU.  While it works in preliminary testing, more work could be done with this class</p>\n\n<p>Use the XCTest files for examples on how to use the classes</p>\n\n<p>Classes/Algorithms supported:</p>\n\n<pre><code>Graphs/Trees\n    Depth-first search\n    Breadth-first search\n    Hill-climb search\n    Beam Search\n    Optimal Path search\n\nAlpha-Beta (game tree)\n\nGenetic Algorithms\n    mutations\n    mating\n    integer/double alleles\n\nConstraint Propogation\n    i.e. 3-color map problem\n\nLinear Regression\n    arbitrary function in model\n    convenience constructor for standard polygons\n    Least-squares error\n\nNeural Networks\n    multiple layers, several non-linearity models\n    on-line and batch training\n    simple network training using GPU via Apple's Metal\n\nSupport Vector Machine\n    Classification\n    Regression\n    More-than-2 classes classification\n\nK-Means\n    unlabelled data grouping\n\nPrincipal Component Analysis\n    data dimension reduction\n\nMarkov Decision Process\n    value iteration\n    policy iteration\n    fitted value iteration for continuous state MDPs - uses Linear Regression class for fit\n            (see my MDPRobot project on github for an example use)\n\nGaussians\n    Single variable\n    Multivariate - with full covariance matrix or diagonal only\n\nMixture Of Gaussians\n    Learn density function of a mixture of gaussians from data\n    EM algorithm to converge model with data\n</code></pre>\n\n<h2>\n<a id="user-content-license" class="anchor" href="#license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>License</h2>\n\n<p>This framework is made available with the Apache license.</p>\n	A toolbox of AI modules written in Swift:  Graphs/Trees, Linear Regression, Support Vector Machines, Neural Networks, PCA, KMeans, Genetic Algorithms, MDP, Mixture of Gaussians This framework uses the Accelerate library to speed up computations\nWritten for Swift 2.2.  Will update to 3 when officially released SVM ported from the public domain LIBSVM repository\nSee https://www.csie.ntu.edu.tw/~cjlin/libsvm/ for more information The Metal Neural Network uses the Metal framework for a Neural Network using the GPU.  While it works in preliminary testing, more work could be done with this class Use the XCTest files for examples on how to use the classes Classes/Algorithms supported: This framework is made available with the Apache license.	\N	2016-04-23 13:56:28.981258	0	0	swiftfan20841	{d15947e9-3b46-4472-a0cb-dea1a222954c,9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
cd547732-a9ac-457a-8a9c-149eea535b3a	9	0	setNeedsLayout vs layoutIfNeeded Explained	http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained/	setneedslayout-vs-layoutifneeded-explained	{"version":"1.0","provider_name":"iOS Insight","provider_url":"http://www.iosinsight.com","author_name":"Lawrence MacFadyen","author_url":"http://www.iosinsight.com/author/larry-macfadyengmail-com/","title":"setNeedsLayout vs layoutIfNeeded Explained","type":"rich","width":600,"height":338,"html":"\\u003cblockquote class=\\"wp-embedded-content\\"\\u003e\\u003ca href=\\"http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained/\\"\\u003esetNeedsLayout vs layoutIfNeeded Explained\\u003c/a\\u003e\\u003c/blockquote\\u003e\\n\\u003cscript type='text/javascript'\\u003e\\n\\u003c!--//--\\u003e\\u003c![CDATA[//\\u003e\\u003c!--\\n\\t\\t!function(a,b){\\"use strict\\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\\"MSIE 10\\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\\\./),i=b.querySelectorAll(\\"iframe.wp-embedded-content\\");for(c=0;c\\u003ci.length;c++)if(d=i[c],!d.getAttribute(\\"data-secret\\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\\"#?secret=\\"+f,d.setAttribute(\\"data-secret\\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\\"security\\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\\"'+d.secret+'\\"]'),k=b.querySelectorAll('blockquote[data-secret=\\"'+d.secret+'\\"]');for(e=0;e\\u003ck.length;e++)k[e].style.display=\\"none\\";for(e=0;e\\u003cj.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\\"style\\"),\\"height\\"===d.message){if(g=parseInt(d.value,10),g\\u003e1e3)g=1e3;else if(200\\u003e~~g)g=200;f.height=g}if(\\"link\\"===d.message)if(h=b.createElement(\\"a\\"),i=b.createElement(\\"a\\"),h.href=f.getAttribute(\\"src\\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\\"message\\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\\"DOMContentLoaded\\",c,!1),a.addEventListener(\\"load\\",c,!1)}(window,document);\\n//--\\u003e\\u003c!]]\\u003e\\n\\u003c/script\\u003e\\u003ciframe sandbox=\\"allow-scripts\\" security=\\"restricted\\" src=\\"http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained/embed/\\" width=\\"600\\" height=\\"338\\" title=\\"\\u0026#8220;setNeedsLayout vs layoutIfNeeded Explained\\u0026#8221; \\u0026#8212; iOS Insight\\" frameborder=\\"0\\" marginwidth=\\"0\\" marginheight=\\"0\\" scrolling=\\"no\\" class=\\"wp-embedded-content\\"\\u003e\\u003c/iframe\\u003e","thumbnail_url":"http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/explained.jpg?fit=600%2C450","thumbnail_width":600,"thumbnail_height":450}	setNeedsLayout vs layoutIfNeeded Explained | iOS Insight	[]	iosinsight.com	2	32475.3010299999987	2016-04-23 09:21:46.958612	2016-04-23 13:58:57.838265	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Let’s take a look at the difference between setNeedsLayout and layoutIfNeeded. This post will explain the difference using a concrete example of animating constraint changes. Before discussin…","title":"setNeedsLayout vs layoutIfNeeded Explained","url":"http://www.iosinsight.com/setneedslayout-vs-layoutifneeded-explained/","site_name":"iOS Insight","type":"article","image":"http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/explained.jpg?fit=800%2C600"}	\n\t\t<p>Let’s take a look at the difference between <strong>setNeedsLayout</strong> and <strong>layoutIfNeeded</strong>.</p>\n<p>This post will explain the difference using a concrete example of animating constraint changes.Before discussing both methods, it is crucial to first have an understanding of the main run loop in an iOS app, and the Auto Layout process, so bear with me for a moment.</p>\n<p>As part of the normal startup process, <strong>UIApplication</strong> in iOS starts the main run loop for an app, which runs on the main thread. The main run loop processes events (such as user touches) and handles updates to view-based interfaces. Asevents occur, such as touch, location updates, motion, and multimedia control, the run loop finds the appropriate handler for the events, calling appropriate methods, which call other methods, and so on. At some moment in time, all events will have been handled and control will return to the run loop. Let’s labelthis point where control is returned to the run loop as the <em>update cycle</em>, since this is how Apple refers to it in some of their documentation. You could use other terminology to conceptualize it, such as a break in the action, the redraw cycle, or a free moment.</p>\n<p>While events are being processed and dispatched, and as changes toviewsare requested, theyare not always acted upon right away. Instead, the system records the changes and marks views as needing to be redrawn. When are the changes drawn? It is in this <em>update cycle</em>,after all existing events have been handled, that attention is now turned to redrawing. Of course to the user it does not look like there is a wait to redraw (in general), because all of this is happening quickly. Knowing that there is an interval periodically,between setsof events being processed, where the system now takes on the task of updating the layout and display, is important forunderstanding<strong>setNeedsLayout</strong> and <strong>layoutIfNeeded</strong>.</p>\n<p>The difference between these two methods can be now be described by referencing the <em>update cycle</em>described above.</p>\n<p>The method <strong>setNeedsLayout</strong> fora <strong>UIView</strong> tells the system that youwant it to layout and redraw that view and all of its subviews, when it is time for the <em>update cycle</em>. This is an asynchronous activity, because the method completes and returns immediately, but it isn’t until some later time thatthe layout and redraw actually happens, andyou don’t know when that <em>update cycle</em> will be.</p>\n<p>In contrast, the method <strong>layoutIfNeeded</strong> is a synchronous call that tells the system you want a layout and redraw of a view and its subviews, and you want it done <em>immediately</em> without waiting for the<em>update cycle</em>. When the call to this method is complete, the layout has already been adjusted and drawn based on all changes that had been noted prior to the method call.</p>\n<p>So, stated succinctly, <strong>layoutIfNeeded</strong>says <span style="color: #000000;"><strong><em>update immediately please</em></strong></span>, whereas <strong>setNeedsLayout</strong>says <span style="color: #000000;"><strong><em>please update but you can wait until the next update cycle</em></strong></span>.</p>\n<p>When I first encountered these methods, I can remember thinking that the <em>if needed</em> part of <strong>layoutIfNeeded</strong> made it sound less urgent or even optional, compared to the <strong>setNeedsLayout</strong>method that sounded more like a definitive statement to perform a layout. However, names can be a little deceiving.</p>\n<p>Before we look at code, there is one more important concept regarding Auto Layout and the <em>update cycle</em>. There are actually three phases associated with the layout and drawing ofthe views.The first is update of constraints (<em>constraint pass</em>), which happens bottom up. The second is layout of views and subviews (<em>layout pass</em>), which happens top down and is dependent on constraint settings.The third phase is the <em>display pass</em>, where the views get redrawn based on the <em>layout pass</em>.</p>\n<p>Let’s take a look at howthe two methods,<strong>setNeedsLayout</strong>and<strong>layoutIfNeeded</strong>, play out for the case of animating constraint changes for a <strong>UIView</strong>. You should clearly see the impactin this scenario.</p>\n<p>The app for this discussion is a simple<strong>Single View Application</strong>, and I’ve created one blue colored <strong>UIView</strong> within the main view, as well as a button to trigger update of the blue view height constraint constant. Here is the storyboard after I’ve completed these configurations.</p>\n<p><a href="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png" rel="attachment wp-att-2006"><img class="aligncenter size-large wp-image-2006" src="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=644%2C453" alt="Screen Shot 2016-04-12 at 11.18.34 AM" srcset="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=644%2C453 644w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=150%2C105 150w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=300%2C211 300w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=768%2C540 768w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=80%2C56 80w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=220%2C155 220w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=142%2C100 142w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=213%2C150 213w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=339%2C238 339w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=590%2C415 590w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=693%2C487 693w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=847%2C595 847w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?w=1013 1013w" sizes="(max-width: 644px) 100vw, 644px" data-recalc-dims="1"></a></p>\n<p>You can animate constraint changes within an animation block, and that is exactly what we’ll do here. With the <strong>blueHeight</strong> constraint <strong>IBOutlet</strong> in the <strong>ViewController</strong>, we’ll be able to update the constraint and cause the blue rectangle to grow or shrink when the button is clicked, and it will be animated. Here is the entire <strong>ViewController</strong>.</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571b3eac5a1ca785724210" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nimport UIKit\r\n\r\nclass ViewController: UIViewController {\r\n\r\n    @IBOutlet weak var blueHeight: NSLayoutConstraint!\r\n    \r\n    @IBAction func heightPressed(sender: AnyObject) {\r\n        view.layoutIfNeeded()\r\n        if(self.blueHeight.constant == 25.0)\r\n        {\r\n            self.blueHeight.constant = self.view.bounds.height - 100.0\r\n        }\r\n        else\r\n        {\r\n            self.blueHeight.constant = 25.0\r\n        }\r\n        UIView.animateWithDuration(2.0) {\r\n            self.view.layoutIfNeeded()\r\n        }\r\n    }\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n    }\r\n\r\n    override func didReceiveMemoryWarning() {\r\n        super.didReceiveMemoryWarning()\r\n    }\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-2">2</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-4">4</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-6">6</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-8">8</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-10">10</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-12">12</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-14">14</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-16">16</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-18">18</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-19">19</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-20">20</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-21">21</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-22">22</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-23">23</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-24">24</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-25">25</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-26">26</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-27">27</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1ca785724210-28">28</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1ca785724210-29">29</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-1">\n<span class="crayon-r">import</span><span class="crayon-h"> </span><span class="crayon-e">UIKit</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-2"> </div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-3">\n<span class="crayon-r">class</span><span class="crayon-h"> </span><span class="crayon-v">ViewController</span><span class="crayon-o">:</span><span class="crayon-t"> UIViewController</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-4"> </div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-5">\n<span class="crayon-h">    </span><span class="crayon-sy">@</span><span class="crayon-e">IBOutlet </span><span class="crayon-m">weak</span><span class="crayon-h"> </span><span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">blueHeight</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSLayoutConstraint</span><span class="crayon-o">!</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-6"><span class="crayon-h">    </span></div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-7">\n<span class="crayon-h">    </span><span class="crayon-sy">@</span><span class="crayon-e">IBAction </span><span class="crayon-r">func</span><span class="crayon-h"> </span><span class="crayon-e">heightPressed</span><span class="crayon-sy">(</span><span class="crayon-v">sender</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">AnyObject</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-8">\n<span class="crayon-h">        </span><span class="crayon-v">view</span><span class="crayon-sy">.</span><span class="crayon-v ">layoutIfNeeded</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-9">\n<span class="crayon-h">        </span><span class="crayon-st">if</span><span class="crayon-sy">(</span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">blueHeight</span><span class="crayon-sy">.</span><span class="crayon-v ">constant</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">25</span><span class="crayon-sy">.</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-10">\n<span class="crayon-h">        </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-11">\n<span class="crayon-h">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">blueHeight</span><span class="crayon-sy">.</span><span class="crayon-v ">constant</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">view</span><span class="crayon-sy">.</span><span class="crayon-v ">bounds</span><span class="crayon-sy">.</span><span class="crayon-v ">height</span><span class="crayon-h"> </span><span class="crayon-o">-</span><span class="crayon-h"> </span><span class="crayon-cn">100</span><span class="crayon-sy">.</span><span class="crayon-cn">0</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-12">\n<span class="crayon-h">        </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-13">\n<span class="crayon-h">        </span><span class="crayon-st">else</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-14">\n<span class="crayon-h">        </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-15">\n<span class="crayon-h">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">blueHeight</span><span class="crayon-sy">.</span><span class="crayon-v ">constant</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">25</span><span class="crayon-sy">.</span><span class="crayon-cn">0</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-16">\n<span class="crayon-h">        </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-17">\n<span class="crayon-h">        </span><span class="crayon-v">UIView</span><span class="crayon-sy">.</span><span class="crayon-v ">animateWithDuration</span><span class="crayon-sy">(</span><span class="crayon-cn">2.0</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-18">\n<span class="crayon-h">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">view</span><span class="crayon-sy">.</span><span class="crayon-v ">layoutIfNeeded</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-19">\n<span class="crayon-h">        </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-20">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-21"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-22">\n<span class="crayon-h">    </span><span class="crayon-m">override</span><span class="crayon-h"> </span><span class="crayon-r">func</span><span class="crayon-h"> </span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-23">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-v ">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-24">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-25"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-26">\n<span class="crayon-h">    </span><span class="crayon-m">override</span><span class="crayon-h"> </span><span class="crayon-r">func</span><span class="crayon-h"> </span><span class="crayon-e">didReceiveMemoryWarning</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-27">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-v ">didReceiveMemoryWarning</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1ca785724210-28">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1ca785724210-29"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0065 seconds] -->\r\n<p>\nWhen the button is pressed, the first thing you see is a call to <strong>view.layoutIfNeeded()</strong>. Remember that this method forces an immediate layout and display update. You might wonder why this is done before we do the constraint change. Apple considers this a best practicein order to ensure that any previous changes awaiting the <em>update cycle</em> are completed, so I’ve added it for that reason.</p>\n<p>The next section of code checks the current value of the constraint constant, so that the button click is alternating between the original constraint of 25, and the view height minus 100.</p>\n<p>When the constraint is updated like this, that automatically does the equivalent of a <strong>setNeedsLayout</strong>, so nothing else would be required to have the view updated during the next <em>update cycle</em>. We could have no more code and you’d see the update, but it would not be animated. In our case, a 2 second animation block is added, and inside that block, we force an immediate layout via the <strong>layoutIfNeeded</strong> method. Because this layout happens synchronously, the frame movement from the constraint change is captured within the animation block, and therefore if you run the app now, you see how the blue view animates over the 2 seconds to the large or small size. Here is the view before and after animation from small to large.</p>\n<div class="content-column one_half"><a href="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png" rel="attachment wp-att-2009"><img class="aligncenter size-medium wp-image-2009" src="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=169%2C300" alt="Simulator Screen Shot Apr 12, 2016, 11.44.39 AM" srcset="http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=169%2C300 169w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=84%2C150 84w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=45%2C80 45w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=124%2C220 124w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=56%2C100 56w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=134%2C238 134w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=233%2C415 233w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=274%2C487 274w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?resize=334%2C595 334w, http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.44.39-AM.png?w=562 562w" sizes="(max-width: 169px) 100vw, 169px" data-recalc-dims="1"></a></div>\n<div class="content-column one_half last_column"><p><a href="http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png" rel="attachment wp-att-2012"><img class="aligncenter size-medium wp-image-2012" src="http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=169%2C300" alt="Simulator Screen Shot Apr 12, 2016, 11.43.56 AM" srcset="http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=169%2C300 169w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=84%2C150 84w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=45%2C80 45w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=124%2C220 124w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=56%2C100 56w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=134%2C238 134w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=233%2C415 233w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=274%2C487 274w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?resize=334%2C595 334w, http://i1.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Simulator-Screen-Shot-Apr-12-2016-11.43.56-AM.png?w=562 562w" sizes="(max-width: 169px) 100vw, 169px" data-recalc-dims="1"></a></p></div>\n<div class="clear_column"></div>\n<p>Let’s replace <strong>layoutIfNeeded</strong> with <strong>setNeedsLayout</strong>, so that the animation block is now as follows.</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571b3eac5a1e7054764481" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nUIView.animateWithDuration(2.0) {\r\n    self.view.setNeedsLayout()\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571b3eac5a1e7054764481-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b3eac5a1e7054764481-2">2</div>\n<div class="crayon-num" data-line="crayon-571b3eac5a1e7054764481-3">3</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b3eac5a1e7054764481-1">\n<span class="crayon-v">UIView</span><span class="crayon-sy">.</span><span class="crayon-v ">animateWithDuration</span><span class="crayon-sy">(</span><span class="crayon-cn">2.0</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b3eac5a1e7054764481-2">\n<span class="crayon-h">    </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v ">view</span><span class="crayon-sy">.</span><span class="crayon-v ">setNeedsLayout</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b3eac5a1e7054764481-3"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0007 seconds] -->\r\n<p>\nNow what we are doing within the animation block is marking the view as needing a layout update, but it isn’t forced immediately. Instead, the <strong>setNeedsLayout</strong> method returns with the view simply being on the list to be updated in the next <em>update cycle</em>. The net effect is that nothing takes place in the animation block that can beanimated, because there is no change to the view within that block.</p>\n<p>Clicking the button in this case immediately updates the view size based on theupdated constraint, instead of animating the update. Wait a minute, why is it immediate if we didn’t use <strong>layoutIfNeeded</strong>? That isa perfectly valid question which I’ll address.</p>\n<p>It helps to know that animation actually takes place on its own thread, and not on the main thread where the <em>update cycle</em> occurs. Furthermore, animation is triggered at the next <em>update cycle</em>. During animation, progress updates are sent onthe main thread, which is why we see incremental changes for animations. In this case though, animation isn’t making the changes to the view and sending updates for display. Instead, once the code completes in the <strong>IBAction</strong>, and there are no more events being processed, an <em>update cycle</em> occurs and does an immediate layout pass without any animation.</p>\n<p>To our eyes, the change in size of the blue view happens instantaneously. At first it seems counter-intuitive because we didn’t use <strong>layoutIfNeeded</strong> to force an immediate update. However, we didn’t make the view update happen within the context of the animation block, so it <em>appeared</em> to be immediate because we marked it for update and the <em>update cycle</em>occurred, which is also where the animation would have started. So, instead of starting an animation of the constraint change and frame movement from the<em>update cycle</em>, the view update happened instantaneously in the <em>update cycle</em> because our code had marked that theview needed a layout update via the <strong>setNeedsLayout</strong>.</p>\n<p>If you want to run this app for yourself and see the animation with <strong>layoutIfNeeded</strong> versus no animation with <strong>setNeedsLayout</strong>, the code with animation is <strong><a href="https://github.com/lmacfadyen/UIViewLifecycleLayoutDisplay" target="_blank">here in GitHub</a></strong>.</p>\n<p>Are you also interested in understanding<strong>setNeedsDisplay,</strong><strong>drawRect,</strong>and the <em>display phase</em>of the <em>update cycle</em>? My <strong><a href="http://www.iosinsight.com/setneedsdisplay-and-drawrect-explained/" target="_blank">next post</a></strong>covers exactly those topics.</p>\n<p>Thanks for reading!</p>\n<span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid red;"></span>\t	Let's take a look at the difference between setNeedsLayout and layoutIfNeeded. This post will explain the difference using a concrete example of animating constraint changes.Before discussing both methods, it is crucial to first have an understanding of the main run loop in an iOS app, and the Auto Layout process, so bear with me for a moment. As part of the normal startup process, UIApplication in iOS starts the main run loop for an app, which runs on the main thread. The main run loop processes events (such as user touches) and handles updates to view-based interfaces. Asevents occur, such as touch, location updates, motion, and multimedia control, the run loop finds the appropriate handler for the events, calling appropriate methods, which call other methods, and so on. At some moment in time, all events will have been handled and control will return to the run loop. Let's labelthis po	\N	2016-04-23 09:21:46.954922	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c,d15947e9-3b46-4472-a0cb-dea1a222954c}	http://i0.wp.com/www.iosinsight.com/wp-content/uploads/2016/04/Screen-Shot-2016-04-12-at-11.18.34-AM.png?resize=644%2C453	0
4e3e2e67-101e-4e16-a0fd-d813cdc547ef	14	0	Presenting unanticipated errors to users	http://www.cocoawithlove.com/blog/2016/04/14/error-recovery-attempter.html?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	presenting-unanticipated-errors-to-users	{}	Presenting unanticipated errors to users	[{"type":"icon","href":"/assets/site/touch_heartandcup.png","sizes":null,"width":null,"height":null}]	cocoawithlove.com	1	32476	2016-04-23 14:04:19.256025	2016-04-23 14:04:19.409573	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	{"description":null,"title":null,"url":null,"site_name":null,"type":null,"image":null}	\n    <p>The best approach for presenting error conditions to the user is to integrate feedback into the user interface about the condition that the error indicates. This could be changing an icon, colors, adding status text or otherwise changing the state of a user interface element.</p>\n\n<p>This "best approach" requires that we understand the error condition and plan for it in advance.</p>\n\n<p>What if we're still implementing the app and haven't had time to exhaustively discover possible error conditions and plan for them? What about technically possible error conditions that we cannot trigger in our own testing making planning impractical? What about error conditions that should never occur if everything is well behaved but are still semantically possible?</p>\n\n<p>We need a base level tier of error handling and reporting to the user. This base level must be very low overhead (so we can add it use it without much thought during development) and while it must report an error to the user, it is primarily intended to gather diagnostic information so the source of the error condition can be understood and facilitate fixes and other maintenance.</p>\n\n<div class="toc">\n<p class="toc-heading">Contents:</p>\n<ol>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#mediocre-error-handling-and-reporting">Mediocre error handling and reporting</a></li>\n<li><a href="#what-do-we-want">What do we want?</a></li>\n<li><a href="#how-is-it-done">How is it done?</a></li>\n<li><a href="#usage">Usage</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ol>\n<div></div>\n</div>\n<h2 id="introduction">\n<a id="introduction" class="anchor" href="#introduction" aria-hidden="true"><span class="octicon octicon-link"></span></a>Introduction</h2>\n\n<p>First, some quick terminology:</p>\n\n<ol>\n<li>an <strong>error condition</strong> is a failed conditional check that results in a function skipping its usual functionality and instead returning an nominated error value.</li>\n  <li>an <strong>error</strong> is a value used to report that an error condition occurred and normal functionality was skipped</li>\n  <li>\n<strong>error handling</strong> is code that looks for errors and performs different actions based on the presence of those errors</li>\n  <li>\n<strong>error reporting</strong> communicates an error result from a user task to the user</li>\n</ol>\n<p>In my previous article, <a href="http://www.cocoawithlove.com/blog/2016/03/17/non-pure-errors.html">"Errors: unexpected, composite, non-pure, external"</a> I focussed on the first two points and discussed how, from the perspective of the function that <em>creates</em> the error, the error always represents an "unexpected" condition.</p>\n\n<p>In this article, I'm focussing on the latter two points. It's important to realize that, from the perspective of handling and reporting code, errors might not be entirely unexpected.</p>\n\n<p>Certainly in some cases, an "error" result from one function may represent the <em>preferred</em> result for the receiver (an <strong>expected error</strong>). In other cases, error handling may deal with errors by choosing a different path that satisfies requirements another way, so the error is never communicated to the user (<strong>error recovery</strong>). In most other scenarios, even if the error is not "preferred", then at least we know how to handle the error (an <strong>anticipated error</strong>) and specialized feedback is presented to the user in a way that is aesthetically appropriate.</p>\n\n<p>In most programs of reasonable complexity, there are likely to be paths through the program - even if they are rare or theoretical - where an error receives no custom handling. This means: no custom text, no custom code paths based on the error type, just bulk acknowledgement of an unanticipated error and an abort of the task in progress.</p>\n\n<p>Reliable, maintainable programming requires that we always have an approach for errors, even these unanticipated errors, so that the error is routed through our error handling and reported to the user. Given that this type of error potentially represents programmer oversight, it's important that this error include helpful diagnostic information so fixes or other maintenance can occur if required.</p>\n\n<h2 id="mediocre-error-handling-and-reporting">\n<a id="mediocre-error-handling-and-reporting" class="anchor" href="#mediocre-error-handling-and-reporting" aria-hidden="true"><span class="octicon octicon-link"></span></a>Mediocre error handling and reporting</h2>\n\n<p>Let's look at a basic user task. In this case, an <code>@IBAction</code> method on a view controller (as triggered by a button press). The user action then starts a processing task which may trigger an error condition.</p>\n\n<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// An action on a view controller, triggered by a button press</span>\n<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">someUserAction1</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nf">someProcessingTask1</span><span class="p">(</span><span class="s">"/invalid/path"</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="c1">// A processing task in the data model</span>\n<span class="kd">func</span> <span class="nf">someProcessingTask1</span><span class="p">(</span><span class="nv">path</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">do</span> <span class="p">{</span>\n        <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">NSData</span><span class="p">(</span><span class="nv">contentsOfFile</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="o">.</span><span class="kt">DataReadingMappedIfSafe</span><span class="p">)</span>\n        <span class="nf">processData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>\n        <span class="nf">showAlert</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="c1">// A utility function (part of neither data model nor user interface)</span>\n<span class="kd">func</span> <span class="nf">showAlert</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">NSError</span><span class="p">)</span> <span class="p">{</span>\n<span class="cp">#if os(OSX)</span>\n    <span class="kt">NSAlert</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="nf">runModal</span><span class="p">()</span>\n<span class="cp">#else</span>\n    <span class="k">let</span> <span class="nv">alert</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="n">error</span><span class="o">.</span><span class="n">localizedFailureReason</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="kt">UIAlertControllerStyle</span><span class="o">.</span><span class="kt">Alert</span><span class="p">)</span>\n    <span class="n">alert</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"OK"</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">),</span> <span class="nv">style</span><span class="p">:</span> <span class="kt">UIAlertActionStyle</span><span class="o">.</span><span class="kt">Default</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">))</span>\n    <span class="kt">UIApplication</span><span class="o">.</span><span class="nf">sharedApplication</span><span class="p">()</span><span class="o">.</span><span class="n">windows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">rootViewController</span><span class="o">!.</span><span class="nf">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>\n<span class="cp">#endif</span>\n<span class="p">}</span></code></pre></figure><div class="aside">I'm ignoring situations where you have a clear understanding of the error conditions and the risks and can argue that a <code>try!</code> or a deliberate "no-op" <code>catch</code> is valid. This article is about handling situations where there is a degree of uncertainty so both of these options are excluded.</div>\n\n<p>If you look about, you'll see roughly this pattern repeated in many projects. It's the result of not wanting to think about error handling but feeling obliged to put <em>something</em> into the <code>catch</code> block.</p>\n\n<p>At least this approach does something in the event of an error. That makes this approach a step up from the typical Objective-C error handling (pass <code>nil</code> for the <code>NSError **</code> parameter and ignore the problem entirely) or an empty <code>catch</code> block (which is the equivalent in Swift).</p>\n\n<p>But despite appearing to handle the error, this approach can have some potentially serious problems.</p>\n\n<h3 id="non-unique-error-information">Non-unique error information</h3>\n\n<p>On its own, the error dialog produced by the previous code may be helpful or it may be useless.</p>\n\n<p><img src="/assets/blog/error_dialog1.png" alt="site triggered error dialog"></p>\n\n<p>If a user reports that they're seeing this error dialog in your program, do you have enough information to work out what's happening and potentially fix the problem?</p>\n\n<p>This error message tells us a given file couldn't be found but it doesn't tell us why we're trying to open a non-existent file. Did we process the path incorrectly? Have we missed a step before getting here? How did the program get to this point? What has gone wrong to trigger this event?</p>\n\n<p>If the only information we have is the error message it's difficult to properly diagnose many situations. We have a problem that needs to be fixed but we either need to rely on intuition to find the problem or we need to reproduce the problem again in the debugger. The information we are given in this error message alone is insufficient.</p>\n\n<p>For a "file not found" error like this, the default error message is more helpful than usual since the exact missing file is named (although the full path is omitted). Other errors typically have far more opaque default error messages that might be used generically across a range of different circumstances. Errors like "The file could not be played.", "The operation couldn't be completed." are so broad as to be useless. And if you're unlucky enough to get a POSIX error code, it could have been generated by lots of different functions for lots of different reasons - they are not unique.</p>\n\n<h3 id="always-propagate-errors">Always propagate errors</h3>\n\n<p>But the amount of information reported isn't the biggest problem. The biggest problem is presenting the error at the site where it occurs, rather than the site that triggered the overarching task. We need to propagate the error back to its origin in the <code>someUserAction1</code> function, rather than trying to handling it in the middle of the task.</p>\n\n<p>Without error propagation:</p>\n\n<ul>\n<li>the user-interface may get stuck in a mid-task state</li>\n  <li>earlier stages in the task can't attempt a retry or recover</li>\n  <li>we're forcing the task's presentation of the error, rather than giving the user interface controller that triggered the action a the chance to present errors in a more integrated way</li>\n</ul>\n<p>In Objective-C, propagating errors was <em>really</em> annoying (layer, after layer passing <code>NSError**</code> parameters). I personally avoided this where possible - storing the error in a state structure somewhere and instead propagating <code>BOOL</code> through the stack. This approach had numerous problems (shared state is a maintenance headache) but Objective-C's idiomatic error handling was just miserable.</p>\n\n<p>Swift's <code>throws</code> keyword is one of the best features of the language. You may need to paint a <em>lot</em> of functions with the <code>throws</code> attribute (especially if you need to <code>throw</code> from deep inside a hierarchy) but it makes your interfaces honest.</p>\n\n<h2 id="what-do-we-want">\n<a id="what-do-we-want" class="anchor" href="#what-do-we-want" aria-hidden="true"><span class="octicon octicon-link"></span></a>What do we want?</h2>\n\n<p>Let's look at a better approach...</p>\n\n<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// An action on a view controller, triggered by a button press</span>\n<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">someUserAction2</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">do</span> <span class="p">{</span>\n        <span class="k">try</span> <span class="nf">someProcessingTask2</span><span class="p">(</span><span class="s">"/invalid/path"</span><span class="p">)</span>\n    <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">e</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="nf">presentError</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="c1">// A processing task in the data model</span>\n<span class="kd">func</span> <span class="nf">someProcessingTask2</span><span class="p">(</span><span class="nv">path</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>\n    <span class="k">try</span> <span class="n">rethrowUnanticipated</span> <span class="p">{</span>\n        <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">NSData</span><span class="p">(</span><span class="nv">contentsOfFile</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="o">.</span><span class="kt">DataReadingMappedIfSafe</span><span class="p">)</span>\n        <span class="nf">processData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre></figure><p>Why is this better?</p>\n\n<h3 id="error-propagation-improvements">Error propagation improvements</h3>\n\n<p>The most significant difference is that the function responsible for starting the user action - <code>someUserAction2</code> - is now the function responsible for presenting feedback. The highest priority in a user interface is to give feedback to the user's actions; this control flow lets the user action that triggers the task be responsible for the display of the result.</p>\n\n<p>Moving the presentation to the view controller in this way removes all view code from the model. In the first example, the data model was performing a view action (presenting user-interface feedback). This is a theoretical win for separation of concerns.</p>\n\n<p>The function <code>presentError</code> part of Cocoa on Mac OS X but isn't usually part of iOS. I've provided an implementation on <code>UIViewController</code> to make this work. Even if you don't choose to use <code>presentError</code>, it remains a good idea to pass your errors through a relevant controller associated with your view hierarchy. This gives you the ability to use custom presentation for errors at a later time by overriding the presentation method.</p>\n\n<h3 id="diagnostic-improvements">Diagnostic improvements</h3>\n\n<p>Now, I haven't just let the error thrown by <code>NSData</code> propagate directly. That would be possible and it would work but the error dialog would be the same "default" error I showed in the "mediocre" example, above. In a situation where you know the cause of the error and you know that the <code>localizedDescription</code> for this error fully describes it to the user, then this type of simple error reporting may be sufficient, however, this article focusses on errors that we haven't anticipated and we don't know if the <code>localizedDescription</code> will be helpful at all.</p>\n\n<p>We want more information to ensure easy problem diagnosis. The <code>rethrowUnanticipated</code> wrapper function adds an <code>UnanticipatedErrorRecoveryAttempter</code> to the <code>userInfo</code> dictionary of the error and the dialog becomes:</p>\n\n<p><img src="/assets/blog/error_dialog2.png" alt="presentError with unexpected error recovery handler"></p>\n\n<p>and clicking the "Copy details" button places the following text on the clipboard:</p>\n\n<pre><code>CwlUtils_OSXHarness/1, x86_64/MacPro4,1, Version 10.11.4 (Build 15E65), en, fr\n\nThe file "path" couldn't be opened because there is no such file.\nThe error occurred at line 61 of the CwlUtils_OSXHarness/AppDelegate.swift file in the program's code.\n\nNSCocoaErrorDomain: 260. [NSFilePath: /invalid/path, NSLocalizedDescription: The file "path" couldn't be opened because there is no such file., NSUnderlyingError: Error Domain=NSPOSIXErrorDomain Code=2 "No such file or directory"]\n\n1   CwlUtils_OSXHarness                 0x000000010000241c _TFC19CwlUtils_OSXHarness11AppDelegate19someProcessingTask2fzSST_ + 412\n2   CwlUtils_OSXHarness                 0x00000001000025c2 _TFC19CwlUtils_OSXHarness11AppDelegate15someUserAction2fPs9AnyObject_T_ + 114\n3   CwlUtils_OSXHarness                 0x0000000100002716 _TToFC19CwlUtils_OSXHarness11AppDelegate15someUserAction2fPs9AnyObject_T_ + 54\n4   libsystem_trace.dylib               0x00007fff9caa107a _os_activity_initiate + 75\n5   AppKit                              0x00007fff8c9ace89 -[NSApplication sendAction:to:from:] + 460\n6   AppKit                              0x00007fff8c9befde -[NSControl sendAction:to:] + 86\n7   AppKit                              0x00007fff8c9bef08 __26-[NSCell _sendActionFrom:]_block_invoke + 131\n8   libsystem_trace.dylib               0x00007fff9caa107a _os_activity_initiate + 75\n9   AppKit                              0x00007fff8c9bee65 -[NSCell _sendActionFrom:] + 144\n10  libsystem_trace.dylib               0x00007fff9caa107a _os_activity_initiate + 75\n11  AppKit                              0x00007fff8c9bd48a -[NSCell trackMouse:inRect:ofView:untilMouseUp:] + 2693\n12  AppKit                              0x00007fff8ca05fd0 -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] + 744\n13  AppKit                              0x00007fff8c9bbbb4 -[NSControl mouseDown:] + 669\n14  AppKit                              0x00007fff8cf10469 -[NSWindow _handleMouseDownEvent:isDelayedEvent:] + 6322\n15  AppKit                              0x00007fff8cf1144d -[NSWindow _reallySendEvent:isDelayedEvent:] + 212\n16  AppKit                              0x00007fff8c95063d -[NSWindow sendEvent:] + 517\n17  AppKit                              0x00007fff8c8d0b3c -[NSApplication sendEvent:] + 2540\n18  AppKit                              0x00007fff8c737ef6 -[NSApplication run] + 796\n19  AppKit                              0x00007fff8c70146c NSApplicationMain + 1176\n20  CwlUtils_OSXHarness                 0x0000000100002984 main + 84\n21  libdyld.dylib                       0x00007fff982a45ad start + 1\n22  ???                                 0x0000000000000003 0x0 + 3\n</code></pre>\n\n<h2 id="how-is-it-done">\n<a id="how-is-it-done" class="anchor" href="#how-is-it-done" aria-hidden="true"><span class="octicon octicon-link"></span></a>How is it done?</h2>\n\n<p>No significant work happens in the <code>rethrowUnanticipated</code> function. It's just a convenience wrapper that looks like this:</p>\n\n<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">public</span> <span class="kd">func</span> <span class="n">rethrowUnanticipated</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">file</span> <span class="nv">file</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">file</span><span class="p">,</span> <span class="nv">line</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="err">#</span><span class="n">line</span><span class="p">,</span> <span class="kd">@noescape</span> <span class="nv">f</span><span class="p">:</span> <span class="p">()</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">T</span> <span class="p">{</span>\n    <span class="k">do</span> <span class="p">{</span>\n        <span class="k">return</span> <span class="k">try</span> <span class="nf">f</span><span class="p">()</span>\n    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>\n        <span class="k">throw</span> <span class="n">error</span><span class="o">.</span><span class="nf">withUnanticipatedErrorRecoveryAttempter</span><span class="p">(</span><span class="nv">file</span><span class="p">:</span> <span class="n">file</span><span class="p">,</span> <span class="nv">line</span><span class="p">:</span> <span class="n">line</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre></figure><p>In situations where you want to selectively handle different error types or create your own errors, you would call <code>withUnanticipatedErrorRecoveryAttempter</code> on your error directly instead of using this convenience wrapper.</p>\n\n<p>In any case, it's <code>withUnanticipatedErrorRecoveryAttempter</code> that's important. It converts the <code>ErrorType</code> to an <code>NSError</code> (if it wasn't one already) and adds keys to the <code>userInfo</code> dictionary so that the error can participate in Cocoa's error recovery system.</p>\n\n<p>The mechanics of <code>presentError</code> and <code>NSRecoveryAttempterErrorKey</code> are fairly straightforward and you can read about them in <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/RecoverFromErrors/RecoverFromErrors.html">Apple's 'Recover From Errors' documentation</a>. Obviously, in this case, we're not strictly "recovering" from an error, we're just attaching diagnostic information.</p>\n\n<p>Let's look then at how we attach all this information.</p>\n\n<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">ErrorType</span> <span class="p">{</span>\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">withUnanticipatedErrorRecoveryAttempter</span><span class="p">(</span><span class="nv">file</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">file</span><span class="p">,</span> <span class="nv">line</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="err">#</span><span class="n">line</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">NSError</span> <span class="p">{</span>\n        <span class="c1">// We want to preserve the "userInfo" dictionary, so we avoid "self as NSError"</span>\n        <span class="c1">// if we can (since it creates a new NSError that doesn't preserve the userInfo).</span>\n        <span class="c1">// Instead, we cast *via* NSObject.</span>\n        <span class="k">let</span> <span class="nv">e</span> <span class="o">=</span> <span class="p">((</span><span class="k">self</span> <span class="k">as?</span> <span class="kt">NSObject</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NSError</span><span class="p">)</span> <span class="p">??</span> <span class="p">(</span><span class="k">self</span> <span class="k">as</span> <span class="kt">NSError</span><span class="p">)</span>\n        <span class="k">var</span> <span class="nv">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="kt">NSObject</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">userInfo</span>\n        \n        <span class="c1">// Move any existing NSLocalizedRecoverySuggestionErrorKey to a new key (we want</span>\n        <span class="c1">// to replace it but don't want to lose potentially useful information)</span>\n        <span class="k">if</span> <span class="k">let</span> <span class="nv">previousSuggestion</span> <span class="o">=</span> <span class="n">userInfo</span><span class="p">[</span><span class="kt">NSLocalizedRecoverySuggestionErrorKey</span><span class="p">]</span> <span class="p">{</span>\n            <span class="n">userInfo</span><span class="p">[</span><span class="kt">UnanticipatedErrorRecoveryAttempter</span><span class="o">.</span><span class="kt">PreviousRecoverySuggestionKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">previousSuggestion</span>\n        <span class="p">}</span>\n        \n        <span class="c1">// Attach a new NSLocalizedRecoverySuggestionErrorKey and our recovery attempter</span>\n        <span class="c1">// and options</span>\n        <span class="k">let</span> <span class="nv">directory</span> <span class="o">=</span> <span class="p">((</span><span class="n">file</span> <span class="k">as</span> <span class="kt">NSString</span><span class="p">)</span><span class="o">.</span><span class="n">stringByDeletingLastPathComponent</span> <span class="k">as</span> <span class="kt">NSString</span><span class="p">)</span><span class="o">.</span><span class="n">lastPathComponent</span>\n        <span class="k">let</span> <span class="nv">filename</span> <span class="o">=</span> <span class="p">(</span><span class="n">file</span> <span class="k">as</span> <span class="kt">NSString</span><span class="p">)</span><span class="o">.</span><span class="n">lastPathComponent</span>\n        <span class="k">let</span> <span class="nv">suggestion</span> <span class="o">=</span> <span class="kt">NSString</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"The error occurred at line %ld of the %@/%@ file in the program's code."</span><span class="p">,</span>  <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">),</span> <span class="n">line</span><span class="p">,</span> <span class="n">directory</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>\n        <span class="n">userInfo</span><span class="p">[</span><span class="kt">NSLocalizedRecoverySuggestionErrorKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">suggestion</span>\n        <span class="n">userInfo</span><span class="p">[</span><span class="kt">NSLocalizedRecoveryOptionsErrorKey</span><span class="p">]</span> <span class="o">=</span> <span class="kt">UnanticipatedErrorRecoveryAttempter</span><span class="o">.</span><span class="nf">localizedRecoveryOptions</span><span class="p">()</span>\n        <span class="n">userInfo</span><span class="p">[</span><span class="kt">NSRecoveryAttempterErrorKey</span><span class="p">]</span> <span class="o">=</span> <span class="kt">UnanticipatedErrorRecoveryAttempter</span><span class="p">()</span>\n\n        <span class="c1">// Attach the call stack</span>\n        <span class="n">userInfo</span><span class="p">[</span><span class="kt">UnanticipatedErrorRecoveryAttempter</span><span class="o">.</span><span class="kt">ReturnAddressesKey</span><span class="p">]</span> <span class="o">=</span> <span class="nf">callStackReturnAddresses</span><span class="p">()</span>\n\n        <span class="k">return</span> <span class="kt">NSError</span><span class="p">(</span><span class="nv">domain</span><span class="p">:</span> <span class="n">e</span><span class="o">.</span><span class="n">domain</span><span class="p">,</span> <span class="nv">code</span><span class="p">:</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="nv">userInfo</span><span class="p">:</span> <span class="n">userInfo</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre></figure><p>Getting a little mileage out of my own code, this uses <code>callStackReturnAddresses</code> and <code>symbolsForCallStackAddresses</code> from <a href="/blog/2016/02/28/stack-traces-in-swift.html">Tracing tasks with stack traces in Swift</a>.</p>\n\n<p>When the error this function returns is passed to <code>presentError</code> it will use the <code>NSRecoveryAttempterErrorKey</code> added to the <code>userInfo</code> dictionary.</p>\n\n<p>This <code>UnanticipatedErrorRecoveryAttempter</code> provides implementations for the <code>NSErrorRecoveryAttempting</code> methods and uses them to put an <code>OK</code> and <code>Copy details</code> button in the <code>presentError</code> dialog and when the <code>Copy details</code> button is pressed, generates a string to put on the <code>generalPasteboard</code> using the following function:</p>\n\n<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="kd">func</span> <span class="nf">extendedErrorInformation</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">NSError</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>\n    <span class="k">var</span> <span class="nv">userInfo</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="n">userInfo</span>\n    \n    <span class="c1">// Fetch and format diagnostic information for display</span>\n    <span class="k">let</span> <span class="nv">callStackSymbols</span> <span class="o">=</span> <span class="p">(</span><span class="n">userInfo</span><span class="p">[</span><span class="kt">ErrorTypeReturnAddressesKey</span><span class="p">]</span> <span class="k">as?</span> <span class="p">[</span><span class="kt">UInt</span><span class="p">])</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nf">symbolsForCallStackAddresses</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">.</span><span class="nf">joinWithSeparator</span><span class="p">(</span><span class="s">"</span><span class="se">\\n</span><span class="s">"</span><span class="p">)</span> <span class="p">}</span> <span class="p">??</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"(Call stack unavailable)"</span><span class="p">,</span>  <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>\n    <span class="k">let</span> <span class="nv">localizedDescription</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span>\n    <span class="k">let</span> <span class="nv">localizedRecoverySuggestion</span> <span class="o">=</span> <span class="n">error</span><span class="o">.</span><span class="n">localizedRecoverySuggestion</span> <span class="p">??</span> <span class="s">""</span>\n    <span class="k">let</span> <span class="nv">applicationName</span> <span class="o">=</span> <span class="p">(</span><span class="kt">NSBundle</span><span class="o">.</span><span class="nf">mainBundle</span><span class="p">()</span><span class="o">.</span><span class="n">infoDictionary</span><span class="p">?[</span><span class="n">kCFBundleNameKey</span> <span class="k">as</span> <span class="kt">String</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">)</span> <span class="p">??</span> <span class="kt">NSProcessInfo</span><span class="o">.</span><span class="nf">processInfo</span><span class="p">()</span><span class="o">.</span><span class="n">processName</span>\n    <span class="k">let</span> <span class="nv">applicationVersion</span> <span class="o">=</span> <span class="p">(</span><span class="kt">NSBundle</span><span class="o">.</span><span class="nf">mainBundle</span><span class="p">()</span><span class="o">.</span><span class="n">infoDictionary</span><span class="p">?[</span><span class="n">kCFBundleVersionKey</span> <span class="k">as</span> <span class="kt">String</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">)</span> <span class="p">??</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"(App version unavailable)"</span><span class="p">,</span>  <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>\n    <span class="k">let</span> <span class="nv">locales</span> <span class="o">=</span> <span class="kt">NSLocale</span><span class="o">.</span><span class="nf">preferredLanguages</span><span class="p">()</span><span class="o">.</span><span class="nf">joinWithSeparator</span><span class="p">(</span><span class="s">", "</span><span class="p">)</span>\n    <span class="k">let</span> <span class="nv">machineInfo</span> <span class="o">=</span> <span class="s">"</span><span class="se">\\(</span><span class="kt">Sysctl</span><span class="o">.</span><span class="n">machine</span><span class="se">)</span><span class="s">/</span><span class="se">\\(</span><span class="kt">Sysctl</span><span class="o">.</span><span class="n">model</span><span class="se">)</span><span class="s">, </span><span class="se">\\(</span><span class="kt">NSProcessInfo</span><span class="o">.</span><span class="nf">processInfo</span><span class="p">()</span><span class="o">.</span><span class="n">operatingSystemVersionString</span><span class="se">)</span><span class="s">"</span>\n    \n    <span class="c1">// Remove already handled keys from the userInfo.</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">NSLocalizedDescriptionKey</span><span class="p">)</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">NSLocalizedRecoverySuggestionErrorKey</span><span class="p">)</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">NSLocalizedRecoveryOptionsErrorKey</span><span class="p">)</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">NSRecoveryAttempterErrorKey</span><span class="p">)</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">ErrorTypeRecoveryAttemptCheckKey</span><span class="p">)</span>\n    <span class="n">userInfo</span><span class="o">.</span><span class="nf">removeValueForKey</span><span class="p">(</span><span class="kt">ErrorTypeReturnAddressesKey</span><span class="p">)</span>\n    \n    <span class="k">return</span> <span class="s">"</span><span class="se">\\(</span><span class="n">applicationName</span><span class="se">)</span><span class="s">/</span><span class="se">\\(</span><span class="n">applicationVersion</span><span class="se">)</span><span class="s">, </span><span class="se">\\(</span><span class="n">machineInfo</span><span class="se">)</span><span class="s">, </span><span class="se">\\(</span><span class="n">locales</span><span class="se">)\\n\\n\\(</span><span class="n">localizedDescription</span><span class="se">)\\n\\(</span><span class="n">localizedRecoverySuggestion</span><span class="se">)\\n\\n\\(</span><span class="n">error</span><span class="o">.</span><span class="n">domain</span><span class="se">)</span><span class="s">: </span><span class="se">\\(</span><span class="n">error</span><span class="o">.</span><span class="n">code</span><span class="se">)</span><span class="s">. </span><span class="se">\\(</span><span class="n">userInfo</span><span class="se">)\\n\\n\\(</span><span class="n">callStackSymbols</span><span class="se">)</span><span class="s">"</span>\n<span class="p">}</span></code></pre></figure><p>This includes "machine" and "model" information, generated as described in my earlier article <a href="/blog/2016/03/08/swift-wrapper-for-sysctl.html">Gathering system information in Swift with sysctl</a>.</p>\n\n<h2 id="usage">\n<a id="usage" class="anchor" href="#usage" aria-hidden="true"><span class="octicon octicon-link"></span></a>Usage</h2>\n\n<blockquote>\n  <p>The code presented in this article is part of the <a href="https://github.com/mattgallagher/CwlUtils/CwlError.swift">CwlUnanticipatedError.swift file</a> in my <a href="https://github.com/mattgallagher/CwlUtils">CwlUtils project on Github</a>.</p>\n</blockquote>\n\n<p>The <a href="https://github.com/mattgallagher/CwlUtils/blob/master/README.md">ReadMe.md file for the project</a> contains detailed information on cloning the whole repository and adding the framework it produes to your own projects.</p>\n\n<p>If you want to play with the example error handling code used in this article, it is part of the "CwlUtils_OSXHarness" and "CwlUtils_iOSHarness" targets which each produce a basic app with some buttons to trigger errors.</p>\n\n<h2 id="conclusion">\n<a id="conclusion" class="anchor" href="#conclusion" aria-hidden="true"><span class="octicon octicon-link"></span></a>Conclusion</h2>\n\n<p>This article discussed two key points:</p>\n\n<ol>\n<li>The importance of propagating errors all the way back to their origin</li>\n  <li>Using an error that embeds an <code>NSErrorRecoveryAttempting</code> implementation for diagnostic purposes</li>\n</ol>\n<p>Combined with some wrapper functions, Swift's error handling and Cocoa's error reporting capabilities, these two techniques provide a solid base level of error management that you can start to use, even at a hastily implemented prototype stage, and iteratively replace with better error handling and reporting as needed.</p>\n\n<p>In a fully-tested program, this type of error reporting is not what the user should see. The presence of line numbers and mention of the "program's code" is a cue to any mildy savvy user that this dialog is diagnostic tool, not a deliberate feature. While the user may be able to use the information contained to resolve the problem on their own, they are hinted to provide the information under the "Copy details" button through appropriate support channels if the problem persists.</p>\n\n  	The best approach for presenting error conditions to the user is to integrate feedback into the user interface about the condition that the error indicates. This could be changing an icon, colors, adding status text or otherwise changing the state of a user interface element. This "best approach" requires that we understand the error condition and plan for it in advance. What if we're still implementing the app and haven't had time to exhaustively discover possible error conditions and plan for them? What about technically possible error conditions that we cannot trigger in our own testing making planning impractical? What about error conditions that should never occur if everything is well behaved but are still semantically possible? We need a base level tier of error handling and reporting to the user. This base level must be very low overhead (so we can add it use it without much thoug	\N	2016-04-23 14:04:19.252611	0	0	alonecoooder741	{00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75}	/assets/blog/error_dialog1.png	0
003f25cb-657f-4b76-9188-cb295e34b49c	13	0	Compile Time vs. Run Time Type Checking in Swift ·  [Thinking inside a large box];	http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	compile-time-vs-run-time-type-checking-in-swift-thinking-inside-a-large-box	{}	Compile Time vs. Run Time Type Checking in Swift ·  [Thinking inside a large box];	[{"type":"icon","href":"http://blog.benjamin-encz.de/images/apple-touch-icon.png","sizes":null,"width":null,"height":null}]	blog.benjamin-encz.de	1	32476	2016-04-23 14:04:03.061127	2016-04-23 14:04:03.339511	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	{"description":null,"title":"Compile Time vs. Run Time Type Checking in Swift ·  [Thinking inside a large box];","url":"http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/","site_name":"[Thinking inside a large box];","type":"article","image":null}	<p>At some point, when learning how to use Swift’s type system, it is important to understand that Swift (like many other languages) has two different forms of type checking: static and dynamic. Today I want to briefly discuss the difference between them and why headaches might arise when we try to combine them.</p>\n\n<p>Static type checking occurs at compile time and dynamic type checking happens at run time. Each of these two stages come with a different, partially incompatible, toolset.</p>\n\n<h2 id="compile-time-type-checking:7523e14371168feae6a10e37d5f0382f">Compile Time Type Checking</h2>\n\n<p>Compile time type checking (or static type checking) operates on the Swift source code. The Swift compiler looks at explicitly stated and inferred types and ensures correctness of our type constraints.</p>\n\n<p>Here’s a trivial example of static type checking:\n</p>\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">text</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87">String</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #4e9a06">""</span>\n<span style="color: #8f5902; font-style: italic">// Compile Error: Cannot convert value of </span>\n<span style="color: #8f5902; font-style: italic">// type 'String' to specified type 'Int'</span>\n<span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">number</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87">Int</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">text</span>\n</pre></div>\n\n\n<p>Based on the source code the type checker can decide that <code>text</code> is not of type <code>Int</code> - therefore it will raise a compile error.</p>\n\n<p>Swift’s static type checker can do a lot more powerful things, e.g. verifying generic constraints:</p>\n\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">protocol</span> <span style="color: #000000">HasName</span> <span style="color: #000000; font-weight: bold">{}</span>\n<span style="color: #204a87; font-weight: bold">protocol</span> <span style="color: #000000">HumanType</span> <span style="color: #000000; font-weight: bold">{}</span>\n\n<span style="color: #204a87; font-weight: bold">struct</span> <span style="color: #000000">User</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">HasName</span><span style="color: #000000; font-weight: bold">,</span> <span style="color: #000000">HumanType</span> <span style="color: #000000; font-weight: bold">{</span> <span style="color: #000000; font-weight: bold">}</span>\n<span style="color: #204a87; font-weight: bold">struct</span> <span style="color: #000000">Visitor</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">HasName</span><span style="color: #000000; font-weight: bold">,</span> <span style="color: #000000">HumanType</span> <span style="color: #000000; font-weight: bold">{</span> <span style="color: #000000; font-weight: bold">}</span>\n<span style="color: #204a87; font-weight: bold">struct</span> <span style="color: #000000">Car</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">HasName</span> <span style="color: #000000; font-weight: bold">{}</span>\n\n<span style="color: #8f5902; font-style: italic">// Require a type that is both human and provides a name</span>\n<span style="color: #204a87; font-weight: bold">func</span> <span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">&lt;</span><span style="color: #000000">T</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87; font-weight: bold">protocol</span><span style="color: #000000; font-weight: bold">&lt;</span><span style="color: #000000">HumanType</span><span style="color: #000000; font-weight: bold">,</span> <span style="color: #000000">HasName</span><span style="color: #000000; font-weight: bold">&gt;</span><span style="color: #ce5c00; font-weight: bold">&gt;</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">thing</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">T</span><span style="color: #000000; font-weight: bold">)</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #8f5902; font-style: italic">// ...</span>\n<span style="color: #000000; font-weight: bold">}</span>\n\n<span style="color: #8f5902; font-style: italic">// Compiles fine:</span>\n<span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">User</span><span style="color: #000000; font-weight: bold">())</span>\n<span style="color: #8f5902; font-style: italic">// Compiles fine:</span>\n<span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">Visitor</span><span style="color: #000000; font-weight: bold">())</span>\n<span style="color: #8f5902; font-style: italic">// Compile Error: cannot invoke 'printHumanName' with an </span>\n<span style="color: #8f5902; font-style: italic">// argument list of type '(Car)'</span>\n<span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">Car</span><span style="color: #000000; font-weight: bold">())</span>\n</pre></div>\n\n\n<p>In this example, again, all of the type checking occurs at compile time, solely based on the source code. The swift compiler can verify which function calls provide arguments that match the generic constraints of the <code>printHumanName</code> function; and for ones that don’t it can emit a compile error.</p>\n\n<p>Since Swift’s static type system offers these powerful tools we try to verify as much as possible at compile time. However, in same cases run time type verification is necessary.</p>\n\n<h2 id="run-time-type-checking:7523e14371168feae6a10e37d5f0382f">Run Time Type Checking</h2>\n\n<p>In some unfortunate cases relying on static type checking is not possible. The most common example is reading data from an outside resource (network, database, etc.). In such cases the data and thus the type information is not part of the source code, therefore we cannot prove to the static type checker that our data has a specific type (since the static type checker can only operate on type information it can extract from our source code).</p>\n\n<p>This means instead of being able to <em>define</em> a type statically, we need to <em>verify</em> a type dynamically at run time.</p>\n\n<p>When checking types at run time we rely on the type metadata stored within the memory of all Swift instances). The only tools we have available at this stage are the <code>is</code> and <code>as</code> keywords that use that metadata to confirm whether or not the instance is of a certain type or conforms to a certain protocol.</p>\n\n<p>This is what all the different Swift JSON mapping libraries do - they provide a convenient API for dynamically casting an unknown type to one that matches the type of a specified variable.</p>\n\n<p>In many scenarios dynamic type checking enables us to integrate types that are unknown at compile time with our statically checked Swift code:</p>\n\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">func</span> <span style="color: #000000">takesHuman</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">human</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">HumanType</span><span style="color: #000000; font-weight: bold">)</span> <span style="color: #000000; font-weight: bold">{}</span>\n\n<span style="color: #204a87; font-weight: bold">var</span> <span style="color: #000000">unknownData</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87">Any</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">User</span><span style="color: #000000; font-weight: bold">()</span>\n\n<span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">unknownData</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">unknownData</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #000000">HumanType</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #000000">takesHuman</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">unknownData</span><span style="color: #000000; font-weight: bold">)</span>\n<span style="color: #000000; font-weight: bold">}</span>\n</pre></div>\n\n\n<p>All we need to do in order to call the function with <code>unknownData</code> is to cast it to the argument type of the function.</p>\n\n<p>However, if we try to use this approach to call a function that defines arguments as generic constraints, we run into issues…</p>\n\n<h2 id="combining-dynamic-and-static-type-checking:7523e14371168feae6a10e37d5f0382f">Combining Dynamic and Static Type Checking</h2>\n\n<p>Continuing the earlier <code>printHumanName</code> example, let’s assume we have received data from a network request, and we need to call the <code>printHumanName</code> method - if the dynamically detected type allows us to do that.</p>\n\n<p>We know that our type needs to conform to two different protocols in order to be eligible as argument for the <code>printHumanName</code> function. So let’s check that requirement dynamically:</p>\n\n<p></p>\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">var</span> <span style="color: #000000">unknownData</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87">Any</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">User</span><span style="color: #000000; font-weight: bold">()</span>\n\n<span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">unknownData</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">unknownData</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #204a87; font-weight: bold">protocol</span><span style="color: #000000; font-weight: bold">&lt;</span><span style="color: #000000">HumanType</span><span style="color: #000000; font-weight: bold">,</span> <span style="color: #000000">HasName</span><span style="color: #000000; font-weight: bold">&gt;</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #8f5902; font-style: italic">// Compile Error: cannot invoke 'printHumanName' </span>\n    <span style="color: #8f5902; font-style: italic">// with an argument list of type '(protocol&lt;HasName, HumanType&gt;)'</span>\n    <span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">unknownData</span><span style="color: #000000; font-weight: bold">)</span>\n<span style="color: #000000; font-weight: bold">}</span>\n</pre></div>\n\n\n<p>The dynamic type check in the above example actually works correctly. The body of the <code>if let</code> block is only executed for types that conform to our two expected protocols. However, we cannot convey this to the compiler. The compiler expects a <em>concrete</em> type (one that has a fully specified type at compile time) that conforms to <code>HumanType</code> and <code>HasName</code>. All we can offer is a dynamically verified type.</p>\n\n<p>As of Swift 2.2, there is no way to get this to compile. At the end of this post I will briefly touch on which changes to Swift would likely be necessary to make this approach work.</p>\n\n<p>For now, we need a workaround.</p>\n\n<h3 id="workarounds:7523e14371168feae6a10e37d5f0382f">Workarounds</h3>\n\n<p>In the past I’ve used one of these two approaches:</p>\n\n<ul>\n<li>Cast <code>unknowndData</code> to a concrete type instead of casting it to a protocol</li>\n<li>Provide a second implementation of <code>printHumanName</code> without generic constraints</li>\n</ul>\n<p>The concrete type solution would look something like this:</p>\n\n<p></p>\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">user</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">unknownData</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #000000">User</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">user</span><span style="color: #000000; font-weight: bold">)</span>\n<span style="color: #000000; font-weight: bold">}</span> <span style="color: #204a87; font-weight: bold">else</span> <span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">visitor</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">unknownData</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #000000">Visitor</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">visitor</span><span style="color: #000000; font-weight: bold">)</span>\n<span style="color: #000000; font-weight: bold">}</span>\n</pre></div>\n\n\n<p>Not beautiful; but it might the best possible solution in some cases.</p>\n\n<p>A solution that involves providing a second implementation of <code>printHumanName</code> might look like this (though there are many other possible solutions):</p>\n\n<p></p>\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">func</span> <span style="color: #000000">_printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">thing</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #204a87">Any</span><span style="color: #000000; font-weight: bold">)</span> <span style="color: #000000; font-weight: bold">{</span>\n    <span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000">hasName</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">thing</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #000000">HasName</span> <span style="color: #204a87; font-weight: bold">where</span> <span style="color: #000000">thing</span> <span style="color: #204a87; font-weight: bold">is</span> <span style="color: #000000">HumanType</span> <span style="color: #000000; font-weight: bold">{</span>\n        <span style="color: #8f5902; font-style: italic">// Put implementation code here</span>\n        <span style="color: #8f5902; font-style: italic">// Or call a third function that is shared between</span>\n        <span style="color: #8f5902; font-style: italic">// both implementations of `printHumanName`</span>\n    <span style="color: #000000; font-weight: bold">}</span> <span style="color: #204a87; font-weight: bold">else</span> <span style="color: #000000; font-weight: bold">{</span>\n        <span style="color: #3465a4">fatalError</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #4e9a06">"Provided Incorrect Type"</span><span style="color: #000000; font-weight: bold">)</span>\n    <span style="color: #000000; font-weight: bold">}</span>\n<span style="color: #000000; font-weight: bold">}</span>\n\n<span style="color: #000000">_printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">unknownData</span><span style="color: #000000; font-weight: bold">)</span>\n</pre></div>\n\n\n<p>In this second solution we have substituted the compile time constraints for a run time check. We cast the <code>Any</code> type to <code>HasName</code>, that allows us to access the relevant information for printing a name, and we include an <code>is</code> check to verify that the type is one that conforms to <code>HumanType</code>. We have established a dynamic type check that is equivalent to our generic constraint.</p>\n\n<p>This way we have offered a second implementation that will run code dynamically, if an arbitrary type matches our protocol requirements. In practice I would extract the actual functionality of this function into a third function that gets called from both <code>printHumanName</code> and <code>_printHumanName</code> - that way we can avoid duplicate code.</p>\n\n<p>The solution of the “type erased” function that accept an <code>Any</code> argument isn’t really nice either; but in practice I have used similar approaches in cases where other code guarantees that the function will be called with the correct type, but there wasn’t a way of expressing that within Swift’s type system.</p>\n\n<h2 id="conclusion:7523e14371168feae6a10e37d5f0382f">Conclusion</h2>\n\n<p>The examples above are extremely simplified, but I hope they demonstrate the issues that can arise from differences in compile time and run time type checking. The key takeaways are:</p>\n\n<ul>\n<li>The static type checker runs at compile time, operates on the source code and uses type annotations and constraints for type checking</li>\n<li>The dynamic type checker uses run time information and casting for type checking</li>\n<li>\n<strong>We cannot cast a an argument dynamically, in order call a function that has generic constraints</strong>.</li>\n</ul>\n<p>Is there potential for adding support for this to Swift? I think we would need the ability to dynamically create &amp; use a constrained metatype. One could imagine a syntax that looks somewhat like this:</p>\n\n<p></p>\n<div class="highlight" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #204a87; font-weight: bold">if</span> <span style="color: #204a87; font-weight: bold">let</span> <span style="color: #000000; font-weight: bold">&lt;</span><span style="color: #000000">T</span><span style="color: #000000; font-weight: bold">:</span> <span style="color: #000000">HumanType</span><span style="color: #000000; font-weight: bold">,</span> <span style="color: #000000">HasName</span><span style="color: #000000; font-weight: bold">&gt;</span> <span style="color: #000000">value</span> <span style="color: #000000; font-weight: bold">=</span> <span style="color: #000000">unknownData</span> <span style="color: #204a87; font-weight: bold">as</span><span style="color: #000000; font-weight: bold">?</span> <span style="color: #000000">T</span> <span style="color: #000000; font-weight: bold">{</span>\n\t<span style="color: #000000">printHumanName</span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">value</span><span style="color: #000000; font-weight: bold">)</span>\n<span style="color: #000000; font-weight: bold">}</span>\n</pre></div>\n\n\n<p>I know too little about the Swift compiler to know if this is feasible at all. I would assume that the relative cost of implementing this is huge, compared to the benefits it would provide to a very small part of the average Swift codebase.</p>\n\n<p>However, according to this <a href="http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol">Stack Overflow answer</a> by <a href="https://twitter.com/Catfish_Man">David Smith</a>, Swift currently checks generic constraints at run time (unless the compiler generates specialized copies of a function for performance optimizations). This means the information about generic constraints is still available at run time and, at least in theory, the idea of dynamically created constrained metatypes might be possible.</p>\n\n<p>For now it is helpful to understand the limitations of mixing static and dynamic type checking and to be aware of the possible workarounds.</p>\n\n<p>I cannot finish this post without a fabulous quote from <a href="https://twitter.com/AirspeedSwift">@AirspeedSwift</a>:</p>\n\n<blockquote>\n<p>Runtime type checking and compile-time generics are like steak and ice-cream - both are nice but mixing them is a bit weird.\n- <a href="http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol">Source: StackOverflow.com</a></p>\n</blockquote>\n\n<p>If you have corrections or general thoughts on this post, <a href="https://twitter.com/benjaminencz">I would love to hear from you</a>.</p>\n\n<p><strong>Addendum</strong>:</p>\n\n<p>Russ Bishop (in the comments) and Joe Groff (on twitter) pointed out that the idea presented in this post is already being discussed as part of extending Swift’s support for generics. The twitter conversation also revealed that all compile time information is available at runtime, too. This opens the door for exciting extensions to Swift’s type system in future.</p>\n\n<p>The relevant conversation on twitter is here:</p>\n\n<p></p>\n<blockquote class="twitter-tweet" data-lang="en">\n<p lang="en" dir="ltr"><a href="https://twitter.com/xenadu02">@xenadu02</a> <a href="https://twitter.com/benjaminencz">@benjaminencz</a> Everything in the static type system is in the runtime too. Making it all available's a "simple matter of design"</p>— Joe Groff (@jckarter) <a href="https://twitter.com/jckarter/status/720661475405094913">April 14, 2016</a>\n</blockquote>\n	At some point, when learning how to use Swift's type system, it is important to understand that Swift (like many other languages) has two different forms of type checking: static and dynamic. Today I want to briefly discuss the difference between them and why headaches might arise when we try to combine them. Static type checking occurs at compile time and dynamic type checking happens at run time. Each of these two stages come with a different, partially incompatible, toolset. Compile time type checking (or static type checking) operates on the Swift source code. The Swift compiler looks at explicitly stated and inferred types and ensures correctness of our type constraints. Here's a trivial example of static type checking: Based on the source code the type checker can decide that  is not of type  - therefore it will raise a compile error. Swift's static type checker can do a lot more po	\N	2016-04-23 14:04:03.058419	0	0	alonecoooder741	{00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75}	\N	0
133e1670-ee8e-4adb-97d6-33688d3de585	20	0	patchthecode/JTAppleCalendar: The final Apple calendar you will ever try.	https://github.com/patchthecode/JTAppleCalendar	patchthecode-jtapplecalendar-the-final-apple-calendar-you-will-ever-try	{}	GitHub - patchthecode/JTAppleCalendar: The final Apple calendar you will ever try. Built for iOS in Swift.	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	1	32481	2016-04-26 08:43:25.618338	2016-04-26 08:43:26.15949	1c0226cf-7d6f-4e48-9f07-68caf18b0d9e	{"description":"JTAppleCalendar - The final Apple calendar you will ever try. Built for iOS in Swift.","title":"patchthecode/JTAppleCalendar","url":"https://github.com/patchthecode/JTAppleCalendar","site_name":"GitHub","type":"object","image":"https://avatars3.githubusercontent.com/u/2439146?v=3\\u0026s=400"}	<p><a href="/patchthecode/JTAppleCalendar/blob/master/Images/JTAppleCalendar.jpg" target="_blank"><img src="/patchthecode/JTAppleCalendar/raw/master/Images/JTAppleCalendar.jpg" alt="JTAppleCalendar" style="max-width:100%;"></a></p>\n\n<p>The final iOS calendar control you'll ever try</p>\n\n<p>Inspiration for this control was made possible by Michael @ Karmadust. Want to know how the calendar control works inside out? <a href="http://blog.karmadust.com/lets-create-a-calendar-using-a-uicollectionview/">Check out his KDCalendar tutorial.</a></p>\n\n<p><a href="https://travis-ci.org/patchthecode/JTAppleCalendar"><img src="https://camo.githubusercontent.com/a3b34db7e0c6e65d73bfc4f3aaa5ef799011ab88/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f7061746368746865636f64652f4a544170706c6543616c656e6461722e7376673f7374796c653d666c6174" alt="CI Status" data-canonical-src="http://img.shields.io/travis/patchthecode/JTAppleCalendar.svg?style=flat" style="max-width:100%;"></a> <a href="http://cocoapods.org/pods/JTAppleCalendar"><img src="https://camo.githubusercontent.com/42f9cce501c1ccd6ec6a46054cd14a301fcd6d18/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4a544170706c6543616c656e6461722e7376673f7374796c653d666c6174" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/JTAppleCalendar.svg?style=flat" style="max-width:100%;"></a> <a href="http://cocoapods.org/pods/JTAppleCalendar"><img src="https://camo.githubusercontent.com/d89a1e1d87461e800113fdef07187e56b82541f8/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f4a544170706c6543616c656e6461722e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/JTAppleCalendar.svg?style=flat" style="max-width:100%;"></a> <a href="http://cocoapods.org/pods/JTAppleCalendar"><img src="https://camo.githubusercontent.com/1567810733542ef646fad7e3292b28f6ba59a09f/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4a544170706c6543616c656e6461722e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/JTAppleCalendar.svg?style=flat" style="max-width:100%;"></a></p>\n\n<h3>\n<a id="user-content-about-screenshots" class="anchor" href="#about-screenshots" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>About Screenshots</strong>\n</h3>\n\n<p>Much like a UITableView, because you can design this calendar to look however you want, screenshots will not be an accurate depiction of what this control looks like. You can get inspiration from what people have developed using this control and also post you own images to inspire others <a href="https://github.com/patchthecode/JTAppleCalendar/issues/2">at this link.</a>. A sample iOS application is also included in this project's <a href="https://github.com/patchthecode/JTAppleCalendar">Github Repository</a> to give you an idea of what you can do.</p>\n\n<ul>\n<li>Downloaded it ?</li>\n<li>Tried it ?</li>\n<li>Then don't forget to leave a <a href="/patchthecode/JTAppleCalendar/blob/master/Images/rating.png" target="_blank"><img src="/patchthecode/JTAppleCalendar/raw/master/Images/rating.png" alt="rating" style="max-width:100%;"></a> on Github if you like it. It's needed to make this control #1 :)</li>\n</ul>\n<h3>\n<a id="user-content-features" class="anchor" href="#features" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>Features</strong>\n</h3>\n\n<hr>\n<ul class="task-list">\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Boundary dates - limit the calendar date range</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Week/month mode - show 1 row of weekdays. Or 2, 3 or 6</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Custom cells - make your day-cells look however you want, with any functionality you want</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Custom calendar view - make your calendar look however you want, with what ever functionality you want</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> First Day of week - pick anyday to be first day of the week</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Horizontal or vertical mode</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Ability to scroll to any month by simply using the date</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Ability to design your calendar <a href="https://github.com/patchthecode/JTAppleCalendar/issues/2">however you want.</a> You want it, you build it</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled><a href="http://cocoadocs.org/docsets/JTAppleCalendar">Complete Documentation</a>\n</li>\n</ul>\n<h3>\n<a id="user-content-requirements" class="anchor" href="#requirements" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>Requirements</strong>\n</h3>\n\n<hr>\n<ul>\n<li>iOS 8.0+ </li>\n<li>Xcode 7.2+</li>\n</ul>\n<h3>\n<a id="user-content-communication-on-github" class="anchor" href="#communication-on-github" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>Communication on Github</strong>\n</h3>\n\n<hr>\n<ul>\n<li>Found a bug? open an issue</li>\n<li>Got a cool feature request? open an issue.</li>\n<li>Need a question answered? open an issue</li>\n<li>You can also open an issue if you think something should behave differently </li>\n</ul>\n<h3>\n<a id="user-content-installation-using-cocoapods" class="anchor" href="#installation-using-cocoapods" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>Installation using CocoaPods</strong>\n</h3>\n\n<p>CocoaPods is a dependency manager for Cocoa projects. Cocoapods can be installed with the following command:</p>\n\n<p>$ gem install cocoapods</p>\n\n<blockquote>\n<p>CocoaPods 0.39.0+ is required to build JTAppleCalendar</p>\n</blockquote>\n\n<p>To integrate JTAppleCalendar into your Xcode project using CocoaPods, specify it in your Podfile:</p>\n\n<div class="highlight highlight-source-ruby"><pre>platform <span class="pl-c1">:ios</span>, <span class="pl-s"><span class="pl-pds">'</span>8.0<span class="pl-pds">'</span></span>\nuse_frameworks!\n\npod <span class="pl-s"><span class="pl-pds">'</span>JTAppleCalendar<span class="pl-pds">'</span></span></pre></div>\n\n<p>Then, run the following command at your project location:</p>\n\n<div class="highlight highlight-source-shell"><pre>$ pod install</pre></div>\n\n<h3>\n<a id="user-content-the-problem" class="anchor" href="#the-problem" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>The Problem</strong>\n</h3>\n\n<hr>\n<ol>\n<li>Apple has no calendar control.</li>\n<li>Other calendar projects on Github try to cram every feature into their control, hoping it will meet the programmer's requirements.</li>\n</ol>\n<p>This is an incorrect way to build controls. Do you see Apple building their <code>UITableView</code> by guessing what they think you want the UITableView to look like? No. So neither should we. </p>\n\n<h3>\n<a id="user-content-the-solution-jtapplecalendar" class="anchor" href="#the-solution-jtapplecalendar" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><strong>The Solution: JTAppleCalendar</strong>\n</h3>\n\n<hr>\n<h4>\n<a id="user-content-how-to-setup-the-calendar---quick-tutorial" class="anchor" href="#how-to-setup-the-calendar---quick-tutorial" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>How to setup the calendar - Quick tutorial</h4>\n\n<p>JTAppleCalendar is similar to setting up a UITableView with a custom cell.\n<a href="/patchthecode/JTAppleCalendar/blob/master/Images/CalendarArchitecture.png" target="_blank"><img src="/patchthecode/JTAppleCalendar/raw/master/Images/CalendarArchitecture.png" alt="Calendar Overview" style="max-width:100%;"></a></p>\n\n<p>There are two parts</p>\n\n<h5>\n<a id="user-content-1-the-cell" class="anchor" href="#1-the-cell" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>1. The cell</h5>\n\n<hr>\n<p>Like a UITableView, the cell has 2 parts. </p>\n\n<ul>\n<li>First let's create a new xib file. I'll call mine <em>CellView.xib</em>. I will setup the bare minimum; a single <code>UILabel</code> to show the date. It will be centered with Autolayout constraints. </li>\n</ul>\n<blockquote>\n<p>Do you need more views setup on your cell like: dots, animated selection view, custom images etc? No problem. Design the cell however you want. This repository has sample code which demonstrates how you can do this easily.</p>\n</blockquote>\n\n<p><a href="/patchthecode/JTAppleCalendar/blob/master/Images/cellXib.png" target="_blank"><img src="/patchthecode/JTAppleCalendar/raw/master/Images/cellXib.png" alt="CellView" style="max-width:100%;"></a></p>\n\n<ul>\n<li>Second , create a custom class for the xib. The new class must be a subclass of <code>JTAppleDayCellView</code>. I called mine <em>CellView.swift</em>.  Inside the class setup the following:</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">import</span> <span class="pl-c1">JTAppleCalendar</span> \n    <span class="pl-k">class</span> CellView: JTAppleDayCellView {\n        <span class="pl-k">@IBOutlet</span> <span class="pl-k">var</span> dayLabel: UILabel<span class="pl-k">!</span>\n    }</pre></div>\n\n<ul>\n<li>Finally head back to your <em>cellView.xib</em> file and make the outlet connections.</li>\n<li>First,  select the view for the cell</li>\n<li>Second, click on the identity inspector</li>\n<li>Third, change the name of the class to one you just created: <em>CellView</em>\n</li>\n<li>Then connect your UILabel to your <code>dayLabel</code> outlet</li>\n</ul>\n<p><a href="/patchthecode/JTAppleCalendar/blob/master/Images/setupInstructions.png" target="_blank"><img src="/patchthecode/JTAppleCalendar/raw/master/Images/setupInstructions.png" alt="Instructions" style="max-width:100%;"></a></p>\n\n<h5>\n<a id="user-content-2-the-calendarview" class="anchor" href="#2-the-calendarview" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>2. The calendarView</h5>\n\n<hr>\n<ul>\n<li>This step is easy. Go to your Storyboard and add a <code>UIView</code> to it. Set the class of the view to be <code>JTAppleCalendarView</code>. Then setup an outlet for it to your viewController. You can setupup your autolayout constrainst for the calendar view at this point.</li>\n</ul>\n<h5>\n<a id="user-content-whats-next" class="anchor" href="#whats-next" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Whats next?</h5>\n\n<p>Similar to UITableView protocls, your viewController has to conform to 2 protocols for it to work</p>\n\n<ul>\n<li>JTAppleCalendarViewDataSource</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-c">// This method is required. You provide a startDate, endDate, and a calendar configured to your liking.</span>\n    <span class="pl-k">func</span> <span class="pl-en">configureCalendar</span>(calendar: JTAppleCalendarView) <span class="pl-k">-&gt;</span> (startDate: NSDate, endDate: NSDate, calendar: NSCalendar)</pre></div>\n\n<ul>\n<li>JTAppleCalendarViewDelegate</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-c">// These methods are optional.</span>\n    <span class="pl-c">// I tried to keep them as close to UITableView protocols as possible to keep them self descriptive</span>\n\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">canSelectDate</span> <span class="pl-smi">date</span> <span class="pl-k">:</span> NSDate, cell: JTAppleDayCellView, cellState: CellState) <span class="pl-k">-&gt;</span> <span class="pl-c1">Bool</span>\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">canDeselectDate</span> <span class="pl-smi">date</span> <span class="pl-k">:</span> NSDate, cell: JTAppleDayCellView, cellState: CellState) <span class="pl-k">-&gt;</span> <span class="pl-c1">Bool</span>\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">didSelectDate</span> <span class="pl-smi">date</span> <span class="pl-k">:</span> NSDate, cell: JTAppleDayCellView?, cellState: CellState) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span>\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">didDeselectDate</span> <span class="pl-smi">date</span> <span class="pl-k">:</span> NSDate, cell: JTAppleDayCellView?, cellState: CellState) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span>\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">didScrollToDateSegmentStartingWith</span> <span class="pl-smi">date</span>: NSDate?, endingWithDate: NSDate?) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span>\n    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar <span class="pl-k">:</span> JTAppleCalendarView, <span class="pl-en">isAboutToDisplayCell</span> <span class="pl-smi">cell</span>: JTAppleDayCellView, date:NSDate, cellState: CellState) <span class="pl-k">-&gt;</span> <span class="pl-c1">Void</span></pre></div>\n\n<h5>\n<a id="user-content-setting-up-the-delegate-methods" class="anchor" href="#setting-up-the-delegate-methods" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Setting up the delegate methods</h5>\n\n<p>Lets setup the delegate methods in your viewController. I have called my viewController simply <code>ViewController</code>. I prefer setting up my protocols on my controllers using extensions to keep my code neat, but you can put it where ever youre accustomed to. This function needs 3 variables returned. </p>\n\n<ul>\n<li>Start boundary date </li>\n<li>End boundary date </li>\n<li>Calendar which you should configure to the time zone of your liking.</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> ViewController: JTAppleCalendarViewDataSource, JTAppleCalendarViewDelegate  {\n    <span class="pl-c">// Setting up manditory protocol method </span>\n    <span class="pl-k">func</span> <span class="pl-en">configureCalendar</span>(calendar: JTAppleCalendarView) <span class="pl-k">-&gt;</span> (startDate: NSDate, endDate: NSDate, calendar: NSCalendar) {\n        <span class="pl-k">let</span> startDateComponents <span class="pl-k">=</span> NSDateComponents()\n        startDateComponents<span class="pl-k">.</span>month <span class="pl-k">=</span> <span class="pl-c1">-2</span>\n        <span class="pl-k">let</span> today <span class="pl-k">=</span> NSDate()\n        <span class="pl-k">let</span> firstDate <span class="pl-k">=</span> NSCalendar<span class="pl-k">.</span>currentCalendar()<span class="pl-k">.</span>dateByAddingComponents(startDateComponents, toDate: today, options: NSCalendarOptions())\n\n        <span class="pl-k">let</span> endDateComponents <span class="pl-k">=</span> NSDateComponents()\n        endDateComponents<span class="pl-k">.</span>month <span class="pl-k">=</span> <span class="pl-c1">1</span>\n        <span class="pl-k">let</span> secondDate <span class="pl-k">=</span> NSCalendar<span class="pl-k">.</span>currentCalendar()<span class="pl-k">.</span>dateByAddingComponents(endDateComponents, toDate: today, options: NSCalendarOptions())\n\n        <span class="pl-k">let</span> calendar <span class="pl-k">=</span> NSCalendar<span class="pl-k">.</span>currentCalendar()\n        <span class="pl-k">return</span> (startDate: firstDate<span class="pl-k">!</span>, endDate: secondDate<span class="pl-k">!</span>, calendar: calendar)\n    }\n}</pre></div>\n\n<p>Now that JTAppleCalendar knows its <code>startDate</code>, <code>endDate</code>, and <code>calendarFormat</code>, Let's setup up the protocol method to allow us to see the beautiful date cells we have designed earlier.</p>\n\n<p>Just like UITableViewCell is about to be displayed on a tableView protocol method, so is this JTAppleDayCellView about to be displayed. We will now apply some custom configuration to our cell before it is displayed on screen. Add the following code to your extension. </p>\n\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">func</span> <span class="pl-en">calendar</span>(calendar: JTAppleCalendarView, <span class="pl-en">isAboutToDisplayCell</span> <span class="pl-smi">cell</span>: JTAppleDayCellView, date: NSDate, cellState: CellState) {\n        (cell <span class="pl-k">as!</span> CellView)<span class="pl-k">.</span>setupCellBeforeDisplay(cellState, date: date)\n    }</pre></div>\n\n<p>Now you have not declared the function <code>setupCellBeforeDisplay:date:</code> on your custom CellView class as yet, so let's head over to that class and implement it. Setup the following code shown below.</p>\n\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">import</span> <span class="pl-c1">JTAppleCalendar</span>\n\n    <span class="pl-k">class</span> CellView: JTAppleDayCellView {\n        <span class="pl-k">@IBOutlet</span> <span class="pl-k">var</span> dayLabel: UILabel<span class="pl-k">!</span>\n            <span class="pl-k">var</span> normalDayColor <span class="pl-k">=</span> UIColor<span class="pl-k">.</span>blackColor()\n            <span class="pl-k">var</span> weekendDayColor <span class="pl-k">=</span> UIColor<span class="pl-k">.</span>grayColor()\n\n\n            <span class="pl-k">func</span> <span class="pl-en">setupCellBeforeDisplay</span>(cellState: CellState, date: NSDate) {\n                <span class="pl-c">// Setup Cell text</span>\n                dayLabel<span class="pl-k">.</span>text <span class="pl-k">=</span>  cellState<span class="pl-k">.</span>text\n\n                <span class="pl-c">// Setup text color</span>\n                configureTextColor(cellState)\n            }\n\n            <span class="pl-k">func</span> <span class="pl-en">configureTextColor</span>(cellState: CellState) {\n                <span class="pl-k">if</span> cellState<span class="pl-k">.</span>dateBelongsTo <span class="pl-k">==</span> <span class="pl-k">.</span>ThisMonth {\n                    dayLabel<span class="pl-k">.</span>textColor <span class="pl-k">=</span> normalDayColor\n                } <span class="pl-k">else</span> {\n                    dayLabel<span class="pl-k">.</span>textColor <span class="pl-k">=</span> weekendDayColor\n            }\n        }\n    }</pre></div>\n\n<p>Your cell now has the ability to display text and color based on which day of the week it is. One final thing needs to be done. The Calender does not have its delegate and datasource setup.  Head to your <code>ViewController</code> class, and add following code:</p>\n\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">@IBOutlet</span> <span class="pl-k">weak</span> <span class="pl-k">var</span> calendarView: JTAppleCalendarView<span class="pl-k">!</span> <span class="pl-c">// Don't forget to hook up the outlet to your calendarView on Storyboard</span>\n    <span class="pl-k">override</span> <span class="pl-k">func</span> <span class="pl-en">viewDidLoad</span>() {\n        <span class="pl-k">super</span><span class="pl-k">.</span>viewDidLoad()\n            <span class="pl-k">self</span><span class="pl-k">.</span>calendarView<span class="pl-k">.</span>dataSource <span class="pl-k">=</span> <span class="pl-k">self</span>\n            <span class="pl-k">self</span><span class="pl-k">.</span>calendarView<span class="pl-k">.</span>delegate <span class="pl-k">=</span> <span class="pl-k">self</span>\n            <span class="pl-k">self</span><span class="pl-k">.</span>calendarView<span class="pl-k">.</span>registerCellViewXib(fileName: <span class="pl-s"><span class="pl-pds">"</span>CellView<span class="pl-pds">"</span></span>)\n        }</pre></div>\n\n<h4>\n<a id="user-content-completed-where-to-go-from-here" class="anchor" href="#completed-where-to-go-from-here" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Completed! Where to go from here?</h4>\n\n<hr>\n<p>Create all the other views on your xib that you need. Dots view, customWhatEverView etc. Then create the functionality of it just like you did in the example above.\nIf you're really out of ideas, using the same procedure above, why not try to create a background circular shaped SelectedView to appear when ever you tap on a date cell? You can also download the example project on Github and see the possibilities. </p>\n\n<h4>\n<a id="user-content-other-propertiesfunctionsstructs-to-help-configure-your-calendar" class="anchor" href="#other-propertiesfunctionsstructs-to-help-configure-your-calendar" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Other properties/functions/structs to help configure your calendar</h4>\n\n<p>The following structure was returned when a cell is about to be displayed.</p>\n\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">public</span> <span class="pl-k">enum</span> DateOwner: <span class="pl-c1">Int</span> {\n        <span class="pl-k">case</span> ThisMonth <span class="pl-k">=</span> <span class="pl-c1">0</span>, PreviousMonthWithinBoundary, PreviousMonthOutsideBoundary, FollowingMonthWithinBoundary, FollowingMonthOutsideBoundary\n    }</pre></div>\n\n<ul>\n<li>\n<code>.ThisMonth</code> = the date to be displayed belongs to the month section</li>\n<li>\n<code>.PreviousMonthWithinBoundary</code> = date belongs to the previous month, and it is within the date boundary you set</li>\n<li>\n<code>.PreviousMonthOutsideBoundary</code> = date belongs to previous month, and it is outside the boundary you have set</li>\n<li>\n<code>.FollowingMonthWithinBoundary</code> = date belongs to following month, within boundary</li>\n<li>\n<code>.FollowingMonthOutsideBoundary</code> = date belongs to following month, outside boundary</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">changeNumberOfRowsPerMonthTo</span>(number: <span class="pl-c1">Int</span>, <span class="pl-en">withFocusDate</span> <span class="pl-smi">date</span>: NSDate?) // After switching the number of rows shown, pick a date to autofocus on\n    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">reloadData</span>()\n    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">scrollToNextSegment</span>(animateScroll: <span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>, completionHandler:(()<span class="pl-k">-&gt;</span><span class="pl-c1">Void</span>)? = nil) \n    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">scrollToPreviousSegment</span>(animateScroll: <span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>, completionHandler:(()<span class="pl-k">-&gt;</span><span class="pl-c1">Void</span>)? = nil)\n    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">scrollToDate</span>(date: NSDate, animateScroll: <span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>, completionHandler:(()<span class="pl-k">-&gt;</span><span class="pl-c1">Void</span>)? = nil)\n    <span class="pl-k">public</span> <span class="pl-k">func</span> <span class="pl-en">selectDates</span>(dates: [NSDate], triggerSelectionDelegate: <span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>\n\n<h4>\n<a id="user-content-properties-you-can-configure" class="anchor" href="#properties-you-can-configure" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Properties you can configure</h4>\n\n<ul>\n<li>allowsMultipleSelection</li>\n<li>animationsEnabled</li>\n<li>bufferTop</li>\n<li>bufferBottom</li>\n<li>cellInset</li>\n<li>direction</li>\n<li>firstDayOfWeek</li>\n<li>numberOfRowsPerMonth</li>\n</ul>\n<p>Other functions/properties are coming. This is a very active project.</p>\n\n<p>JTAppleCalendar is available through <a href="https://cocoapods.org/pods/JTAppleCalendar">CocoaPods</a>. To install\nit, simply add the following line to your Podfile:</p>\n\n<div class="highlight highlight-source-ruby"><pre>pod <span class="pl-s"><span class="pl-pds">'</span>JTAppleCalendar<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>~&gt; 2.1.0<span class="pl-pds">'</span></span></pre></div>\n\n<h2>\n<a id="user-content-author" class="anchor" href="#author" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Author</h2>\n\n<p>JayT, <a href="mailto:patchthecode@gmail.com">patchthecode@gmail.com</a></p>\n\n<h2>\n<a id="user-content-license" class="anchor" href="#license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>License</h2>\n\n<p>JTAppleCalendar is available under the MIT license. See the LICENSE file for more info.</p>\n	The final iOS calendar control you'll ever try Inspiration for this control was made possible by Michael @ Karmadust. Want to know how the calendar control works inside out? Check out his KDCalendar tutorial. Much like a UITableView, because you can design this calendar to look however you want, screenshots will not be an accurate depiction of what this control looks like. You can get inspiration from what people have developed using this control and also post you own images to inspire others at this link.. A sample iOS application is also included in this project's Github Repository to give you an idea of what you can do. CocoaPods is a dependency manager for Cocoa projects. Cocoapods can be installed with the following command: $ gem install cocoapods CocoaPods 0.39.0+ is required to build JTAppleCalendar To integrate JTAppleCalendar into your Xcode project using CocoaPods, specify it i	\N	2016-04-26 08:43:25.615258	0	0	ReneLindhorst	{1c0226cf-7d6f-4e48-9f07-68caf18b0d9e}	/patchthecode/JTAppleCalendar/raw/master/Images/JTAppleCalendar.jpg	0
ce640af4-2155-426a-a006-24545bfe3f6a	15	0	Swift Strings	http://andybargh.com/swift-strings/?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	swift-strings	{"version":"1.0","provider_name":"AndyBargh.com","provider_url":"http://andybargh.com","author_name":"Andy Bargh","author_url":"http://andybargh.com/author/abargh/","title":"Swift Strings","type":"rich","width":600,"height":338,"html":"\\u003cblockquote class=\\"wp-embedded-content\\"\\u003e\\u003ca href=\\"http://andybargh.com/swift-strings/\\"\\u003eSwift Strings\\u003c/a\\u003e\\u003c/blockquote\\u003e\\n\\u003cscript type='text/javascript'\\u003e\\n\\u003c!--//--\\u003e\\u003c![CDATA[//\\u003e\\u003c!--\\n\\t\\t!function(a,b){\\"use strict\\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\\"MSIE 10\\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\\\./),i=b.querySelectorAll(\\"iframe.wp-embedded-content\\");for(c=0;c\\u003ci.length;c++)if(d=i[c],!d.getAttribute(\\"data-secret\\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\\"#?secret=\\"+f,d.setAttribute(\\"data-secret\\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\\"security\\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\\"'+d.secret+'\\"]'),k=b.querySelectorAll('blockquote[data-secret=\\"'+d.secret+'\\"]');for(e=0;e\\u003ck.length;e++)k[e].style.display=\\"none\\";for(e=0;e\\u003cj.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\\"style\\"),\\"height\\"===d.message){if(g=parseInt(d.value,10),g\\u003e1e3)g=1e3;else if(200\\u003e~~g)g=200;f.height=g}if(\\"link\\"===d.message)if(h=b.createElement(\\"a\\"),i=b.createElement(\\"a\\"),h.href=f.getAttribute(\\"src\\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\\"message\\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\\"DOMContentLoaded\\",c,!1),a.addEventListener(\\"load\\",c,!1)}(window,document);\\n//--\\u003e\\u003c!]]\\u003e\\n\\u003c/script\\u003e\\u003ciframe sandbox=\\"allow-scripts\\" security=\\"restricted\\" src=\\"http://andybargh.com/swift-strings/embed/\\" width=\\"600\\" height=\\"338\\" title=\\"\\u0026#8220;Swift Strings\\u0026#8221; \\u0026#8212; AndyBargh.com\\" frameborder=\\"0\\" marginwidth=\\"0\\" marginheight=\\"0\\" scrolling=\\"no\\" class=\\"wp-embedded-content\\"\\u003e\\u003c/iframe\\u003e","thumbnail_url":"http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?fit=512%2C512","thumbnail_width":512,"thumbnail_height":512}	Swift Strings - AndyBargh.com	[{"type":"icon","href":"http://i1.wp.com/andybargh.com/wp-content/uploads/2015/10/cropped-Site-Logo.png?fit=180%2C180","sizes":null,"width":null,"height":null}]	andybargh.com	3	32476.4771212999985	2016-04-23 14:04:42.785639	2016-04-23 14:43:06.875872	00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	{"description":"In the last post we looked at the Unicode. In this article, we build on that knowledge and look characters and strings in Swift.","title":"Swift Strings - AndyBargh.com","url":"http://andybargh.com/swift-strings/","site_name":"AndyBargh.com","type":"article","image":"http://andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png"}	<p><img src="http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=512%2C512" alt="Swift Strings" class="aligncenter size-full wp-image-3061" srcset="http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?w=512 512w, http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=150%2C150 150w, http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=300%2C300 300w, http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=100%2C100 100w, http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=45%2C45 45w" sizes="(max-width: 512px) 100vw, 512px" data-recalc-dims="1"></p>\n<p>It's been a while, but in the <a href="http://andybargh.com/unicode/">last post</a>, we looked at the Unicode, the international standard for encoding, representing and handling, text.  In this article, we build on that knowledge and look at how we can handle, process, and manipulate, characters and strings in Swift. Let's start by looking at the smallest building block of most text processing – the <em>character</em>.</p>\n<div id="toc_container" class="toc_wrap_left no_bullets"><ul class="toc_list">\n<li>\n<a href="#String_and_Character_Basics">String and Character Basics</a><ul>\n<li><a href="#What_is_a_Character">What is a Character?</a></li>\n<li><a href="#What_is_a_String">What is a String?</a></li>\n<li><a href="#Value_Types">Value Types</a></li>\n<li><a href="#String_Mutability">String Mutability</a></li>\n</ul>\n</li>\n<li>\n<a href="#Creating_Strings_and_Characters">Creating Strings and Characters</a><ul>\n<li>\n<a href="#Creating_a_String">Creating a String</a><ul>\n<li><a href="#String_Literals">String Literals</a></li>\n<li><a href="#Creating_Empty_Strings">Creating Empty Strings</a></li>\n<li><a href="#Creating_Non-Empty_String_Literals">Creating Non-Empty String Literals</a></li>\n<li><a href="#Special_Characters_in_String_and_Character_Literals">Special Characters in String and Character Literals</a></li>\n<li><a href="#Using_Unicode_Scalars">Using Unicode Scalars</a></li>\n</ul>\n</li>\n<li><a href="#Creating_a_Character">Creating a Character</a></li>\n<li><a href="#Creating_a_String_from_An_Array_of_Characters">Creating a String from An Array of Characters</a></li>\n<li><a href="#Appending_a_Character_to_a_String">Appending a Character to a String</a></li>\n<li><a href="#Concatenating_Strings_and_Characters">Concatenating Strings and Characters</a></li>\n<li><a href="#String_Interpolation">String Interpolation</a></li>\n</ul>\n</li>\n<li>\n<a href="#Checking_the_Length_of_a_String">Checking the Length of a String</a><ul>\n<li><a href="#Checking_If_a_String_is_Empty">Checking If a String is Empty</a></li>\n<li>\n<a href="#The_characters_Property">The characters Property</a><ul><li><a href="#Performance_Implications_of_the_characters_Property">Performance Implications of the characters Property</a></li></ul>\n</li>\n<li><a href="#Counting_the_Number_of_Characters_In_a_String">Counting the Number of Characters In a String</a></li>\n</ul>\n</li>\n<li>\n<a href="#Retrieving_Characters_from_a_String">Retrieving Characters from a String</a><ul>\n<li><a href="#Character_Indices_and_Ranges">Character Indices and Ranges</a></li>\n<li><a href="#Accessing_Characters_Using_Subscript_Notation">Accessing Characters Using Subscript Notation</a></li>\n<li><a href="#Prefix_and_Suffix_Convenience_Methods">Prefix and Suffix Convenience Methods</a></li>\n</ul>\n</li>\n<li>\n<a href="#String_Comparison">String Comparison</a><ul>\n<li><a href="#Checking_for_String_Prefixes_and_Suffixes">Checking for String Prefixes and Suffixes</a></li>\n<li><a href="#String_and_Character_Equality">String and Character Equality</a></li>\n<li><a href="#Sorting_Strings">Sorting Strings</a></li>\n</ul>\n</li>\n<li>\n<a href="#String_Modification_and_Manipulation">String Modification and Manipulation</a><ul>\n<li><a href="#Modifying_Characters_Case">Modifying Characters Case</a></li>\n<li><a href="#Reversing_the_Characters_in_a_String">Reversing the Characters in a String</a></li>\n<li><a href="#Splitting_a_String">Splitting a String</a></li>\n<li><a href="#Inserting_a_Character_Into_a_String">Inserting a Character Into a String</a></li>\n<li><a href="#Inserting_a_String_Into_a_String">Inserting a String Into a String</a></li>\n<li><a href="#Replacing_a_Range_of_a_Characters_in_a_String">Replacing a Range of a Characters in a String</a></li>\n<li><a href="#Removing_a_Character_from_a_String">Removing a Character from a String</a></li>\n<li><a href="#Removing_a_Range_of_Characters_from_a_String">Removing a Range of Characters from a String</a></li>\n<li><a href="#Removing_All_Characters_in_a_String">Removing All Characters in a String</a></li>\n</ul>\n</li>\n<li>\n<a href="#Unicode_String_Representations">Unicode String Representations</a><ul>\n<li><a href="#UTF-8_Representation">UTF-8 Representation</a></li>\n<li><a href="#UTF-16_Representation">UTF-16 Representation</a></li>\n<li><a href="#Unicode_Scalar_Representation">Unicode Scalar Representation</a></li>\n</ul>\n</li>\n<li>\n<a href="#Summary">Summary</a><ul><li><a href="#Related_Posts">Related Posts:</a></li></ul>\n</li>\n</ul></div>\n<h2><span id="String_and_Character_Basics">String and Character Basics</span></h2>\n<h3><span id="What_is_a_Character">What is a Character?</span></h3>\n<p>In Swift, characters are represented using the <code>Character</code> type.</p>\n<p>When rendered each <code>Character</code> value represents a single <em>perceived</em> character or <a href="http://andybargh.com/unicode/#Combining_Character_Sequences"><em>grapheme</em></a>.</p>\n<p>The <code>Character</code> type in Swift is fully compliant with the Unicode standard and conceptually represents an <a href="http://andybargh.com/unicode/#Combining_Character_Sequences"><em>extended grapheme cluster</em></a>.</p>\n<p>You may remember extended grapheme clusters from the previous post.  As we learnt, in Unicode, certain accented characters such as the character <code></code> can be represented in multiple forms – either a single <em>code point</em> such as the character <code></code> (<code>U+00E9 LATIN SMALL LETTER E WITH ACUTE</code>) or as a sequence of two or more code points such as <code>e</code> (<code>U+0065 LATIN SMALL LETTER E</code>) followed by a <code></code> (<code>U+0301 COMBINING ACUTE ACCENT</code>). This latter form is known as a <em>grapheme cluster</em> and graphically combines the two code points together to turn the separate <code>e</code> and <code></code> characters into an <code></code> when rendered in a unicode aware text rendering system. Despite their representational differences under the hood, the Unicode standard does however define these two forms to be <em>canonically equivalent</em> which essentially means they represent the same grapheme.  Whichever form is chosen though, <em>both</em> forms are represented by a single <code>Character</code> value in Swift (meaning that an individual character may consist of one or more code points behind the scenes and therefore does not necessarily have a fixed amount of storage unlike characters in other languages).</p>\n<p>Ok, that's the basic theory of Characters, what about strings?</p>\n<h3><span id="What_is_a_String">What is a String?</span></h3>\n<p>We've all seen strings before. A <em>string</em> in the generic sense is nothing more than a sequence of characters such as those in the phrase <code>"Hello World"</code> or the name <code>"Apple"</code>.  In Swift, strings are represented using the <code>String</code> type.</p>\n<p><code>String</code> values in Swift consist of a sequence of encoding-independent Unicode code points.  What might surprise you though, is that this does not mean that they are simply a collection of <code>Character</code> values (though at one point, this <em>was</em> in fact true).</p>\n<p>Instead, as of Swift 2.0, the <code>String</code> type in Swift doesn't represent it's constituent characters directly but instead provides a number <em>views</em> onto those characters via a number of properties.  These views can then be used to retrieve the strings components in different forms – either as a collection of <code>Character</code> values or in one of a number of other Unicode encoding forms such as UTF-8, UTF-16 and UTF-32. We'll look the Unicode encoding forms in more detail later in this article.</p>\n<p>Note: If your interested, <a href="https://developer.apple.com/swift/blog/?id=30" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://developer.apple.com/swift/blog/?id=30', 'this post');">this post</a> on the Apple Swift blog provides more details behind the rationale for move away from strings being simple collection types.</p>\n<h3><span id="Value_Types">Value Types</span></h3>\n<p>Another thing to note about strings in Swift is that they are <em>value types</em>.  We've not really covered the difference between value types and reference types here on the blog yet but all this really means is that when you pass a <code>String</code> value into a function or method or assigned it to a variable or a constant, Swift first creates a <em>copy</em> of that <code>String</code> which it then passes in rather than supplying a reference to the original.</p>\n<p>We can see this at work in the following example:</p>\n<p></p>\n<div id="crayon-571b80fb5974c380433261" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet firstString = "Hello"\nvar secondString = firstString\nsecondString += " World!"\nprint(firstString)\nprint(secondString)\n// prints "Hello"\n// prints "Hello World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5974c380433261-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5974c380433261-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5974c380433261-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5974c380433261-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb5974c380433261-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5974c380433261-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb5974c380433261-7">7</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5974c380433261-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">firstString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5974c380433261-2">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">secondString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">firstString</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5974c380433261-3">\n<span class="crayon-v">secondString</span><span class="crayon-h"> </span><span class="crayon-o">+=</span><span class="crayon-h"> </span><span class="crayon-s">" World!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5974c380433261-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">firstString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5974c380433261-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">secondString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5974c380433261-6"><span class="crayon-c">// prints "Hello"</span></div>\n<div class="crayon-line" id="crayon-571b80fb5974c380433261-7"><span class="crayon-c">// prints "Hello World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>See how even though we've modified the <code>secondString</code> variable we haven't actually modified the <code>firstString</code> variable? The assignment in the second line of the example actually creates a <em>copy</em> of the string.  This behaviour is known as <em>copy-by-default</em> and helps to clarify the ownership of <code>String</code> values in Swift and helps ensure that individual strings are not changed unexpectedly.</p>\n<p>Now, you might be worried by the idea of all this copying.  After all, copying strings everywhere <em>must</em> have an impact on the performance of your code and you're correct it does – but not in as big a way as you may think.</p>\n<p>In order to be as performant as possible, the Swift compiler optimises things under the hood so that the <code>String</code> values are only copied when absolutely necessary. This means that strings are <em>actually</em> copied when the string is first modified or mutated (for the performant minded amongst you this is an O(N) operation where 'N' is the length of the string's unspecified underlying representation). This approach minimises the performance impact of these copies whilst simultaneously maintaining the additional protection that the copy-by-default behaviour brings.</p>\n<h3><span id="String_Mutability">String Mutability</span></h3>\n<p>When it comes to mutability of the <code>Character</code> and <code>String</code> types in Swift, you'll be glad to hear there are no surprises.</p>\n<p>As with most other data types in Swift, the mutability of a <code>Character</code> or <code>String</code> values are governed by whether they are assign to either variables (in which case they can be mutated) or constants (in which case they can't).  It's no more complicated than that!</p>\n<p>Ok, so that's the theory, let's now have a look at some of the practice.  Let's start by looking at how we actually create <code>Character</code> and <code>String</code> values in Swift.</p>\n<h2><span id="Creating_Strings_and_Characters">Creating Strings and Characters</span></h2>\n<h3><span id="Creating_a_String">Creating a String</span></h3>\n<h4><span id="String_Literals">String Literals</span></h4>\n<p>In Swift, <em>string literals</em> are predefined <code>String</code> values that you can use directly within our source code.  Their name stems from the fact that they are <em>literally</em> written within the source code.</p>\n<p>In general, a string literal in Swift consists of a fixed sequence of zero or more textual characters surrounded by a pair of double quotes (<code>""</code>) and can contain any of the printable characters you may expect (characters, numbers, punctuation etc) along with a number of <em>escaped special characters</em> and unicode scalar values that we'll look at in a moment.</p>\n<h4><span id="Creating_Empty_Strings">Creating Empty Strings</span></h4>\n<p>The simplest form of string literal that you can write is is an <em>empty string literal</em>. Any empty string literal is nothing more than a pair of double quotes (<code>""</code>) (i.e. a string literal containing no characters).</p>\n<p>So why talk about empty strings?  In and of themselves, empty strings aren't the most interesting of things but they can be pretty useful and are often needed as a starting point for constructing larger, longer, more complex strings.</p>\n<p>In Swift, there are two ways in which we can declare and initialise an empty string – using initialiser syntax or by using an empty string literal.</p>\n<p>To declare and initialise a string using initialiser syntax all we have to do is write the <code>String</code> type followed by a set of empty parentheses:</p>\n<p></p>\n<div id="crayon-571b80fb5975e807537614" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar emptyString = String() // Initializer Syntax</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb5975e807537614-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb5975e807537614-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">emptyString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// Initializer Syntax</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>The bonus here is that Swift's type inference mechanism will automatically infer the variable (in this case <code>emptyString</code>) to be of type <code>String</code>.</p>\n<p>In addition to initialiser syntax though, we also have the option of initialising a string by assigning an empty string literal:</p>\n<p></p>\n<div id="crayon-571b80fb59764185275019" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar emptyString1 = "" // String literal</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59764185275019-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59764185275019-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">emptyString1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">""</span><span class="crayon-h"> </span><span class="crayon-c">// String literal</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>The choice is yours as to which you choose as the outcome is exactly the same.</p>\n<h4><span id="Creating_Non-Empty_String_Literals">Creating Non-Empty String Literals</span></h4>\n<p>If we move beyond empty strings, we can also use string literals to initialise a <code>String</code> value with a non-empty string.</p>\n<p>Instead of using the empty string literal all we have to do is assign the string literal we want to initialise the string with:</p>\n<p></p>\n<div id="crayon-571b80fb59769732061030" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar nonEmptyString = "Hello World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59769732061030-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59769732061030-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">nonEmptyString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World!"</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>And hey presto, we have a <code>String</code> value that actually contains a string!  It’s that easy. But that's not all we can do...</p>\n<h4><span id="Special_Characters_in_String_and_Character_Literals">Special Characters in String and Character Literals</span></h4>\n<p>In addition to string literals being able to contain normal printable characters (as in the previous example), string literals can also contain a number of <em>escaped special characters</em>.</p>\n<p>All <em>escaped</em> means in this context is that these characters must be prefixed with a backslash (<code>\\\\</code>) (or <em>escaped</em>) in order to successfully include them within the string literal.</p>\n<p>There are seven escaped characters we can choose from in Swift.  These are:<br> – <code>\\0</code> (null character)<br> – <code>\\\\</code> (backslash)<br> – <code>\\t</code> (horizontal tab)<br> – <code>\\n</code> (line feed)<br> – <code>\\r</code> (carriage return)<br> – <code>\\"</code> (double quote)<br> – <code>\\'</code> (single quote).</p>\n<p>Including them within a string literal is super simple.  All we do is include the backslash and the required character between the double quotes of our string literal and that's it:</p>\n<p></p>\n<div id="crayon-571b80fb5976f109698444" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar secondNonEmptyString = "\\t\\'Hello\\'\\tWorld!"\nprint(secondNonEmptyString)\n// prints "    'Hello'    World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5976f109698444-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5976f109698444-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5976f109698444-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5976f109698444-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">secondNonEmptyString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\t\\'Hello\\'\\tWorld!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5976f109698444-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">secondNonEmptyString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5976f109698444-3"><span class="crayon-c">// prints "    'Hello'    World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h4><span id="Using_Unicode_Scalars">Using Unicode Scalars</span></h4>\n<p>Beyond including escaped characters, string literals in Swift also support the inclusion of arbitrary Unicode scalar values.</p>\n<p>When included within string literals, Unicode scalar values are written in the form <code>\\u{xxxx}</code> where <code>xxxx</code> is a hexadecimal number containing between 1 and 8-digit hexadecimal digits that represents a value equivalent to the corresponding Unicode code point we want to include.</p>\n<p>For example, we could define a string literal containing the Unicode Scalar <code>U+2615 HOT BEVERAGE</code> as follows:</p>\n<p></p>\n<div id="crayon-571b80fb59774800423581" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet hotBeverage = "\\u{2615}" // ""</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59774800423581-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59774800423581-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">hotBeverage</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{2615}"</span><span class="crayon-h"> </span><span class="crayon-c">// ""</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>That all looks good, but one thing you might not notice here is that despite the <code>hotBeverage</code> constant being initialised with just a single unicode scalar value, Swift's type inference mechanism jumps in and infers the <code>hotBeverage</code> constant to be of type <code>String</code> rather than a single <code>Character</code> value. This is great if we want a string, but what if we wanted a <code>Character</code> value instead?  Let's look at that next.</p>\n<h3><span id="Creating_a_Character">Creating a Character</span></h3>\n<p>To create a <code>Character</code> value in Swift, we have a similar range of options to those we just looked at for creating <code>String</code> values – basically <em>initialiser syntax</em> or <em>string literals</em>.</p>\n<p>The <code>Character</code> type in Swift has a range of initialisation functions that accept either a <code>String</code> value, a Unicode scalar value or a sequence of unicode scalar values that collectively form a single grapheme cluster.</p>\n<p>For example, in the following code snippet I'm using the initialisation function that accepts a <code>String</code> value (in this case a string literal containing a single character):</p>\n<p></p>\n<div id="crayon-571b80fb5977a345370562" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet exclamationMark = Character("!")</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb5977a345370562-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb5977a345370562-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">exclamationMark</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Character</span><span class="crayon-sy">(</span><span class="crayon-s">"!"</span><span class="crayon-sy">)</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>In addition to initialisation syntax, we can also create a <code>Character</code> value using a string literal.  However, with this route things are a little more tricky.</p>\n<p>As we've seen, by default, Swift's type inference mechanism infers any text between a pair of double quotes to be a <code>String</code> value (hence the term <em>string literal</em>).  If we were to just assign a string literal to a new variable or constant directly (as we did in the previous section) Swift will automatically infer the constant or variable to be of type <code>String</code>.</p>\n<p>To force Swift to create a <code>Character</code> value instead, we therefore have to include the <code>Character</code> type annotation to explicitly tell Swift what we a <code>Character</code> rather than a <code>String</code>:</p>\n<p></p>\n<div id="crayon-571b80fb5977f901937564" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet constantCharacter : Character = "A"\nvar variableCharacter : Character = "b"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5977f901937564-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5977f901937564-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5977f901937564-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">constantCharacter</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"A"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5977f901937564-2">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">variableCharacter</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"b"</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>When initialising a <code>Character</code> value using a string literal in addition to using a string literal containing a single printable character as we saw above we also have the option of assigning a string literal that contains one or more unicode scalar values.  We saw how to include unicode scalar values within a string literal just now. There is one big caveat here though.</p>\n<p>When assigning a string literal that contains multiple unicode scalar values we have to be really careful with that string literal to ensure that value the <code>Character</code> is initialised with is actually a single grapheme cluster.</p>\n<p>As I've said, the <code>Character</code> type in Swift can only contain a single grapheme cluster and if we try to initialise it with something that isn't (say two grapheme clusters instead of one), the compiler will raise an error.</p>\n<p>When using string literals containing printable characters checking that we assign only a single character is relatively simple. When using a string literal that contains multiple unicode scalar values though, it's relatively easy to fall foul of this little trap. The following couple of examples illustrate the problem.</p>\n<p>This first example below is actually a valid declaration and initialisation.  Here, I use to Unicode Scalar values (<code>U+2615 HOT BEVERAGE</code> and <code>U+FE0F VARIATION SELECTOR-16</code>) which combine to produce a single grapheme which is then used to initialise the <code>hotBeverage</code> constant:</p>\n<p></p>\n<div id="crayon-571b80fb59785672304045" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet hotBeverage : Character = "\\u{2615}\\u{FE0F}" // ""</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59785672304045-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59785672304045-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">hotBeverage</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{2615}\\u{FE0F}"</span><span class="crayon-h"> </span><span class="crayon-c">// ""</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>But the following example (<code>U+2615 HOT BEVERAGE</code>, <code>U+1F1EC REGIONAL INDICATOR SYMBOL LETTER G</code> and <code>U+1F1E7 REGIONAL INDICATOR SYMBOL LETTER B</code>), would be <em>invalid</em> as the Unicode Scalars actually result in two grapheme clusters:</p>\n<p></p>\n<div id="crayon-571b80fb5978a411705038" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet invalidCharacter : Character = "\\u{2615}\\u{1F1EC}\\u{1F1E7}" \n// Raises a compiler error.</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5978a411705038-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5978a411705038-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5978a411705038-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">invalidCharacter</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{2615}\\u{1F1EC}\\u{1F1E7}"</span><span class="crayon-h"> </span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5978a411705038-2"><span class="crayon-c">// Raises a compiler error.</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>There one unicode scalar different, but that difference is all important.</p>\n<p>Here's another example – again a <em>valid</em> one. This one might surprise you about why it is valid but I gave you a hint about why this is the case in the <a href="http://andybargh.com/unicode/">previous post</a>:</p>\n<p></p>\n<div id="crayon-571b80fb59796774685412" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet combinedFlags : Character = "\\u{1F1FA}\\u{1F1F8}\\u{1F1EC}\\u{1F1E7}" // ""</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59796774685412-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59796774685412-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">combinedFlags</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{1F1FA}\\u{1F1F8}\\u{1F1EC}\\u{1F1E7}"</span><span class="crayon-h"> </span><span class="crayon-c">// ""</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Ok, let's move on.</p>\n<h3><span id="Creating_a_String_from_An_Array_of_Characters">Creating a String from An Array of Characters</span></h3>\n<p>In addition to the <code>String</code> initialisation syntax we saw earlier, the <code>String</code> type also has one more initialisation method I wanted to mention – that of using an array of <code>Character</code> values to initialise the <code>String</code>.</p>\n<p>I'm not sure this approach particularly falls into the convenience camp as it is normally more convenient to use string literals but it's there should you need it:</p>\n<p></p>\n<div id="crayon-571b80fb5979b899527927" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet worldCharacters: [Character] = ["W", "o", "r", "l", "d"]\nlet worldString = String(worldCharacters)\nprint(worldString)\n// Prints "World"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5979b899527927-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5979b899527927-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5979b899527927-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5979b899527927-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5979b899527927-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">worldCharacters</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-v">Character</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-s">"W"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"o"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"r"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"l"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-s">"d"</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5979b899527927-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">worldString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">worldCharacters</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5979b899527927-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">worldString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5979b899527927-4"><span class="crayon-c">// Prints "World"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Ok, so we've looked at how to declare and initialise <code>Character</code> and <code>String</code> values, let next look at how we can combine characters and strings to create new values.  We'll start by looking at how to append a character to an existing string.</p>\n<h3><span id="Appending_a_Character_to_a_String">Appending a Character to a String</span></h3>\n<p>To append a <code>Character</code> value to an existing <code>String</code> value we use the <code>append(_:)</code> method.</p>\n<p>The <code>append(_:)</code> method is pretty simple and takes a single parameter of type <code>Character</code> which will be appended to the <code>String</code> value to create a new <code>String</code>:</p>\n<p></p>\n<div id="crayon-571b80fb597a1159661808" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet exclamationMark : Character = "!"\nstring3.append(exclamationMark)\nprint(string3)\n// prints "Hello World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597a1159661808-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597a1159661808-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597a1159661808-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597a1159661808-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597a1159661808-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">exclamationMark</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">Character</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597a1159661808-2">\n<span class="crayon-v">string3</span><span class="crayon-sy">.</span><span class="crayon-v ">append</span><span class="crayon-sy">(</span><span class="crayon-v">exclamationMark</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597a1159661808-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">string3</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597a1159661808-4"><span class="crayon-c">// prints "Hello World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>A thing to note here is that there is no corresponding <code>append(_:)</code> function for the <code>Character</code> type.  As we've discussed, a <code>Character</code> value <code>Character</code> values in Swift can <em>only</em> contain a <em>single</em> character so appending a <code>Character</code> to another <code>Character</code> doesn't really make sense.  If you want to join two <code>Character</code> values, you instead have to turn them into a <code>String</code>.</p>\n<h3><span id="Concatenating_Strings_and_Characters">Concatenating Strings and Characters</span></h3>\n<p>In addition to being able to append a <code>Character</code> value to a <code>String</code> value, we can also combine two <code>String</code> values.  The is called <em>string concatenation</em>.</p>\n<p>In Swift, there are two ways in which we can concatenate (or join) strings together these are the <code>+</code> operator and the <code>+=</code> operator.</p>\n<p>Firstly, we can use the <code>+</code> operator along with two <code>String</code> values to create a new <code>String</code> value containing the concatenation of the two strings:</p>\n<p></p>\n<div id="crayon-571b80fb597a7156869149" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet string1 = "Hello"\nlet string2 = " World"\nlet welcome = string1 + string2\nprint(welcome)\n// Prints "Hello World"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597a7156869149-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597a7156869149-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597a7156869149-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597a7156869149-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb597a7156869149-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597a7156869149-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">string1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597a7156869149-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">string2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">" World"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597a7156869149-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">string1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-e">string2</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597a7156869149-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597a7156869149-5"><span class="crayon-c">// Prints "Hello World"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>We can also do this with a single character string literal to almost mirror the behaviour of the <code>append(_:)</code> method we just looked at:</p>\n<p></p>\n<div id="crayon-571b80fb597ab314541460" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet welcome2 = string1 + "!"\nprint(welcome2)\n// prints "Hello!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597ab314541460-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597ab314541460-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597ab314541460-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597ab314541460-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">welcome2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">string1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-s">"!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597ab314541460-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597ab314541460-3"><span class="crayon-c">// prints "Hello!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>In addition to the <code>+</code> operator, we can also use the <code>+=</code> operator to modify an existing <code>String</code> value <em>in place</em>:</p>\n<p></p>\n<div id="crayon-571b80fb597b0506912798" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar string3 = "Hello"\nlet string4 = " World"\nstring3 += string4\nprint(string3)\n// prints "Hello World"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597b0506912798-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597b0506912798-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597b0506912798-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597b0506912798-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb597b0506912798-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597b0506912798-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">string3</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597b0506912798-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">string4</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">" World"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597b0506912798-3">\n<span class="crayon-v">string3</span><span class="crayon-h"> </span><span class="crayon-o">+=</span><span class="crayon-h"> </span><span class="crayon-e">string4</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597b0506912798-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">string3</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597b0506912798-5"><span class="crayon-c">// prints "Hello World"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Remember though that <code>String</code> values in Swift are actually <em>value types</em> so although this looks like it is modifying the string in place, behind the scenes the result above (<code>string3</code>) is actually a <em>new</em> string rather than a modification to the original string held in the <code>string3</code> variable.  It's a subtle difference but an important one to remember.</p>\n<h3><span id="String_Interpolation">String Interpolation</span></h3>\n<p>Along with the ability to append a character to a string, or concatenate two strings together, Swift also supports the concept of <em>string interpolation</em>.</p>\n<p>String interpolation allows us to construct new <code>String</code> values from a combination of constants, variables, expressions and other string literals by incorporating their values within the body of another string literal.</p>\n<p>The basic syntax for string interpolation is simple.  All we have to do is include a set of parentheses prefixed with a backslash in the body of a string literal and then place the item we want to include within the parentheses.  For example:</p>\n<p></p>\n<div id="crayon-571b80fb597b6059492479" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet score = 130\nlet message = "Congratulations, you scored \\(score)!"\nprint(message)\n// Prints "Congratulations, you scored 130!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597b6059492479-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597b6059492479-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597b6059492479-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597b6059492479-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597b6059492479-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">score</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">130</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597b6059492479-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Congratulations, you scored <span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">score</span><span class="crayon-sy">)</span>!"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597b6059492479-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">message</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597b6059492479-4"><span class="crayon-c">// Prints "Congratulations, you scored 130!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>But string interpolation doesn't stop at just being able to include simple constant or variable values within a string literal, the parentheses can also contain <em>expressions</em>:</p>\n<p></p>\n<div id="crayon-571b80fb597bb969387033" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet message2 = "That's an average of \\(score / 5) per turn.")\nprint(message2)\n// Prints "That's an average of 26 per turn."</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597bb969387033-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597bb969387033-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597bb969387033-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597bb969387033-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">message2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"That's an average of <span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">score</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">)</span> per turn."</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597bb969387033-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">message2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597bb969387033-3"><span class="crayon-c">// Prints "That's an average of 26 per turn."</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>And they can also contain other string literals:</p>\n<p></p>\n<div id="crayon-571b80fb597c0014815761" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet interpolatedString = "This is an \\("interpolated") string"\nprint(interpolatedString)\n// prints 'This is an interpolated string'</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597c0014815761-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597c0014815761-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597c0014815761-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597c0014815761-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">interpolatedString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"This is an <span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-s">"interpolated"</span><span class="crayon-sy">)</span> string"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597c0014815761-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">interpolatedString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597c0014815761-3"><span class="crayon-c">// prints 'This is an interpolated string'</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>The only rules for including expressions within the parentheses is that they can't contain an unescaped backslash (<code>\\\\</code>), a carriage return (<code>\\r</code>) or a line feed (<code>\\n</code>) but after that, the world is your oyster.</p>\n<p>Anyway, it's time to move on.  Let's next, take a look at how to determine the number of characters in a string.</p>\n<h2><span id="Checking_the_Length_of_a_String">Checking the Length of a String</span></h2>\n<h3><span id="Checking_If_a_String_is_Empty">Checking If a String is Empty</span></h3>\n<p>To test whether a string is empty or not we use the <code>isEmpty</code> property of the <code>String</code> type. The <code>isEmpty</code> property returns a boolean value to (unsurprisingly) indicate whether the string is empty or not:</p>\n<p></p>\n<div id="crayon-571b80fb597c5666627656" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet emptyString1 = ""\nif emptyString1.isEmpty {\n    print("The string was empty")\n}\n// The string was empty.</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597c5666627656-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597c5666627656-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597c5666627656-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597c5666627656-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb597c5666627656-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597c5666627656-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">emptyString1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">""</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597c5666627656-2">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">emptyString1</span><span class="crayon-sy">.</span><span class="crayon-v ">isEmpty</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597c5666627656-3">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"The string was empty"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597c5666627656-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb597c5666627656-5"><span class="crayon-c">// The string was empty.</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>When it comes to checking the actual number of characters in a <code>String</code> though, things are a little more complicated.</p>\n<h3><span id="The_characters_Property">The characters Property</span></h3>\n<p>As we've learnt previously, each <code>Character</code> value in Swift is the equivalent of a Unicode extended grapheme cluster and as such, may consist of zero or more Unicode scalar values. We also learnt that due to the different potential representations of a single character, there may even be one, two or a whole bunch of unicode scalar values used to represent exactly the <em>same</em> character. As you can probably imagine then, when taken together these factors make determining the boundaries of individual characters in a string, (and therefore the <em>number</em> of characters in that string) a non-trivial task. To make things a little simpler though the <code>String</code> type in Swift, has a built in property called <code>characters</code>.</p>\n<p>The <code>characters</code> property is a property that allows us to access a view (of type <code>String.CharacterView</code>) onto the contents of the <code>String</code>. The good news here is that in order to present this view, Swift beavers away behind the scenes to determine where the different <code>Character</code> boundaries are so we don't have to:</p>\n<p></p>\n<div id="crayon-571b80fb597cb583609789" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet welcome = "Hello"\nfor character in welcome.characters {\n    print(character, terminator:"")\n}\n// H e l l o</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597cb583609789-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597cb583609789-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597cb583609789-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597cb583609789-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb597cb583609789-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597cb583609789-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597cb583609789-2">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">character </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597cb583609789-3">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">character</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">terminator</span><span class="crayon-o">:</span><span class="crayon-s">""</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597cb583609789-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb597cb583609789-5"><span class="crayon-c">// H e l l o</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Note: As I mentioned earlier, the <code>characters</code> property is just one of a number of views that are available on the <code>String</code> type.  We'll look at the others later in this article.</p>\n<p>Now, although the availability of this <code>characters</code> property may be convenient, there is one thing to note about accessing this property and that is performance.</p>\n<h4><span id="Performance_Implications_of_the_characters_Property">Performance Implications of the characters Property</span></h4>\n<p>As I've just mentioned, there is no easy way of determining the boundaries for the characters in a given string. To work out these boundaries then, each time we access the <code>characters</code> property on a <code>String</code>, Swift has to iterate through each of the underlying unicode scalar values that make up the string to determine where the boundaries actually are and in short, that activity is not cheap.</p>\n<p>From a performance standpoint this is a <em>linear operation</em> (also known as O(N)) meaning that there is a linear relationship between the number of characters in the string and the time it takes to determine the number of characters it contains. More characters (or more precisely, more scalar values) means more time.</p>\n<p>Most of the time, at least with short strings, this isn't an issue but it's definitely something you should consider if you start working with much longer strings in your code.</p>\n<h3><span id="Counting_the_Number_of_Characters_In_a_String">Counting the Number of Characters In a String</span></h3>\n<p>Ok, let's get back to our problem of counting the characters in a <code>String</code>.</p>\n<p>We've just looked at the <code>characters</code> property and seen how it can give us a view onto the string with all the character boundaries already identified.  The good news is that the <code>String.CharacterView</code> type also has a <code>count</code> property built in that we can now use to count the <code>Character</code> values in the <code>String</code>:</p>\n<p></p>\n<div id="crayon-571b80fb597d1065044638" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar word = touche\nprint("Number of characters in \\(word) is \\(word.characters.count)")\n// Number of characters in touche is 6</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597d1065044638-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597d1065044638-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597d1065044638-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597d1065044638-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-t">word</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">touche</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597d1065044638-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"Number of characters in <span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-t">word</span><span class="crayon-sy">)</span> is <span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-t">word</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">count</span><span class="crayon-sy">)</span>"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597d1065044638-3"><span class="crayon-c">// Number of characters in touche is 6</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Another interesting thing to note about string length is that string concatenation and modification may not <em>always</em> affect the number of characters in the string:</p>\n<p></p>\n<div id="crayon-571b80fb597d6744994836" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nword += "\\u{301} // COMBINING ACUTE ACCENT, U+0301\nprint ("Number of characters in \\(word) is \\(word.characters.count)")\n// Number of characters in touche is 6</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597d6744994836-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597d6744994836-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597d6744994836-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597d6744994836-1">\n<span class="crayon-t">word</span><span class="crayon-h"> </span><span class="crayon-o">+=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{301} // COMBINING ACUTE ACCENT, U+0301</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597d6744994836-2">\n<span class="crayon-s">print ("</span><span class="crayon-e">Number</span><span class="crayon-h"> </span><span class="crayon-e">of</span><span class="crayon-h"> </span><span class="crayon-e">characters</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-t">word</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">is</span><span class="crayon-h"> </span><span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-t">word</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">count</span><span class="crayon-sy">)</span>"<span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597d6744994836-3"><span class="crayon-c">// Number of characters in touche is 6</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Remember, that just because we've added a new Unicode scalar value doesn't mean we've necessarily added a new character. As we can see in the example above, depending on the unicode scalar involved, that scalar may simply modify the last grapheme or character in the string rather than adding a <em>new</em> character and the character account may therefore remain unchanged.</p>\n<h2><span id="Retrieving_Characters_from_a_String">Retrieving Characters from a String</span></h2>\n<h3><span id="Character_Indices_and_Ranges">Character Indices and Ranges</span></h3>\n<p>As we've seen, the variable-width boundaries for graphemes in Swift strings adds additional complications that you may not be used to from other programming languages.</p>\n<p>Another implication of these variable boundaries though, is that unlike in other languages, the <code>Character</code> values that make up a <code>String</code> value can't be indexed by simple integer values.  Instead, the <code>String</code> type in Swift has an associated <em>index type</em> (<code>String.Index</code>) which we have to use instead.</p>\n<h3><span id="Accessing_Characters_Using_Subscript_Notation">Accessing Characters Using Subscript Notation</span></h3>\n<p>Built into the <code>String</code> type, are a number of convenience properties through which we can access certain key <code>String.Index</code> values.</p>\n<p>To access the index of the <em>first</em> <code>Character</code> in a <code>String</code> we use the <code>startIndex</code> property.</p>\n<p>The <code>startIndex</code> property returns a value of type <code>String.Index</code> which can then be used in conjunction with normal subscript notation to access the first character in a string:</p>\n<p></p>\n<div id="crayon-571b80fb597dc858770978" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet welcome = "Hello World!"\nwelcome[welcome.startIndex]\n// H</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597dc858770978-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597dc858770978-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597dc858770978-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597dc858770978-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597dc858770978-2">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597dc858770978-3"><span class="crayon-c">// H</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Once we have retrieved the index of the first <code>Character</code> in the <code>String</code> value, we can also access the index of the next character. Due to the variable width of characters, this is not as simple as adding 1 to the start index though.  Instead, we use the <code>successor()</code> method on the <code>String.Index</code> value which shelters us from all the Unicode complications under the hood and returns the index of the next character:</p>\n<p></p>\n<div id="crayon-571b80fb597e1151877840" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nwelcome[welcome.startIndex.successor()]\n// e</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597e1151877840-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597e1151877840-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597e1151877840-1">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">successor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597e1151877840-2"><span class="crayon-c">// e</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>If we move our attention to the <em>end</em> of the string it won't surprise you to hear that there also a similar set of properties and methods that we can use to access the index of the last character in a string.  There is a little gotcha here though.</p>\n<p>The <code>endIndex</code> property allows us to retrieve the position of the first <code>Character</code> <em>after</em> the end of a given <code>String</code> value.</p>\n<p>The key word here is <em>'after'</em>. The <code>endIndex</code> property can't be used as a subscript directly (due to it being beyond the end of the string) but we <em>can</em> use it in conjunction with another method, the <code>predecessor()</code> method, that retrieves the index of the immediately preceding character:</p>\n<p></p>\n<div id="crayon-571b80fb597e6778946912" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nwelcome[welcome.endIndex.predecessor()]\n// !</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597e6778946912-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597e6778946912-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597e6778946912-1">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597e6778946912-2"><span class="crayon-c">// !</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>So that's the first and last characters in a string, but what about other characters?  Well, here we have a couple of options.</p>\n<p>The first option is to chain together the <code>successor()</code> or <code>predecessor()</code> calls we just saw until we get to the index we want:</p>\n<p></p>\n<div id="crayon-571b80fb597eb117022843" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nwelcome[welcome.startIndex.successor().successor()]\n// l\nwelcome[welcome.endIndex.predecessor().predecessor()]\n// d</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597eb117022843-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597eb117022843-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597eb117022843-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597eb117022843-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597eb117022843-1">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">successor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">.</span><span class="crayon-v ">successor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597eb117022843-2"><span class="crayon-c">// l</span></div>\n<div class="crayon-line" id="crayon-571b80fb597eb117022843-3">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597eb117022843-4"><span class="crayon-c">// d</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>But that's not particularly elegant.  Instead, we can use the <code>advancedBy(_:)</code> method.  The <code>advancedBy(_:)</code> method on the <code>String.Index</code> type takes a single integer parameter that represents the number of characters we want to advance by:</p>\n<p></p>\n<div id="crayon-571b80fb597f0028727583" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet index1 = welcome.startIndex.advancedBy(6)\nwelcome[index1]\n// W</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597f0028727583-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597f0028727583-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597f0028727583-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597f0028727583-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">index1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-cn">6</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597f0028727583-2">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">index1</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597f0028727583-3"><span class="crayon-c">// W</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>It can also accept negative numbers if we're working from the end of a string:</p>\n<p></p>\n<div id="crayon-571b80fb597f5880261920" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet index2 = welcome.endIndex.advancedBy(-3)\nwelcome[index2]\n// l</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597f5880261920-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597f5880261920-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb597f5880261920-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597f5880261920-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">index2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-o">-</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597f5880261920-2">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">index2</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb597f5880261920-3"><span class="crayon-c">// l</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>We need to be careful though.  If we end up trying to access an index beyond the end of the string, it will trigger a runtime error:</p>\n<p></p>\n<div id="crayon-571b80fb597fa114804916" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nwelcome[welcome.endIndex] // error\nwelcome.startIndex.predecessor() // error</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597fa114804916-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597fa114804916-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597fa114804916-1">\n<span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-c">// error</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597fa114804916-2">\n<span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// error</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>We can protect ourselves when using the <code>advancedBy(_:)</code> method by using a alternative form that also takes a limit:</p>\n<p></p>\n<div id="crayon-571b80fb597ff305073484" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet index2 = welcome2.startIndex.advancedBy(30, limit: welcome2.endIndex.predecessor())\nprint(welcome2[index2]) // "d"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb597ff305073484-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb597ff305073484-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb597ff305073484-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">index2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-cn">30</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">limit</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb597ff305073484-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome2</span><span class="crayon-sy">[</span><span class="crayon-v">index2</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "d"</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>This form ensures that the <code>advancedBy</code> method never goes beyond the specified index.</p>\n<p>Another thing we can do with the <code>String.Index</code> values is construct <code>Range</code> values.  This allows us to retrieve ranges of characters from a string which are themselves returned as a <code>String.CharacterView</code>:</p>\n<p></p>\n<div id="crayon-571b80fb59803063450443" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet range1 = welcome.startIndex.advancedBy(6)..&lt;welcome.endIndex\nprint(welcome[range1])\n// prints "World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59803063450443-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59803063450443-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59803063450443-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59803063450443-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">range1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-cn">6</span><span class="crayon-sy">)</span><span class="crayon-o">..</span><span class="crayon-o">&lt;</span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59803063450443-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">range1</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59803063450443-3"><span class="crayon-c">// prints "World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>One final thing I want to cover before we move on is the <code>indices</code> property.</p>\n<p>The <code>indices</code> property is a property on the <code>String.CharacterView</code> data type that returns a <code>Range</code> of indices that spans all characters in the string and can in turn be used to access each individual <code>Character</code> value in a given <code>String</code> by iterating over the range:</p>\n<p></p>\n<div id="crayon-571b80fb59808900764979" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nfor index in welcome.characters.indices {\n    print("\\(welcome[index]) ", terminator: "")\n}\n// H e l l o   W o r l d !</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59808900764979-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59808900764979-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59808900764979-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59808900764979-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59808900764979-1">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">index </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">welcome</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">indices</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59808900764979-2">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"<span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">welcome</span><span class="crayon-sy">[</span><span class="crayon-v">index</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span> "</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">terminator</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-s">""</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59808900764979-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59808900764979-4"><span class="crayon-c">// H e l l o   W o r l d !</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Prefix_and_Suffix_Convenience_Methods">Prefix and Suffix Convenience Methods</span></h3>\n<p>So, using indices and subscript syntax is one way of accessing the characters in a <code>String</code> but there is also a few others.</p>\n<p>In addition to the <code>startIndex</code> and <code>endIndex</code> properties that we talked about earlier, the <code>String.CharacterView</code> type also implements a number of convenience functions that allow us to access ranges of characters at either the start or the end of a string.</p>\n<p>At the start of the string we have the <code>prefix(_:)</code> method.  The <code>prefix(_:)</code> method is used to access the characters at the <em>start</em> of a <code>String.CharacterView</code> and takes a single parameter (the maximum number of characters you want returned) and returns another <code>String.CharacterView</code> containing up to the specified number of characters:</p>\n<p></p>\n<div id="crayon-571b80fb5980e772435282" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet prefixSuffixString = "Hello World"\nlet firstHellCharacterView : String.CharacterView = prefixSuffixString.characters.prefix(4)\nprint(String(firstHellCharacterView)) // Hell</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5980e772435282-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5980e772435282-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5980e772435282-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5980e772435282-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">prefixSuffixString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5980e772435282-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">firstHellCharacterView</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">.</span><span class="crayon-v ">CharacterView</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">prefixSuffixString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-m">prefix</span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5980e772435282-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">firstHellCharacterView</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// Hell</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Note: In this example, and the subsequent examples in this section, I'm going to include the type annotations for each of the variables and constants so that you can see what type of values are being returned.</p>\n<p>We can also achieve a similar outcome using the second of our prefix operations the <code>prefixUpTo(_:)</code> method.  Where the <code>prefix(_:)</code> method takes an integer value, the <code>prefixUpTo(_:)</code> method accepts a <code>String.Index</code> value and when called on the <code>String.CharacterView</code> returns another <code>String.CharacterView</code> containing the <code>Characters</code> from the start of the string <em>up to but not including</em> the supplied index:</p>\n<p></p>\n<div id="crayon-571b80fb59813777744293" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet end = exampleString.characters.startIndex.advancedBy(4, limit: exampleString.characters.endIndex)\nlet secondHellCharacterView : String.CharacterView = exampleString.characters.prefixUpTo(end)\nprint(String(secondHellCharacterView)) // Hell</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59813777744293-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59813777744293-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59813777744293-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59813777744293-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-st">end</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">limit</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59813777744293-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">secondHellCharacterView</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">.</span><span class="crayon-v ">CharacterView</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">prefixUpTo</span><span class="crayon-sy">(</span><span class="crayon-st">end</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59813777744293-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">secondHellCharacterView</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// Hell</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>This is essentially the same as calling:</p>\n<p></p>\n<div id="crayon-571b80fb59818634509464" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nexampleString.characters[exampleString.characters.startIndex..&lt;end]</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59818634509464-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59818634509464-1">\n<span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">[</span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-o">..</span><span class="crayon-o">&lt;</span><span class="crayon-st">end</span><span class="crayon-sy">]</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>There is also a slightly different variant, the <code>prefixThrough(_:)</code> method.  This method again returns a <code>String.CharacterView</code> but this time the view contains the characters from the start of the string <em>up to and including</em> the supplied index:</p>\n<p></p>\n<div id="crayon-571b80fb5981d708960833" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet helloCharacterView : String.CharacterView = exampleString.characters.prefixThrough(end)\nprint(String(helloCharacterView)) // Hello</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5981d708960833-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5981d708960833-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5981d708960833-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">helloCharacterView</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">.</span><span class="crayon-v ">CharacterView</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">prefixThrough</span><span class="crayon-sy">(</span><span class="crayon-st">end</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5981d708960833-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">helloCharacterView</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// Hello</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>In this case, it's essentially the same as:</p>\n<p></p>\n<div id="crayon-571b80fb59822014001411" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nprint(String(exampleString.characters[exampleString.characters.startIndex...end] )) // Hello</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59822014001411-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59822014001411-1">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">[</span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-o">...</span><span class="crayon-st">end</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// Hello</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>It won't surprise you that when it comes to accessing the characters at the end of a string we also have a couple of options.</p>\n<p>The <code>suffix(_:)</code> method is the counterpart to the <code>prefix(_:)</code> method and takes a single integer parameter that specifies the maximum number characters that you want to return from the end of the string:</p>\n<p></p>\n<div id="crayon-571b80fb59827168449515" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet firstWorldCharacterView = exampleString.characters.suffix(5)\nprint(String(firstWorldCharacterView)) // World</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59827168449515-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59827168449515-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59827168449515-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">firstWorldCharacterView</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">suffix</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59827168449515-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">firstWorldCharacterView</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// World</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>There is also a second method, the <code>suffixFrom(_:)</code> method.  This method accepts  a <code>String.Index</code> parameter and returns a new <code>String.CharacterView</code> containing the characters starting at the given index up to and including the last character in the string:</p>\n<p></p>\n<div id="crayon-571b80fb5982c454581832" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet startIndex = exampleString.characters.endIndex.advancedBy(-5, limit: exampleString.characters.startIndex)\nlet secondWorldCharacterView = exampleString.characters.suffixFrom(startIndex)\nprint(String(secondWorldCharacterView)) // World</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5982c454581832-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5982c454581832-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5982c454581832-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5982c454581832-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">startIndex</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-o">-</span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">limit</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5982c454581832-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">secondWorldCharacterView</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">suffixFrom</span><span class="crayon-sy">(</span><span class="crayon-v">startIndex</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5982c454581832-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">secondWorldCharacterView</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// World</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>In this case, it's essentially the same as:</p>\n<p></p>\n<div id="crayon-571b80fb59830535525750" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nprint(String(exampleString.characters[startIndex..&lt;exampleString.characters.endIndex]))</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;"><div class="crayon-num" data-line="crayon-571b80fb59830535525750-1">1</div></div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-571b80fb59830535525750-1">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">[</span><span class="crayon-v">startIndex</span><span class="crayon-o">..</span><span class="crayon-o">&lt;</span><span class="crayon-v">exampleString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div></div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Ok, now that we know how to access the characters in a string, let's take a look at what we can compare either whole <code>String</code> values or parts of those strings.</p>\n<h2><span id="String_Comparison">String Comparison</span></h2>\n<p>In Swift, there are three ways that we can compare <code>String</code> values:<br> – <code>String</code> prefix and suffix equality<br> – <code>String</code> and <code>Character</code> equality<br> – Order comparison</p>\n<h3><span id="Checking_for_String_Prefixes_and_Suffixes">Checking for String Prefixes and Suffixes</span></h3>\n<p>To check that a string starts with a given set of characters we use the <code>hasPrefix(_:)</code> method of the <code>String</code> type.</p>\n<p>The <code>hasPrefix(_:)</code> method takes a single <code>String</code> parameter, returns a boolean value and checks whether the string starts with the given prefix or not:</p>\n<p></p>\n<div id="crayon-571b80fb59836316443102" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet message = "Hello World"\nif message.hasPrefix("Hello") {\n    print("Has prefix \\'Hello\\'")\n}\n// Prints "Has prefix 'Hello'"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59836316443102-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59836316443102-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59836316443102-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59836316443102-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59836316443102-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59836316443102-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59836316443102-2">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-sy">.</span><span class="crayon-v ">hasPrefix</span><span class="crayon-sy">(</span><span class="crayon-s">"Hello"</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59836316443102-3">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"Has prefix \\'Hello\\'"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59836316443102-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb59836316443102-5"><span class="crayon-c">// Prints "Has prefix 'Hello'"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>In determining whether the <code>String</code> has a given prefix, a character-by-character canonical equivalence comparison is performed between the extended grapheme clusters in each <code>String</code> value.  If they match, the <code>hasPrefix</code> method returns <code>true</code>, otherwise it returns <code>false</code>.</p>\n<p>It's a similar story when it comes to the <code>hasSuffix(_:)</code> method.  The <code>hasSuffix(_:)</code> method is used to check whether a <code>String</code> value <em>ends</em> with a given set of characters:</p>\n<p></p>\n<div id="crayon-571b80fb5983b706361219" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nif message.hasSuffix("World") {\n    print("Has suffix \\'World\\'")\n}\n// prints "Has suffix 'World'"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5983b706361219-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5983b706361219-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5983b706361219-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5983b706361219-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5983b706361219-1">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-sy">.</span><span class="crayon-v ">hasSuffix</span><span class="crayon-sy">(</span><span class="crayon-s">"World"</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5983b706361219-2">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"Has suffix \\'World\\'"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5983b706361219-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5983b706361219-4"><span class="crayon-c">// prints "Has suffix 'World'"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="String_and_Character_Equality">String and Character Equality</span></h3>\n<p>Due to the <code>String</code> types conformance to the <a href="%5Bhttps://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_Comparable_Protocol/index.html#//apple_ref/swift/intf/s:Ps10Comparable%5D"><code>Comparable</code> protocol</a> (which in turn inherits from the <a href="%5Bhttps://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_Equatable_Protocol/index.html#//apple_ref/swift/intf/s:Ps9Equatable%5D"><code>Equatable</code> protocol</a> the <code>String</code> type also have a whole load of options when it comes to testing complete <code>String</code> values for their equality and ordering.</p>\n<p>By default, the rules for testing equality and ordering of Unicode-based String values are defined within the <a href="http://www.unicode.org/reports/tr10/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.unicode.org/reports/tr10/', 'Unicode collation algorithm');">Unicode collation algorithm</a> and Swift pretty much follow these rules to the letter.</p>\n<p>In terms of equality comparison between two <code>String</code> (or two <code>Character</code> values) in Swift we use the "equal to" operator (<code>==</code>) and the "not equal to" operator (<code>!=</code>):</p>\n<p></p>\n<div id="crayon-571b80fb59840757465584" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet firstWelcome = "Hello There"\nlet secondWelcome = "Hello There"\nlet thirdWelcome = "Hello There!"\n\nif firstWelcome == secondWelcome {\n   print("Greetings are considered equal")\n}\n// prints "Greetings are considered equal"\n\nif firstWelcome != thirdWelcome {\n   print("Greetings aren't equal.")\n}\n// prints "Greetings aren't equal"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-8">8</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-10">10</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59840757465584-12">12</div>\n<div class="crayon-num" data-line="crayon-571b80fb59840757465584-13">13</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59840757465584-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">firstWelcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello There"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">secondWelcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello There"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">thirdWelcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello There!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-4"> </div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-5">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">firstWelcome</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-e">secondWelcome</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-6">\n<span class="crayon-h">   </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"Greetings are considered equal"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-7"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-8"><span class="crayon-c">// prints "Greetings are considered equal"</span></div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-9"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-10">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">firstWelcome</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-e">thirdWelcome</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-11">\n<span class="crayon-h">   </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"Greetings aren't equal."</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59840757465584-12"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb59840757465584-13"><span class="crayon-c">// prints "Greetings aren't equal"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Two <code>String</code> values (or two <code>Character</code> values) are considered equal in Swift if their associated extended grapheme clusters are <em>canonically equivalent</em>.</p>\n<p>As we saw in the last post, canonical equivalence means that they have the same appearance and same linguistic meaning, even if they are composed of different Unicode Scalar values behind the scenes:</p>\n<p></p>\n<div id="crayon-571b80fb59845188807972" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet string1 = "\\u{00E9}" //  U+00E9 LATIN SMALL LETTER E WITH ACUTE\nlet string2 = "\\u{0065}\\u{0301}" // e U+0065 LATIN SMALL LETTER E +   U+0301 COMBINING ACUTE ACCENT\nif string1 == string2 {\n    print("They are canonically equivalent.")\n}</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59845188807972-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59845188807972-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59845188807972-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59845188807972-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59845188807972-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59845188807972-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">string1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{00E9}"</span><span class="crayon-h"> </span><span class="crayon-c">//  U+00E9 LATIN SMALL LETTER E WITH ACUTE</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59845188807972-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">string2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"\\u{0065}\\u{0301}"</span><span class="crayon-h"> </span><span class="crayon-c">// e U+0065 LATIN SMALL LETTER E +   U+0301 COMBINING ACUTE ACCENT</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59845188807972-3">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">string1</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-e">string2</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59845188807972-4">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"They are canonically equivalent."</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59845188807972-5"><span class="crayon-sy">}</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Sorting_Strings">Sorting Strings</span></h3>\n<p>In addition to being able to check two strings for equality we can also order strings using the <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code> operators.  The rules for sorting of string and character values are also defined as part of the <a href="http://www.unicode.org/reports/tr10/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.unicode.org/reports/tr10/', 'Unicode collation algorithm');">Unicode collation algorithm</a>.  I'm not going to go into them here as they are a little complicated but essentially they do as you would expect:</p>\n<p></p>\n<div id="crayon-571b80fb5984b493727436" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet a = "a"\nlet b = "b"\nlet A = "A"\nlet otherA = A\nlet one = "1"\n\na &lt; b // true\nb &gt; A // true\none &lt; a // true\notherA &lt;= A // true\notherA &gt; b // false</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984b493727436-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984b493727436-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984b493727436-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984b493727436-8">8</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984b493727436-10">10</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984b493727436-11">11</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"a"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984b493727436-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"b"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"A"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984b493727436-4">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">A</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-5">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">one</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"1"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984b493727436-6"> </div>\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-7">\n<span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984b493727436-8">\n<span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-9">\n<span class="crayon-v">one</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984b493727436-10">\n<span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">&lt;=</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984b493727436-11">\n<span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-c">// false</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p></p>\n<div id="crayon-571b80fb5984f684238498" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet a = "a"\nlet b = "b"\nlet A = "A"\nlet otherA = A\nlet one = "1"\n\na &lt; b // true\nb &gt; A // true\none &lt; a // true\notherA &lt;= A // true\notherA &gt; b // false</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984f684238498-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984f684238498-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984f684238498-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984f684238498-8">8</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5984f684238498-10">10</div>\n<div class="crayon-num" data-line="crayon-571b80fb5984f684238498-11">11</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"a"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984f684238498-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"b"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"A"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984f684238498-4">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">A</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-5">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">one</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"1"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984f684238498-6"> </div>\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-7">\n<span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984f684238498-8">\n<span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-9">\n<span class="crayon-v">one</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5984f684238498-10">\n<span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">&lt;=</span><span class="crayon-h"> </span><span class="crayon-v">A</span><span class="crayon-h"> </span><span class="crayon-c">// true</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5984f684238498-11">\n<span class="crayon-v">otherA</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-c">// false</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Note: Due to the wonders of the Swift language has been open-sourced, if you do want more details of how String equality and sorting in Swift works under the hood we can actually look for ourselves.  To save you some time hunting around though you'll find some of the underlying implementations of the <code>&lt;</code> operator for the <code>String</code> type <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/String.swift" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://github.com/apple/swift/blob/master/stdlib/public/core/String.swift', 'here');">here</a> and <a href="https://github.com/apple/swift/blob/master/stdlib/public/stubs/UnicodeNormalization.cpp" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://github.com/apple/swift/blob/master/stdlib/public/stubs/UnicodeNormalization.cpp', 'here');">here</a>. Only implementations of the <code>==</code> and <code>&lt;</code> are provided though as definitions for the other operators used in the examples above are defined automatically in terms of those two operators.</p>\n<p>Ok, so we've looked at how to create strings, access the strings contents and compare different strings.  The next thing to look at is how to manipulate and modify the strings that we have created.  Let's do that next.</p>\n<h2><span id="String_Modification_and_Manipulation">String Modification and Manipulation</span></h2>\n<h3><span id="Modifying_Characters_Case">Modifying Characters Case</span></h3>\n<p>Built into the <code>String</code> type in Swift, are a couple of properties that allow us to modify the <em>case</em> of the characters that make up a <code>String</code> value.  These are the <code>uppercaseString</code> and <code>lowecaseString</code> properties.</p>\n<p>As you might expect, the <code>uppercaseString</code> property returns a new <code>String</code> value with all the characters changed to uppercase:</p>\n<p></p>\n<div id="crayon-571b80fb59855612083001" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar name = "Andy"\nprint(name.uppercaseString)\n// prints "ANDY"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59855612083001-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59855612083001-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59855612083001-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59855612083001-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">name</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Andy"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59855612083001-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">name</span><span class="crayon-sy">.</span><span class="crayon-v ">uppercaseString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59855612083001-3"><span class="crayon-c">// prints "ANDY"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>We can also use the <code>lowercaseString</code> property to return a new string with all the characters converted to lowercase:</p>\n<p></p>\n<div id="crayon-571b80fb5985a469897575" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nprint(name.lowercaseString)\n// prints "andy"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5985a469897575-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5985a469897575-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5985a469897575-1">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">name</span><span class="crayon-sy">.</span><span class="crayon-v ">lowercaseString</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5985a469897575-2"><span class="crayon-c">// prints "andy"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Reversing_the_Characters_in_a_String">Reversing the Characters in a String</span></h3>\n<p>We can also <em>reverse</em> the characters in a string.</p>\n<p>Reversing a string in Swift is actually super-simple.  All we have to do is call the <code>reverse()</code> method on the <code>String.CharacterView</code> that we obtain from the strings <code>characters</code> property.  This returns a new <code>String.CharacterView</code> that we can then use to initialise a new <code>String</code> value:</p>\n<p></p>\n<div id="crayon-571b80fb5985f029640918" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nprint(String("Forward".characters.reverse()))\n// "drawroF"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5985f029640918-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5985f029640918-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5985f029640918-1">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-s">"Forward"</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">reverse</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5985f029640918-2"><span class="crayon-c">// "drawroF"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Splitting_a_String">Splitting a String</span></h3>\n<p>We also have options for splitting a string into an array of substrings.</p>\n<p>Conformance with the <code>CollectionType</code> protocol, means that the <code>String.CharactersView</code> type implements both the <code>split(_:maxSplit:allowEmptySlices:)</code> and <code>split(_:allowEmptySlices:isSeparator:)</code> methods.  Both of these methods return an array of <code>String.CharacterViews</code> representing slices of the original <code>String.CharacterView</code>.</p>\n<p>The first method, the <code>split(_:maxSplit:allowEmptySlices:)</code>, takes three parameters.  The first is a <code>Character</code> value that you want to use to denote the point at which the <code>String.CharacterView</code> will be split.  This <code>Character</code> will be omitted from the resulting strings.  The second is an integer value (<code>maxSplit</code>) that specifies the maximum number slices that will be returned (this has a default value of <code>Int.max</code> so you normally don't have to specify it).  The last parameter (<code>allowEmptySlices</code>) is a boolean parameter that specifies whether empty slices are allowed in the returned array (this also has a default value of <code>false</code> so again you don't normally need to specify it):</p>\n<p></p>\n<div id="crayon-571b80fb59864305067456" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar title = "Star Wars"\nvar charactersInTitle = title.characters\nlet components = charactersInTitle.split(" ")\nfor component in components {\n    print(String(component))\n}\n// Star\n// Wars</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59864305067456-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59864305067456-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59864305067456-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59864305067456-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59864305067456-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59864305067456-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb59864305067456-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59864305067456-8">8</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59864305067456-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">title</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Star Wars"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59864305067456-2">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">charactersInTitle</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">title</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59864305067456-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">components</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">charactersInTitle</span><span class="crayon-sy">.</span><span class="crayon-v ">split</span><span class="crayon-sy">(</span><span class="crayon-s">" "</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59864305067456-4">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">component</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">components</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59864305067456-5">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">component</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59864305067456-6"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb59864305067456-7"><span class="crayon-c">// Star</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59864305067456-8"><span class="crayon-c">// Wars</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>The second of our methods the <code>split(_:allowEmptySlices:isSeparator:)</code> method also takes three parameters.</p>\n<p>The first parameter is the <code>maxSplit</code> parameter we just saw, and again it has a default value of <code>Int.max</code>.  The second parameter is the same <code>allowEmptySlices</code> parameter we just saw and again this defaults to <code>false</code>.  The last parameter however is different.</p>\n<p>Instead of taking a <code>Character</code> value to use to split the characters in the <code>String.CharacterView</code>, the <code>split(_:allowEmptySlices:isSeparator:)</code> takes a closure.  The closure parameter is a closure that accepts a single <code>Character</code> parameter and returns a boolean value indicating whether or not that particular <code>Character</code> value should be used to split the <code>String.CharacterView</code>:</p>\n<p></p>\n<div id="crayon-571b80fb5986a024537198" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet components2 = charactersInTitle.split{ $0 == " " }\nfor component in components2 {\n    print(String(component))\n}\n// Star\n// Wars</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5986a024537198-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5986a024537198-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5986a024537198-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5986a024537198-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb5986a024537198-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5986a024537198-6">6</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5986a024537198-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">components2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">charactersInTitle</span><span class="crayon-sy">.</span><span class="crayon-v ">split</span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-sy">$</span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-s">" "</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5986a024537198-2">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">component</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">components2</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5986a024537198-3">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">component</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5986a024537198-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb5986a024537198-5"><span class="crayon-c">// Star</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5986a024537198-6"><span class="crayon-c">// Wars</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Inserting_a_Character_Into_a_String">Inserting a Character Into a String</span></h3>\n<p>To insert a character into a <code>String</code> value, we can use the <code>insert(_:atIndex:)</code> method.  The index method takes two parameters, the <code>Character</code> value you want to insert and the index at which you want to insert it:</p>\n<p></p>\n<div id="crayon-571b80fb5986f524372978" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar welcome2 = "Hello World"\nwelcome2.insert("!", atIndex:welcome2.endIndex)\nprint(welcome2)\n// prints "Hello World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5986f524372978-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5986f524372978-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5986f524372978-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5986f524372978-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5986f524372978-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">welcome2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5986f524372978-2">\n<span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">insert</span><span class="crayon-sy">(</span><span class="crayon-s">"!"</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">atIndex</span><span class="crayon-o">:</span><span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5986f524372978-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5986f524372978-4"><span class="crayon-c">// prints "Hello World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Notice that we have to define <code>welcome2</code> as a variable as this is a <em>mutating</em> method which essentially modifies the value of <code>welcome2</code> by creating a new string (containing our modifications) and re-assigns it to the <code>welcome2</code> variable.</p>\n<h3><span id="Inserting_a_String_Into_a_String">Inserting a String Into a String</span></h3>\n<p>We can also insert a <code>String</code> value into an existing <code>String</code> value using the <code>insertContentsOf(_:at:)</code> method.</p>\n<p>The <code>insertContentsOf(_:at:)</code> method is almost identical to the <code>insert(_:atIndex:)</code> method in that it accepts, a <code>String</code> value, along with an index at which to insert the <code>String</code>:</p>\n<p></p>\n<div id="crayon-571b80fb59874682730576" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nwelcome2.insertContentsOf(" to the entire ".characters, at: welcome2.startIndex.advanceBy(5))\nprint(welcome2)\n// prints "Hello to the entire World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59874682730576-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59874682730576-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59874682730576-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59874682730576-1">\n<span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">insertContentsOf</span><span class="crayon-sy">(</span><span class="crayon-s">" to the entire "</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">at</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">welcome2</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advanceBy</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59874682730576-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">welcome2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59874682730576-3"><span class="crayon-c">// prints "Hello to the entire World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Again, the same caveats apply about this being a mutating method.</p>\n<h3><span id="Replacing_a_Range_of_a_Characters_in_a_String">Replacing a Range of a Characters in a String</span></h3>\n<p>When it comes to <em>replacing</em> a range of characters in a string we use the <code>replaceRange(_:with:)</code> method.</p>\n<p>As with most of the other string modification methods we've looked at, the method accepts two parameters.  The first is the range of characters we want to replace (again a <code>Range</code> of type <code>String.Index</code>) and the second is the <code>String</code> value we want to replace those characters with:</p>\n<p></p>\n<div id="crayon-571b80fb59879987510593" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar anotherMessage = "A message"\nlet range = anotherMessage.firstIndex...anotherMessage.endIndex.advancedBy(-4)\nanotherMessage.replaceRange(range, with:"Bagg")\nprint(anotherMessage)\n// prints "Baggage"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59879987510593-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59879987510593-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59879987510593-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59879987510593-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59879987510593-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59879987510593-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">anotherMessage</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"A message"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59879987510593-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">range</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anotherMessage</span><span class="crayon-sy">.</span><span class="crayon-v ">firstIndex</span><span class="crayon-o">...</span><span class="crayon-v ">anotherMessage</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-o">-</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59879987510593-3">\n<span class="crayon-v">anotherMessage</span><span class="crayon-sy">.</span><span class="crayon-v ">replaceRange</span><span class="crayon-sy">(</span><span class="crayon-v">range</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">with</span><span class="crayon-o">:</span><span class="crayon-s">"Bagg"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59879987510593-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">anotherMessage</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59879987510593-5"><span class="crayon-c">// prints "Baggage"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Removing_a_Character_from_a_String">Removing a Character from a String</span></h3>\n<p>Removing characters or ranges of characters from a string is just as simple and we have a number of options at our disposal due to the <code>String.CharacterView</code> type conforming to the <a href="%5Bhttps://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_RangeReplaceableCollectionType_Protocol/index.html#//apple_ref/swift/intf/s:Ps30RangeReplaceableCollectionType%5D"><code>RangeReplaceableCollectionType</code> protocol</a>(which in turn conforms to the <a href="%5Bhttps://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_CollectionType_Protocol/index.html#//apple_ref/swift/intf/s:Ps14CollectionType%5D"><code>CollectionType</code> protocol</a>).  However, there is a small complication with using these methods due to the fact that the <code>characters</code> property of a <code>String</code> is a <em>read only</em> property.</p>\n<p>In order to use them then, we must first create a copy of the <code>String.CharacterView</code> before we can use these methods:</p>\n<p></p>\n<div id="crayon-571b80fb5987f604718541" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet myString = "abcdefghijklmnop"\nvar characters = myString.characters</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5987f604718541-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5987f604718541-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5987f604718541-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"abcdefghijklmnop"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5987f604718541-2">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">characters</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>With that setup, lets look at the first pair of methods the <code>popFirst()</code> and <code>popLast()</code> methods.</p>\n<p>If the <code>String.CharacterView</code> is not empty (i.e. the <code>isEmpty</code> property returns <code>false</code>) these methods remove (and return) either the first, or the last, character of a <code>String.CharacterView</code>. If the <code>String.CharacterView</code> <em>is</em> empty, these functions return <code>nil</code> instead (making the return type of these methods a <code>Character</code> optional):</p>\n<p></p>\n<div id="crayon-571b80fb59884275859967" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\ncharacters.popFirst() // "a"\nprint(String(characters)) // "bcdefghijklmnop"\n\ncharacters.popLast() // "p"\nprint(String(characters)) // "bcdefghijklmno"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59884275859967-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59884275859967-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59884275859967-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59884275859967-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59884275859967-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59884275859967-1">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">popFirst</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "a"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59884275859967-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "bcdefghijklmnop"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59884275859967-3"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59884275859967-4">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">popLast</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "p"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59884275859967-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "bcdefghijklmno"</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>We also have the <code>removeFirst()</code> and <code>removeLast()</code> methods.  These methods work in a similar way removing and returning either the first, or last character in the <code>String.CharacterView</code>.  They differ from <code>popFirst()</code> and <code>popLast()</code> though in that they will raise an error if the <code>String.CharacterView</code> is empty:</p>\n<p></p>\n<div id="crayon-571b80fb59889728586974" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\ncharacters.removeFirst() // "b"\nprint(String(characters)) // cdefghijklmno\n\ncharacters.removeLast() // "o"\nprint(String(characters)) // cdefghijklmn\n\nvar emptyCharacters = "".characters\nemptyCharacters.removeFirst() // raises an error</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59889728586974-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59889728586974-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59889728586974-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59889728586974-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb59889728586974-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59889728586974-6">6</div>\n<div class="crayon-num" data-line="crayon-571b80fb59889728586974-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59889728586974-8">8</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59889728586974-1">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">removeFirst</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "b"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59889728586974-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// cdefghijklmno</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59889728586974-3"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59889728586974-4">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">removeLast</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "o"</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59889728586974-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// cdefghijklmn</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59889728586974-6"> </div>\n<div class="crayon-line" id="crayon-571b80fb59889728586974-7">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">emptyCharacters</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">""</span><span class="crayon-sy">.</span><span class="crayon-v ">characters</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59889728586974-8">\n<span class="crayon-v">emptyCharacters</span><span class="crayon-sy">.</span><span class="crayon-v ">removeFirst</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// raises an error</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Now, where things get more interesting is that there are also variants of the <code>removeFirst()</code> and the <code>removeFirst()</code> methods that accept an integer parameter.  The integer parameter represents the number of characters that should be removed from the <code>String.CharacterView</code>.  These methods don't however, return the <code>Character</code> values that were removed:</p>\n<p></p>\n<div id="crayon-571b80fb5988e641715151" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\ncharacters.removeFirst(2)\nprint(String(characters)) // efghijklmn\n\ncharacters.removeLast(2)\nprint(String(characters)) // efghijkl</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5988e641715151-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5988e641715151-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5988e641715151-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5988e641715151-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb5988e641715151-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5988e641715151-1">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">removeFirst</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5988e641715151-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// efghijklmn</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5988e641715151-3"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5988e641715151-4">\n<span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">removeLast</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5988e641715151-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// efghijkl</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>The next set of methods we have are the <code>dropFirst(_:)</code> and <code>dropLast(_:)</code> methods. These methods also take an integer parameter to indicate the number of characters to remove. Unlike the other methods, instead of modifying the original <code>String.CharacterView</code> and (potentially) returning the characters they've removed, they instead return a <em>new</em> <code>String.CharacterView</code> containing the characters that are <em>remaining</em>:</p>\n<p></p>\n<div id="crayon-571b80fb59893829627623" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nprint(String(characters.dropFirst(2))) // ghijkl\nprint(String(characters.dropLast(2))) // efghij</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59893829627623-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59893829627623-2">2</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59893829627623-1">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">dropFirst</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// ghijkl</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59893829627623-2">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">.</span><span class="crayon-v ">dropLast</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// efghij</span>\n</div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>So that's pretty much it for the methods on the <code>String.CharacterView</code> but there are a couple of methods that we can call on <code>String</code> values directly.</p>\n<p>The first is the <code>removeAtIndex(_:)</code> method.  The <code>removeAtIndex(_:)</code> method takes a single parameter, the index of a character that you want to remove and modifies the string by removing the character at the given index:</p>\n<p></p>\n<div id="crayon-571b80fb59897055841515" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar alphabetSlice = String(characters) // "efjhij"\nalphabetSlice.removeAtIndex(alphabetSlice.startIndex.successor())\n// alphabetSlice now contains "ejhij"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb59897055841515-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb59897055841515-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb59897055841515-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb59897055841515-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">alphabetSlice</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e ">String</span><span class="crayon-sy">(</span><span class="crayon-v">characters</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// "efjhij"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb59897055841515-2">\n<span class="crayon-v">alphabetSlice</span><span class="crayon-sy">.</span><span class="crayon-v ">removeAtIndex</span><span class="crayon-sy">(</span><span class="crayon-v">alphabetSlice</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">successor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb59897055841515-3"><span class="crayon-c">// alphabetSlice now contains "ejhij"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Here I've used it to remove the character <code>f</code> from the <code>alphabetSlice</code> variable.</p>\n<h3><span id="Removing_a_Range_of_Characters_from_a_String">Removing a Range of Characters from a String</span></h3>\n<p>In addition to removing a single character from a <code>String</code> value using the <code>removeAtIndex(_:)</code> method, we can also remove a range of characters in a given <code>String</code> value using the <code>removeRange(_:)</code> method.</p>\n<p>The <code>removeRange(_:)</code> method accepts a single parameter, a <code>Range</code> of indices of type <code>String.Index</code>:</p>\n<p></p>\n<div id="crayon-571b80fb5989d396942426" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar anotherWelcome = "Hello World!"\nlet multiCharacterRange = anotherWelcome.startIndex..&lt;anotherWelcome.startIndex.advancedBy(5)\nanotherWelcome.removeRange(multiCharacterRange)\n// anotherWelcome contains "World!"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb5989d396942426-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5989d396942426-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb5989d396942426-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb5989d396942426-4">4</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb5989d396942426-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">anotherWelcome</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello World!"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5989d396942426-2">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">multiCharacterRange</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-o">..</span><span class="crayon-o">&lt;</span><span class="crayon-v">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">startIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">advancedBy</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb5989d396942426-3">\n<span class="crayon-v">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">removeRange</span><span class="crayon-sy">(</span><span class="crayon-v">multiCharacterRange</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb5989d396942426-4"><span class="crayon-c">// anotherWelcome contains "World!"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>And if we're a little sneaky, we can also use this to remove a single character:</p>\n<p></p>\n<div id="crayon-571b80fb598a1176580595" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet singleCharacterRange = anotherWelcome.endIndex.predecessor()...anotherWelcome.endIndex.predecessor()\nanotherWelcome.removeRange(singleCharacterRange)\n// anotherWelcome contains "World"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598a1176580595-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598a1176580595-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598a1176580595-3">3</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598a1176580595-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">singleCharacterRange</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">...</span><span class="crayon-v ">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">endIndex</span><span class="crayon-sy">.</span><span class="crayon-v ">predecessor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598a1176580595-2">\n<span class="crayon-v">anotherWelcome</span><span class="crayon-sy">.</span><span class="crayon-v ">removeRange</span><span class="crayon-sy">(</span><span class="crayon-v">singleCharacterRange</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598a1176580595-3"><span class="crayon-c">// anotherWelcome contains "World"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="Removing_All_Characters_in_a_String">Removing All Characters in a String</span></h3>\n<p>To remove all the characters from a string we can use the <code>removeAll(keepCapacity:)</code> method:</p>\n<p></p>\n<div id="crayon-571b80fb598a6349324040" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nvar message = "A message"\nmessage.removeAll(keepCapacity:false)\nif message.isEmpty {\n    print("The string is empty")\n}\n// prints "The string is empty"</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598a6349324040-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598a6349324040-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598a6349324040-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598a6349324040-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb598a6349324040-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598a6349324040-6">6</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598a6349324040-1">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"A message"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598a6349324040-2">\n<span class="crayon-v">message</span><span class="crayon-sy">.</span><span class="crayon-v ">removeAll</span><span class="crayon-sy">(</span><span class="crayon-v">keepCapacity</span><span class="crayon-o">:</span><span class="crayon-t">false</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598a6349324040-3">\n<span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-v">message</span><span class="crayon-sy">.</span><span class="crayon-v ">isEmpty</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598a6349324040-4">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"The string is empty"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598a6349324040-5"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598a6349324040-6"><span class="crayon-c">// prints "The string is empty"</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>So that about covers the basics of the <code>String</code> types and <code>Character</code> types in Swift but there are a couple of other topics that I wanted to mention before we wrap up today, the first of which is Unicode String Representations.</p>\n<h2><span id="Unicode_String_Representations">Unicode String Representations</span></h2>\n<p>So far in this article we've talked about the <code>String</code> and <code>Character</code> types and 99% of the time, these are the data types you'll be working with when working with text in Swift.  Sometimes though it is necessary to drop down to a lower level of detail and work directly with the Unicode code points that make up those strings.</p>\n<p>There are a number of reasons why you may want to do this.</p>\n<p>Maybe your rendering your text into a UTF-8 encoded webpage.  Maybe you want to work with some of the <code>NSString</code> APIs (which use UTF-16 code points under the hood).  Maybe performance is your thing and you want to gain access to the performance benefits of working with code units directly or want to benefit from the random access capabilities that only the UTF-16 encoding can bring you. Whatever the reason, the good news is that the <code>String</code> type in Swift has you covered.</p>\n<p>In addition to the <code>characters</code> property we looked at earlier, the <code>String</code> type in Swift also supports three other properties, each of which provides a different view on to the underlying unicode scalar values of a Swift string.  These properties are the <code>utf8</code>, <code>utf16</code> and <code>unicodeScalars</code> properties.</p>\n<h3><span id="UTF-8_Representation">UTF-8 Representation</span></h3>\n<p>The first of the properties, the <code>utf8</code> property provides a way to access the unicode scalar values of a Swift <code>String</code> as a collection of UTF-8 encoded code units. The property returns a value of type <code>String.UTF8View</code>.  The <code>String.UTF8View</code> is a collection of unsigned 8-bit (<code>UInt8</code>) values, one for each byte of the <code>String</code> values UTF-8 representation:</p>\n<p></p>\n<div id="crayon-571b80fb598ac342750076" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nlet myString = "Hello \\u{2615}" // Hello \nfor codeUnit in myString.utf8 {\n    print("\\(codeUnit) ", terminator:"")\n}\nprint("\\r")\n// 72 101 108 108 111 32 226 152 149</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598ac342750076-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598ac342750076-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598ac342750076-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598ac342750076-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb598ac342750076-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598ac342750076-6">6</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598ac342750076-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"Hello \\u{2615}"</span><span class="crayon-h"> </span><span class="crayon-c">// Hello </span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598ac342750076-2">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">codeUnit </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-sy">.</span><span class="crayon-v ">utf8</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598ac342750076-3">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"<span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">codeUnit</span><span class="crayon-sy">)</span> "</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">terminator</span><span class="crayon-o">:</span><span class="crayon-s">""</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598ac342750076-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571b80fb598ac342750076-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"\\r"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598ac342750076-6"><span class="crayon-c">// 72 101 108 108 111 32 226 152 149</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h3><span id="UTF-16_Representation">UTF-16 Representation</span></h3>\n<p>Next we have the <code>utf16</code> property. The <code>utf16</code> property returns a value of type <code>String.UTF16View</code> which is a collection of 16-bit (<code>UInt16</code>) values, one for each of the 16-bit code units of a <code>String</code> values UTF-16 representation:</p>\n<p></p>\n<div id="crayon-571b80fb598b1018848801" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nfor codeUnit in myString.utf16 {\n    print("\\(codeUnit) ", terminator:"")\n}\nprint("\\r")\n// 72 101 108 108 111 32 9749</textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598b1018848801-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598b1018848801-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598b1018848801-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598b1018848801-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb598b1018848801-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598b1018848801-1">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">codeUnit </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-sy">.</span><span class="crayon-v ">utf16</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598b1018848801-2">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"<span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">codeUnit</span><span class="crayon-sy">)</span> "</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">terminator</span><span class="crayon-o">:</span><span class="crayon-s">""</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598b1018848801-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598b1018848801-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"\\r"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598b1018848801-5"><span class="crayon-c">// 72 101 108 108 111 32 9749</span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>Note: As I've mentioned, conceptually <code>NSString</code> objects are UTF-16 encoded strings with platform endianness under the hood so becoming familiar with the UTF-16 encoding and how it works can be pretty useful.</p>\n<p>In addition, the UTF-16 encoding scheme is the only unicode encoding scheme that allows random access due to the fixed-width nature of its encoding so it can also yield performance benefits if your looking for pure blazing speed.  With these benefits comes some pitfalls though as UTF-16 is not <em>fully</em> unicode compliant, especially when it comes to strings containing diacritics like the <code></code> we saw earlier so you do need to be a little careful.</p>\n<h3><span id="Unicode_Scalar_Representation">Unicode Scalar Representation</span></h3>\n<p>The final view property on the Swift <code>String</code> type is the <code>unicodeScalars</code> property.  The <code>unicodeScalars</code> property provides access to the string as a collection of 21-bit unicode scalar values that are equivalent to the strings UTF-32 encoding form.</p>\n<p>As such, the <code>unicodeScalars</code> property returns a value of type <code>UnicodeScalarView</code> which in turn represents a collection of <code>UnicodeScalar</code> values.  The <code>UnicodeScalar</code> type differs slightly from the raw numeric types we've seen with the other views in that it is actually a struct and can be used directly to create new string values:</p>\n<p></p>\n<div id="crayon-571b80fb598b7725870474" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nfor scalar in myString.unicodeScalars {\n    print("\\(scalar) ")\n}\nprint("\\r")\n// Hello </textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598b7725870474-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598b7725870474-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598b7725870474-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598b7725870474-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb598b7725870474-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598b7725870474-1">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">scalar </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-sy">.</span><span class="crayon-v ">unicodeScalars</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598b7725870474-2">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"<span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">scalar</span><span class="crayon-sy">)</span> "</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598b7725870474-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598b7725870474-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"\\r"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598b7725870474-5"><span class="crayon-c">// Hello </span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<p>And if it is the scalar value you're after, we instead have to use the <code>value</code> property of the <code>UnicodeScalar</code> type which provides access to the underlying 21-bit unicode code unit as a <code>UInt32</code> value:</p>\n<p></p>\n<div id="crayon-571b80fb598bc207266749" class="crayon-syntax crayon-theme-idle crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover wrap" style=" max-width: 1024px; margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px; font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-toolbar" data-settings=" show" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-title"></span><div class="crayon-tools" style="font-size: 14px !important;height: 21px !important; line-height: 21px !important;">\n<span class="crayon-mixed-highlight" title="Contains Mixed Languages"></span><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div>\n<div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon"></div></div>\n<span class="crayon-language">Swift</span>\n</div>\n</div>\n<div class="crayon-info" style="min-height: 19.6px !important; line-height: 19.6px !important;"></div>\n<div class="crayon-plain-wrap"><textarea class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 20px !important;">\nfor scalar in myString.unicodeScalars {\n    print("\\(scalar.value) ", terminator: "")\n}\nprint("\\r")\n// 72 101 108 108 111 32 9749 </textarea></div>\n<div class="crayon-main" style=" max-width: 1024px;"><table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 14px !important; line-height: 20px !important;">\n<div class="crayon-num" data-line="crayon-571b80fb598bc207266749-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598bc207266749-2">2</div>\n<div class="crayon-num" data-line="crayon-571b80fb598bc207266749-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571b80fb598bc207266749-4">4</div>\n<div class="crayon-num" data-line="crayon-571b80fb598bc207266749-5">5</div>\n</div></td>\n<td class="crayon-code"><div class="crayon-pre" style="font-size: 14px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571b80fb598bc207266749-1">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">scalar </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-v">myString</span><span class="crayon-sy">.</span><span class="crayon-v ">unicodeScalars</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598bc207266749-2">\n<span class="crayon-h">    </span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"<span class="crayon-sy">\\</span><span class="crayon-sy">(</span><span class="crayon-v">scalar</span><span class="crayon-sy">.</span><span class="crayon-v ">value</span><span class="crayon-sy">)</span> "</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">terminator</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-s">""</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598bc207266749-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571b80fb598bc207266749-4">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">"\\r"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571b80fb598bc207266749-5"><span class="crayon-c">// 72 101 108 108 111 32 9749 </span></div>\n</div></td>\n</tr></table></div>\n</div>\n<p></p>\n<h2><span id="Summary">Summary</span></h2>\n<p>So I'm going to leave it there for today.  As we have seen, there is a whole load of functionality built into the <code>String</code> and <code>Character</code> types in Swift.  In this article, we've seen how to create <code>Character</code> and <code>String</code> values, we've seen how to test the numbers of characters that make up a <code>String</code> and we've seen how to manipulate a strings contents by adding, inserting and removing <code>Character</code> values and substrings.  There is however, a whole load that I haven't covered.</p>\n<p>Through Swift's automatic bridging between the <code>String</code> type and the <code>NSString</code> class in the Foundation Framework, we also have access to a whole range of additional functionality above and beyond that covered in this article.  This additional functionality includes the ability to search inside a string for a given set of characters, the ability to draw a string at a point on the screen and the ability to perform advanced natural language processing through classes such as <code>NSLinguisticTagger</code> to name but a few.  With that said though, hopefully this article, along with the previous article, will have give you much better foundation from which to explore that new functionality and in doing so, has opened your eyes up to just how powerful the <code>String</code> and <code>Character</code> types are in Swift.  I do like the Swift language.</p>\n<div class="ssba ssba-wrap"><div style="text-align:left">\n<a href="http://twitter.com/share?url=http://andybargh.com/swift-strings/&amp;text=Swift+Strings+" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://twitter.com/share?url=http://andybargh.com/swift-strings/&amp;text=Swift+Strings+', '');" data-site="" class="ssba_twitter_share" target="_blank"><img src="http://i2.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/twitter.png" title="Twitter" class="ssba ssba-img" alt="Tweet about this on Twitter" data-recalc-dims="1"></a><a href="https://bufferapp.com/add?url=http://andybargh.com/swift-strings/&amp;text=%20Swift%20Strings" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://bufferapp.com/add?url=http://andybargh.com/swift-strings/&amp;text= Swift Strings', '');" data-site="buffer" class="ssba_buffer_share" target="_blank"><img src="http://i2.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/buffer.png" title="Buffer" class="ssba ssba-img" alt="Buffer this page" data-recalc-dims="1"></a><a href="http://www.facebook.com/sharer.php?u=http://andybargh.com/swift-strings/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.facebook.com/sharer.php?u=http://andybargh.com/swift-strings/', '');" data-site="" class="ssba_facebook_share" target="_blank"><img src="http://i0.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/facebook.png" title="Facebook" class="ssba ssba-img" alt="Share on Facebook" data-recalc-dims="1"></a><a href="https://plus.google.com/share?url=http://andybargh.com/swift-strings/" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://plus.google.com/share?url=http://andybargh.com/swift-strings/', '');" data-site="" class="ssba_google_share" target="_blank"><img src="http://i2.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/google.png" title="Google+" class="ssba ssba-img" alt="Share on Google+" data-recalc-dims="1"></a><a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=http://andybargh.com/swift-strings/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.linkedin.com/shareArticle?mini=true&amp;url=http://andybargh.com/swift-strings/', '');" data-site="linkedin" class="ssba_linkedin_share ssba_share_link" target="_blank"><img src="http://i2.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/linkedin.png" title="LinkedIn" class="ssba ssba-img" alt="Share on LinkedIn" data-recalc-dims="1"></a><a data-site="pinterest" class="ssba_pinterest_share" href="javascript:void((function()%7Bvar%20e=document.createElement('script');e.setAttribute('type','text/javascript');e.setAttribute('charset','UTF-8');e.setAttribute('src','//assets.pinterest.com/js/pinmarklet.js?r='+Math.random()*99999999);document.body.appendChild(e)%7D)());"><img src="http://i2.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/pinterest.png" title="Pinterest" class="ssba ssba-img" alt="Pin on Pinterest" data-recalc-dims="1"></a><a data-site="email" class="ssba_email_share" href="mailto:?subject=Swift%20Strings&amp;body=%20http://andybargh.com/swift-strings/"><img src="http://i0.wp.com/andybargh.com/wp-content/plugins/simple-share-buttons-adder/buttons/simple/email.png" title="Email" class="ssba ssba-img" alt="Email this to someone" data-recalc-dims="1"></a>\n</div></div>\n<div class="crp_related ">\n<h3><span id="Related_Posts">Related Posts:</span></h3>\n<ul>\n<li>\n<a href="http://andybargh.com/newsletter-issue-17/"><img src="http://i1.wp.com/andybargh.com/wp-content/uploads/2016/02/Newsletter.png?resize=150%2C150" alt="Issue 17 - 24th December 2015" title="Issue 17 - 24th December 2015" width="150" height="150" class="crp_thumb crp_featured"></a><a href="http://andybargh.com/newsletter-issue-17/" class="crp_title">Issue 17 - 24th December 2015</a>\n</li>\n<li>\n<a href="http://andybargh.com/newsletter-issue-11/"><img src="http://i1.wp.com/andybargh.com/wp-content/uploads/2016/02/Newsletter.png?resize=150%2C150" alt="Issue 11 - November 11th 2015" title="Issue 11 - November 11th 2015" width="150" height="150" class="crp_thumb crp_featured"></a><a href="http://andybargh.com/newsletter-issue-11/" class="crp_title">Issue 11 - November 11th 2015</a>\n</li>\n<li>\n<a href="http://andybargh.com/primitive-data-types-objective-c/"><img src="http://i0.wp.com/andybargh.com/wp-content/uploads/2014/04/data_types.jpg?resize=150%2C150" alt="Primitive Data Types in Objective-C" title="Primitive Data Types in Objective-C" width="150" height="150" class="crp_thumb crp_featured"></a><a href="http://andybargh.com/primitive-data-types-objective-c/" class="crp_title">Primitive Data Types in Objective-C</a>\n</li>\n<li>\n<a href="http://andybargh.com/swift-operators/"><img src="http://i2.wp.com/andybargh.com/wp-content/uploads/2015/12/Wordpress-512-x-512-3.png?resize=150%2C150" alt="Precedence, Associativity and the Swift Operators" title="Precedence, Associativity and the Swift Operators" width="150" height="150" class="crp_thumb crp_featured"></a><a href="http://andybargh.com/swift-operators/" class="crp_title">Precedence, Associativity and the Swift Operators</a>\n</li>\n</ul>\n<div class="crp_clear"></div>\n</div>	It's been a while, but in the last post, we looked at the Unicode, the international standard for encoding, representing and handling, text.  In this article, we build on that knowledge and look at how we can handle, process, and manipulate, characters and strings in Swift. Let's start by looking at the smallest building block of most text processing - the character. In Swift, characters are represented using the  type. When rendered each  value represents a single perceived character or grapheme. The  type in Swift is fully compliant with the Unicode standard and conceptually represents an extended grapheme cluster. You may remember extended grapheme clusters from the previous post.  As we learnt, in Unicode, certain accented characters such as the character  can be represented in multiple forms - either a single code point such as the character  () or as a sequence of two or more code p	\N	2016-04-23 14:04:42.781977	0	0	alonecoooder741	{00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75,d15947e9-3b46-4472-a0cb-dea1a222954c,9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	http://i1.wp.com/andybargh.com/wp-content/uploads/2016/04/Wordpress-512-x-512.png?resize=512%2C512	0
b25b9293-533b-4934-8669-c4f82d90fa63	16	0	Swift on IBM Bluemix - Vidyasagar MSC	http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/	swift-on-ibm-bluemix-vidyasagar-msc	{"version":"1.0","provider_name":"Vidyasagar MSC","provider_url":"http://vidyasagarmsc.com","author_name":"Vidyasagar MSC","author_url":"http://vidyasagarmsc.com/author/vidyasagarmachupalli/","title":"Swift on IBM Bluemix","type":"rich","width":600,"height":338,"html":"\\u003cblockquote class=\\"wp-embedded-content\\"\\u003e\\u003ca href=\\"http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/\\"\\u003eSwift on IBM Bluemix\\u003c/a\\u003e\\u003c/blockquote\\u003e\\n\\u003cscript type='text/javascript'\\u003e\\n\\u003c!--//--\\u003e\\u003c![CDATA[//\\u003e\\u003c!--\\n\\t\\t!function(a,b){\\"use strict\\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\\"MSIE 10\\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\\\./),i=b.querySelectorAll(\\"iframe.wp-embedded-content\\");for(c=0;c\\u003ci.length;c++)if(d=i[c],!d.getAttribute(\\"data-secret\\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\\"#?secret=\\"+f,d.setAttribute(\\"data-secret\\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\\"security\\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\\"'+d.secret+'\\"]'),k=b.querySelectorAll('blockquote[data-secret=\\"'+d.secret+'\\"]');for(e=0;e\\u003ck.length;e++)k[e].style.display=\\"none\\";for(e=0;e\\u003cj.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\\"style\\"),\\"height\\"===d.message){if(g=parseInt(d.value,10),g\\u003e1e3)g=1e3;else if(200\\u003e~~g)g=200;f.height=g}if(\\"link\\"===d.message)if(h=b.createElement(\\"a\\"),i=b.createElement(\\"a\\"),h.href=f.getAttribute(\\"src\\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\\"message\\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\\"DOMContentLoaded\\",c,!1),a.addEventListener(\\"load\\",c,!1)}(window,document);\\n//--\\u003e\\u003c!]]\\u003e\\n\\u003c/script\\u003e\\u003ciframe sandbox=\\"allow-scripts\\" security=\\"restricted\\" src=\\"http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/embed/\\" width=\\"600\\" height=\\"338\\" title=\\"\\u0026#8220;Swift on IBM Bluemix\\u0026#8221; \\u0026#8212; Vidyasagar MSC\\" frameborder=\\"0\\" marginwidth=\\"0\\" marginheight=\\"0\\" scrolling=\\"no\\" class=\\"wp-embedded-content\\"\\u003e\\u003c/iframe\\u003e"}	Swift on IBM Bluemix - Vidyasagar MSC	[{"type":"icon","href":"http://i2.wp.com/vidyasagarmsc.com/wp-content/uploads/2015/09/cropped-886015_951560401568124_1329384915355755258_o.jpg?fit=180%2C180","sizes":null,"width":null,"height":null}]	vidyasagarmsc.com	1	32478	2016-04-24 16:02:43.258435	2016-04-24 16:02:43.943316	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"IBM brings Swift to the cloud - IBM Bluemix.Swift is a powerful language for modern apps. Bluemix is an open-standards, cloud-based platform.","title":"Swift on IBM Bluemix - Vidyasagar MSC","url":"http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/","site_name":"Vidyasagar MSC","type":"article","image":"http://vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png"}	<p>IBM brings <a href="http://vidyasagarmsc.com/category/swift/" target="_blank">Swift</a> to the cloud – IBM Bluemix. After my recent blog post – <a href="http://vidyasagarmsc.com/2016/02/swift-language-for-csharp-developers/" target="_blank">Swift for C# Developers</a>, I was fortunate to deliver a bunch of sessions including “IBM <a href="http://vidyasagarmsc.com/category/mobile/mobilefirst-mobile/" target="_blank">MobileFirst</a> for iOS Swift Developers” (<a href="http://www.slideshare.net/vidyasagarMachupalli" target="_blank">Link</a>) for SwiftBLR (Swift Bengaluru) meetup group at IBM office over the weekend. Swift is the fastest growing programming language among developers . Swift is a powerful language for modern apps. Extending Swift’s client-side benefits to the server simplifies end-to-end development.</p>\n<p>The IBM Swift Sandbox enables developers to write and run Swift code from the browser. Recently at IBM Interconnect ,<a href="http://www.slideshare.net/vidyasagarMachupalli/kitura-swift-ibm" target="_blank">Kitura</a>, a new open web framework, and a Swift package catalog were launched. Whether you're writing your first lines of code, or an experienced Swift user testing on Linux, join us to bring Swift to the cloud.</p>\n<h2></h2>\n<figure id="attachment_328" style="width: 995px" class="wp-caption alignnone"><img class="wp-image-328 size-full" src="http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=711%2C411" alt="Kitura" srcset="http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?w=995 995w, http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=595%2C344 595w, http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=768%2C444 768w, http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=960%2C555 960w, http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=519%2C300 519w" sizes="(max-width: 995px) 100vw, 995px" data-recalc-dims="1"><figcaption class="wp-caption-text">IBM Kitura</figcaption></figure><h2>An Intro to IBM Bluemix</h2>\n<p><strong>So what is Bluemix?</strong></p>\n<p><a href="http://vidyasagarmsc.com/tag/bluemix/" target="_blank">Bluemix</a> is an open-standards, cloud-based platform for building, running, and managing applications.</p>\n<p><strong>Build your apps, your way</strong> Use the most prominent compute technologies to power your app: Cloud Foundry, Docker, OpenStack.</p>\n<p><strong>Extend apps with services</strong> A catalog of IBM, third party, and open source services allow the developer to stitch an application together quickly.</p>\n<p><strong>Scale more than just instances</strong> Development, monitoring, deployment, and logging tools allows the developer to run and manage the entire application.</p>\n<p><strong>Layered Security</strong> IBM secures the platform and infrastructure and provides you with the tools to secure your apps.</p>\n<p><strong>Deploy and manage hybrid apps seamlessly</strong> Get a seamless dev and management experience across a number of hybrid implementations options.</p>\n<p><strong>Flexible Pricing</strong> Try compute options and services for free and, when you're ready, pay only for what you use. Pay as you go and subscription models offer choice and flexibility.</p>\n<p><a href="https://BLUEMIX.NET" target="_blank">Bluemix.Net</a> IS YOUR NEW CLOUD ADDRESS.</p>\n<h3>The Swift runtime on IBM Bluemix</h3>\n<p><img class="size-full wp-image-326 aligncenter" src="http://i2.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/SwiftRuntime2-300x68.png?resize=300%2C68" alt="SwiftRuntime2-300x68" data-recalc-dims="1"></p>\n<ul>\n<li>Enables developers to deploy Swift web applications directly to IBM Bluemix</li>\n<li>Leverages the Cloud Foundry open source swift- buildpack, which allows developers to deploy Swift web applications directly to IBM Bluemix.</li>\n</ul>\n<p><strong>WRITE SWIFT CODE IN A WEB BROWSER – IBM SWIFT SANDBOX</strong></p>\n<ul>\n<li>Easy access to Swift on Linux.</li>\n<li>Setting up a new machine, installing Linux, installing Swift system dependencies, and then installing the latest Swift binary releases to then be able to run Swift code on Linux, the <a href="https://SWIFTLANG.NG.BLUEMIX.NET" target="_blank">IBM Swift Sandbox</a> removes all of these steps for the developer</li>\n</ul>\n<p><strong>Presentation:</strong></p>\n\n<p>ADDITIONAL DEVELOPER RESOURCES</p>\n<ul>\n<li><a href="https://developer.ibm.com/swift">Swift @ IBM</a></li>\n<li><a href="https://developer.ibm.com/swift/products/ibm-bluemix/" target="_blank">Swift on Bluemix</a></li>\n</ul>\n<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon sd-sharing">\n<h3 class="sd-title">Share this:</h3>\n<div class="sd-content">\n<ul>\n<li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-320" class="share-twitter sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=twitter" target="_blank" title="Click to share on Twitter"><span></span><span class="sharing-screen-reader-text">Click to share on Twitter (Opens in new window)</span></a></li>\n<li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-320" class="share-facebook sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=facebook" target="_blank" title="Click to share on Facebook"><span></span><span class="sharing-screen-reader-text">Click to share on Facebook (Opens in new window)</span></a></li>\n<li class="share-linkedin"><a rel="nofollow" data-shared="sharing-linkedin-320" class="share-linkedin sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span></span><span class="sharing-screen-reader-text">Click to share on LinkedIn (Opens in new window)</span></a></li>\n<li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-320" class="share-google-plus-1 sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=google-plus-1" target="_blank" title="Click to share on Google+"><span></span><span class="sharing-screen-reader-text">Click to share on Google+ (Opens in new window)</span></a></li>\n<li class="share-reddit"><a rel="nofollow" data-shared="" class="share-reddit sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=reddit" target="_blank" title="Click to share on Reddit"><span></span><span class="sharing-screen-reader-text">Click to share on Reddit (Opens in new window)</span></a></li>\n<li><a href="#" class="sharing-anchor sd-button share-more"><span>More</span></a></li>\n<li class="share-end">\n</ul>\n<div class="sharing-hidden"><div class="inner" style="display: none;"><ul>\n<li class="share-tumblr"><a rel="nofollow" data-shared="" class="share-tumblr sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=tumblr" target="_blank" title="Click to share on Tumblr"><span></span><span class="sharing-screen-reader-text">Click to share on Tumblr (Opens in new window)</span></a></li>\n<li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=email" target="_blank" title="Click to email this to a friend"><span></span><span class="sharing-screen-reader-text">Click to email this to a friend (Opens in new window)</span></a></li>\n<li class="share-end">\n<li class="share-print"><a rel="nofollow" data-shared="" class="share-print sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/#print" target="_blank" title="Click to print"><span></span><span class="sharing-screen-reader-text">Click to print (Opens in new window)</span></a></li>\n<li class="share-pocket"><a rel="nofollow" data-shared="" class="share-pocket sd-button share-icon no-text" href="http://vidyasagarmsc.com/2016/04/swift-ibm-bluemix/?share=pocket" target="_blank" title="Click to share on Pocket"><span></span><span class="sharing-screen-reader-text">Click to share on Pocket (Opens in new window)</span></a></li>\n<li class="share-end">\n<li class="share-end">\n</ul></div></div>\n</div>\n</div></div>\n<div id="jp-relatedposts" class="jp-relatedposts">\n\t<h3 class="jp-relatedposts-headline"><em>Related</em></h3>\n</div>\t\t\t\t\t\t\t	IBM brings Swift to the cloud - IBM Bluemix. After my recent blog post - Swift for C# Developers, I was fortunate to deliver a bunch of sessions including "IBM MobileFirst for iOS Swift Developers" (Link) for SwiftBLR (Swift Bengaluru) meetup group at IBM office over the weekend. Swift is the fastest growing programming language among developers . Swift is a powerful language for modern apps. Extending Swift's client-side benefits to the server simplifies end-to-end development. The IBM Swift Sandbox enables developers to write and run Swift code from the browser. Recently at IBM Interconnect ,Kitura, a new open web framework, and a Swift package catalog were launched. Whether you're writing your first lines of code, or an experienced Swift user testing on Linux, join us to bring Swift to the cloud. So what is Bluemix? Bluemix is an open-standards, cloud-based platform for building, runni	\N	2016-04-24 16:02:43.255931	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	http://i1.wp.com/vidyasagarmsc.com/wp-content/uploads/2016/04/Kitura-hero.png?resize=711%2C411	0
70bcb802-cdc6-48bd-912b-4d1fa9af370a	19	0	TextAttributes - An easier way to compose attributed strings	https://github.com/delba/TextAttributes	textattributes-an-easier-way-to-compose-attributed-strings	{}	GitHub - delba/TextAttributes: An easier way to compose attributed strings	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	1	32481	2016-04-26 08:34:08.975151	2016-04-26 08:34:09.632363	1c0226cf-7d6f-4e48-9f07-68caf18b0d9e	{"description":"TextAttributes - An easier way to compose attributed strings","title":"delba/TextAttributes","url":"https://github.com/delba/TextAttributes","site_name":"GitHub","type":"object","image":"https://avatars1.githubusercontent.com/u/2891970?v=3\\u0026s=400"}	<p align="center">\n  <a href="https://raw.githubusercontent.com/delba/TextAttributes/assets/TextAttributes@2x.png" target="_blank"><img src="https://raw.githubusercontent.com/delba/TextAttributes/assets/TextAttributes@2x.png" style="max-width:100%;"></a>\n</p>\n\n<p align="center">\n  <a href="https://travis-ci.org/delba/TextAttributes"><img alt="Travis Status" src="https://camo.githubusercontent.com/8efdda2c270f78b06f4c1dd9037da5f6007b7a1b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f64656c62612f54657874417474726962757465732e737667" data-canonical-src="https://img.shields.io/travis/delba/TextAttributes.svg" style="max-width:100%;"></a>\n  <a href="https://img.shields.io/cocoapods/v/TextAttributes.svg"><img alt="CocoaPods compatible" src="https://camo.githubusercontent.com/09fc28ea06e29885037f24a1ec59c62963c79c47/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f54657874417474726962757465732e737667" data-canonical-src="https://img.shields.io/cocoapods/v/TextAttributes.svg" style="max-width:100%;"></a>\n  <a href="https://github.com/Carthage/Carthage"><img alt="Carthage compatible" src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"></a>\n</p>\n\n<p><strong>TextAttributes</strong> makes it easy to compose attributed strings.</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> attrs <span class="pl-k">=</span> TextAttributes()\n    <span class="pl-k">.</span>font(name: <span class="pl-s"><span class="pl-pds">"</span>HelveticaNeue<span class="pl-pds">"</span></span>, size: <span class="pl-c1">16</span>)\n    <span class="pl-k">.</span>foregroundColor(white: <span class="pl-c1">0</span><span class="pl-k">.</span><span class="pl-c1">2</span>, alpha: <span class="pl-c1">1</span>)\n    <span class="pl-k">.</span>lineHeightMultiple(<span class="pl-c1">1</span><span class="pl-k">.</span><span class="pl-c1">5</span>)\n\nNSAttributedString(<span class="pl-s"><span class="pl-pds">"</span>The quick brown fox jumps over the lazy dog<span class="pl-pds">"</span></span>, attributes: attrs)</pre></div>\n\n<p align="center">\n    <a href="#features">Features</a>  <a href="#usage">Usage</a>  <a href="#demo">Demo</a>  <a href="#references">References</a>  <a href="#installation">Installation</a>  <a href="#license">License</a>\n</p>\n\n<h2>\n<a id="user-content-features" class="anchor" href="#features" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Features</h2>\n\n<ul class="task-list">\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Strongly typed properties</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Chainable setter methods</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> A direct access to the <code>NSParagraphStyle</code> properties</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Better autocompletion</li>\n</ul>\n<h2>\n<a id="user-content-usage" class="anchor" href="#usage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Usage</h2>\n\n<ul>\n<li><strong>Get or set the <code>TextAttributes</code> properties:</strong></li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>attrs<span class="pl-k">.</span>font <span class="pl-k">=</span> UIFont(name: <span class="pl-s"><span class="pl-pds">"</span>HelveticaNeue<span class="pl-pds">"</span></span>, size: <span class="pl-c1">16</span>)\nattrs<span class="pl-k">.</span>backgroundColor <span class="pl-k">=</span> <span class="pl-k">.</span>whiteColor()</pre></div>\n\n<blockquote>\n<p>See <a href="#references">all the properties</a></p>\n</blockquote>\n\n<ul>\n<li><strong>Method chaining:</strong></li>\n</ul>\n<p>The <code>TextAttributes</code> methods return <code>Self</code> to allow method chaining:</p>\n\n<div class="highlight highlight-source-swift"><pre>attrs\n    <span class="pl-k">.</span>lineHeightMultiple(<span class="pl-c1">1</span><span class="pl-k">.</span><span class="pl-c1">5</span>)\n    <span class="pl-k">.</span>underlineStyle(<span class="pl-k">.</span>StyleSingle)</pre></div>\n\n<blockquote>\n<p>See <a href="#references">all the methods</a></p>\n</blockquote>\n\n<ul>\n<li><strong>The methods are also constructors:</strong></li>\n</ul>\n<p>The following are equivalent:</p>\n\n<div class="highlight highlight-source-swift"><pre>attrs\n    <span class="pl-k">.</span>font(name: <span class="pl-s"><span class="pl-pds">"</span>HelveticaNeue<span class="pl-pds">"</span></span>, size: <span class="pl-c1">16</span>)\n    <span class="pl-k">.</span>foregroundColor(white: <span class="pl-c1">0</span><span class="pl-k">.</span><span class="pl-c1">2</span>, alpha: <span class="pl-c1">1</span>)</pre></div>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> font  <span class="pl-k">=</span> UIFont(name: <span class="pl-s"><span class="pl-pds">"</span>HelveticaNeue<span class="pl-pds">"</span></span>, size: <span class="pl-c1">16</span>)\n<span class="pl-k">let</span> color <span class="pl-k">=</span> UIColor(white: <span class="pl-c1">0</span><span class="pl-k">.</span><span class="pl-c1">2</span>, alpha: <span class="pl-c1">1</span>)\n\nattrs\n    <span class="pl-k">.</span>font(font)\n    <span class="pl-k">.</span>foregroundColor(color)</pre></div>\n\n<ul>\n<li><strong>Access the underlying dictionary:</strong></li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>attrs<span class="pl-k">.</span>dictionary <span class="pl-c">// Returns the attributes dictionary of type [String: AnyObject]</span></pre></div>\n\n<h4>\n<a id="user-content-third-party-libraries" class="anchor" href="#third-party-libraries" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Third-party libraries:</h4>\n\n<ul>\n<li>\n<a href="https://github.com/muukii/TextAttributesUtil">muukii/<strong>TextAttributesUtil</strong></a> Quickly create NSAttributedString with TextAttributes</li>\n</ul>\n<h2>\n<a id="user-content-demo" class="anchor" href="#demo" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Demo</h2>\n\n<p align="center">\n  <a href="https://raw.githubusercontent.com/delba/TextAttributes/assets/demo.gif" target="_blank"><img src="https://raw.githubusercontent.com/delba/TextAttributes/assets/demo.gif" style="max-width:100%;"></a>\n  <em>Live updates with <a href="https://github.com/johnno1962/injectionforxcode" alt="Injection for Xcode">Injection for Xcode</a></em>\n</p>\n\n<h2>\n<a id="user-content-references" class="anchor" href="#references" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>References</h2>\n\n<h3>\n<a id="user-content-attributes-dictionary" class="anchor" href="#attributes-dictionary" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Attributes dictionary</h3>\n\n<table>\n<thead><tr>\n<th>Dictionary Key</th>\n<th>\n<code>TextAttributes</code> Property</th>\n<th>\n<code>TextAttributes</code> Method</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>NSFontAttributeName</code></td>\n<td><code>font</code></td>\n<td><code>font(name:size:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>font(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSParagraphStyleAttributeName</code></td>\n<td><code>paragraphStyle</code></td>\n<td><code>paragraphStyle(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSForegroundColorAttributeName</code></td>\n<td><code>foregroundColor</code></td>\n<td><code>foregroundColor(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>foregroundColor(white:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>foregroundColor(hue:saturation:brightness:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>foregroundColor(red:green:blue:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>foregroundColor(patternImage:)</code></td>\n</tr>\n<tr>\n<td><code>NSBackgroundColorAttributeName</code></td>\n<td><code>backgroundColor</code></td>\n<td><code>backgroundColor(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>backgroundColor(white:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>backgroundColor(hue:saturation:brightness:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>backgroundColor(red:green:blue:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>backgroundColor(patternImage:)</code></td>\n</tr>\n<tr>\n<td><code>NSLigatureAttributeName</code></td>\n<td><code>ligature</code></td>\n<td><code>ligature(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSKernAttributeName</code></td>\n<td><code>kern</code></td>\n<td><code>kern(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSStrikethroughStyleAttributeName</code></td>\n<td><code>strikethroughStyle</code></td>\n<td><code>strikethroughStyle(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSStrikethroughColorAttributeName</code></td>\n<td><code>strikethroughColor</code></td>\n<td><code>strikethroughColor(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strikethroughColor(white:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strikethroughColor(hue:saturation:brightness:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strikethroughColor(red:green:blue:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strikethroughColor(patternImage:)</code></td>\n</tr>\n<tr>\n<td><code>NSUnderlineStyleAttributeName</code></td>\n<td><code>underlineStyle</code></td>\n<td><code>underlineStyle(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSUnderlineColorAttributeName</code></td>\n<td><code>underlineColor</code></td>\n<td><code>underlineColor(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>underlineColor(white:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>underlineColor(hue:saturation:brightness:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>underlineColor(red:green:blue:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>underlineColor(patternImage:)</code></td>\n</tr>\n<tr>\n<td><code>NSStrokeWidthAttributeName</code></td>\n<td><code>strokeWidth</code></td>\n<td><code>strokeWidth(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSStrokeColorAttributeName</code></td>\n<td><code>strokeColor</code></td>\n<td><code>strokeColor(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strokeColor(white:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strokeColor(hue:saturation:brightness:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strokeColor(red:green:blue:alpha:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>strokeColor(patternImage:)</code></td>\n</tr>\n<tr>\n<td><code>NSShadowAttributeName</code></td>\n<td><code>shadow</code></td>\n<td><code>shadow(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>shadow(color:offset:blurRadius:)</code></td>\n</tr>\n<tr>\n<td><code>NSTextEffectAttributeName</code></td>\n<td><code>textEffect</code></td>\n<td><code>textEffect(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSAttachmentAttributeName</code></td>\n<td><code>attachment</code></td>\n<td><code>attachment(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSLinkAttributeName</code></td>\n<td><code>link</code></td>\n<td><code>link(_:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>link(string:)</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>link(string:relativeToURL:)</code></td>\n</tr>\n<tr>\n<td><code>NSBaselineOffsetAttributeName</code></td>\n<td><code>baselineOffset</code></td>\n<td><code>baselineOffset(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSObliquenessAttributeName</code></td>\n<td><code>obliqueness</code></td>\n<td><code>obliqueness(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSExpansionAttributeName</code></td>\n<td><code>expansion</code></td>\n<td><code>expansion(_:)</code></td>\n</tr>\n<tr>\n<td><code>NSVerticalGlyphFormAttributeName</code></td>\n<td><code>verticalGlyphForm</code></td>\n<td><code>verticalGlyphForm(_:)</code></td>\n</tr>\n</tbody>\n</table>\n<h3>\n<a id="user-content-paragraph-style" class="anchor" href="#paragraph-style" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Paragraph style</h3>\n\n<table>\n<thead><tr>\n<th>\n<code>NSMutableParagraphStyle</code> Property</th>\n<th>\n<code>TextAttributes</code> Property</th>\n<th>\n<code>TextAttributes</code> Method</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>alignment</code></td>\n<td><code>alignment</code></td>\n<td><code>alignment(_:)</code></td>\n</tr>\n<tr>\n<td><code>firstLineHeadIndent</code></td>\n<td><code>firstLineHeadIndent</code></td>\n<td><code>firstLineHeadIndent(_:)</code></td>\n</tr>\n<tr>\n<td><code>headIndent</code></td>\n<td><code>headIndent</code></td>\n<td><code>headIndent(_:)</code></td>\n</tr>\n<tr>\n<td><code>tailIndent</code></td>\n<td><code>tailIndent</code></td>\n<td><code>tailIndent(_:)</code></td>\n</tr>\n<tr>\n<td><code>lineBreakMode</code></td>\n<td><code>lineBreakMode</code></td>\n<td><code>lineBreakMode(_:)</code></td>\n</tr>\n<tr>\n<td><code>maximumLineHeight</code></td>\n<td><code>maximumLineHeight</code></td>\n<td><code>maximumLineHeight(_:)</code></td>\n</tr>\n<tr>\n<td><code>lineSpacing</code></td>\n<td><code>lineSpacing</code></td>\n<td><code>lineSpacing(_:)</code></td>\n</tr>\n<tr>\n<td><code>paragraphSpacing</code></td>\n<td><code>paragraphSpacing</code></td>\n<td><code>paragraphSpacing(_:)</code></td>\n</tr>\n<tr>\n<td><code>paragraphSpacingBefore</code></td>\n<td><code>paragraphSpacingBefore</code></td>\n<td><code>paragraphSpacingBefore(_:)</code></td>\n</tr>\n<tr>\n<td><code>baseWritingDirection</code></td>\n<td><code>baseWritingDirection</code></td>\n<td><code>baseWritingDirection(_:)</code></td>\n</tr>\n<tr>\n<td><code>lineHeightMultiple</code></td>\n<td><code>lineHeightMultiple</code></td>\n<td><code>lineHeightMultiple(_:)</code></td>\n</tr>\n</tbody>\n</table>\n<h2>\n<a id="user-content-installation" class="anchor" href="#installation" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Installation</h2>\n\n<h3>\n<a id="user-content-carthage" class="anchor" href="#carthage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Carthage</h3>\n\n<p><a href="https://github.com/Carthage/Carthage">Carthage</a> is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.</p>\n\n<p>You can install Carthage with <a href="http://brew.sh/">Homebrew</a> using the following command:</p>\n\n<div class="highlight highlight-source-shell"><pre>$ brew update\n$ brew install carthage</pre></div>\n\n<p>To integrate TextAttributes into your Xcode project using Carthage, specify it in your <code>Cartfile</code>:</p>\n\n<pre lang="ogdl"><code>github "delba/TextAttributes"\n</code></pre>\n\n<h3>\n<a id="user-content-cocoapods" class="anchor" href="#cocoapods" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Cocoapods</h3>\n\n<p><a href="http://cocoapods.org">CocoaPods</a> is a dependency manager for Cocoa projects.</p>\n\n<p>You can install it with the following command:</p>\n\n<div class="highlight highlight-source-shell"><pre>$ gem install cocoapods</pre></div>\n\n<p>To integrate TextAttributes into your Xcode project using CocoaPods, specify it in your <code>Podfile</code>:</p>\n\n<div class="highlight highlight-source-ruby"><pre>use_frameworks!\n\npod <span class="pl-s"><span class="pl-pds">'</span>TextAttributes<span class="pl-pds">'</span></span></pre></div>\n\n<h2>\n<a id="user-content-license" class="anchor" href="#license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>License</h2>\n\n<p>Copyright (c) 2016 Damien (<a href="http://delba.io">http://delba.io</a>)</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n	TextAttributes makes it easy to compose attributed strings. Features  Usage  Demo  References  Installation  License See all the properties The  methods return  to allow method chaining: See all the methods The following are equivalent: Live updates with Injection for Xcode Carthage is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application. You can install Carthage with Homebrew using the following command: To integrate TextAttributes into your Xcode project using Carthage, specify it in your : CocoaPods is a dependency manager for Cocoa projects. You can install it with the following command: To integrate TextAttributes into your Xcode project using CocoaPods, specify it in your : Copyright (c) 2016 Damien (http://delba.io) Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated doc	\N	2016-04-26 08:34:08.972302	0	0	ReneLindhorst	{1c0226cf-7d6f-4e48-9f07-68caf18b0d9e}	https://raw.githubusercontent.com/delba/TextAttributes/assets/TextAttributes@2x.png	0
f54dd8d1-be73-48d5-ba1e-06c37f57c1a6	17	0	Modern Swift API for NSUserDefaults	https://github.com/radex/SwiftyUserDefaults	modern-swift-api-for-nsuserdefaults	{}	GitHub - radex/SwiftyUserDefaults: Modern Swift API for NSUserDefaults	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	1	32479	2016-04-25 08:35:48.46136	2016-04-25 08:35:48.962237	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"SwiftyUserDefaults - Modern Swift API for NSUserDefaults","title":"radex/SwiftyUserDefaults","url":"https://github.com/radex/SwiftyUserDefaults","site_name":"GitHub","type":"object","image":"https://avatars3.githubusercontent.com/u/183747?v=3\\u0026s=400"}	<h1>\n<a id="user-content-swiftyuserdefaults" class="anchor" href="#swiftyuserdefaults" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>SwiftyUserDefaults</h1>\n\n<p><a href="https://camo.githubusercontent.com/98109d08c6cc43619808c1ddcf9d6ecc2ca2f721/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d696f732532302537432532306f737825323025374325323077617463686f7325323025374325323074766f732d6c69676874677265792e737667" target="_blank"><img src="https://camo.githubusercontent.com/98109d08c6cc43619808c1ddcf9d6ecc2ca2f721/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d696f732532302537432532306f737825323025374325323077617463686f7325323025374325323074766f732d6c69676874677265792e737667" alt="Platforms" data-canonical-src="https://img.shields.io/badge/platforms-ios%20%7C%20osx%20%7C%20watchos%20%7C%20tvos-lightgrey.svg" style="max-width:100%;"></a>\n<a href="https://travis-ci.org/radex/SwiftyUserDefaults"><img src="https://camo.githubusercontent.com/8338c23b986541bffeadfe43b368df5dc9ed3946/68747470733a2f2f6170692e7472617669732d63692e6f72672f72616465782f5377696674795573657244656661756c74732e7376673f6272616e63683d6d6173746572" alt="CI Status" data-canonical-src="https://api.travis-ci.org/radex/SwiftyUserDefaults.svg?branch=master" style="max-width:100%;"></a>\n<a href="https://cocoapods.org/pods/SwiftyUserDefaults"><img src="https://camo.githubusercontent.com/27bcb5fe65c0d88c3269f15b31af85964630e58c/687474703a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5377696674795573657244656661756c74732e737667" alt="CocoaPods" data-canonical-src="http://img.shields.io/cocoapods/v/SwiftyUserDefaults.svg" style="max-width:100%;"></a>\n<a href="#carthage"><img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"></a>\n<a href="https://camo.githubusercontent.com/a84443ec5d15d327b940652a93bf56a8883da6f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d322e322d6f72616e67652e737667" target="_blank"><img src="https://camo.githubusercontent.com/a84443ec5d15d327b940652a93bf56a8883da6f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d322e322d6f72616e67652e737667" alt="Swift version" data-canonical-src="https://img.shields.io/badge/swift-2.2-orange.svg" style="max-width:100%;"></a></p>\n\n<h4>\n<a id="user-content-modern-swift-api-for-nsuserdefaults" class="anchor" href="#modern-swift-api-for-nsuserdefaults" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Modern Swift API for <code>NSUserDefaults</code>\n</h4>\n\n<h6>\n<a id="user-content-swiftyuserdefaults-makes-user-defaults-enjoyable-to-use-by-combining-expressive-swifty-api-with-the-benefits-of-static-typing-define-your-keys-in-one-place-use-value-types-easily-and-get-extra-safety-and-convenient-compile-time-checks-for-free" class="anchor" href="#swiftyuserdefaults-makes-user-defaults-enjoyable-to-use-by-combining-expressive-swifty-api-with-the-benefits-of-static-typing-define-your-keys-in-one-place-use-value-types-easily-and-get-extra-safety-and-convenient-compile-time-checks-for-free" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>SwiftyUserDefaults makes user defaults enjoyable to use by combining expressive Swifty API with the benefits of static typing. Define your keys in one place, use value types easily, and get extra safety and convenient compile-time checks for free.</h6>\n\n<p>Read <a href="http://radex.io/swift/nsuserdefaults/static">Statically-typed NSUserDefaults</a> for more information about this project.</p>\n\n<hr>\n<p align="center">\n    <a href="#features">Features</a> \n    <a href="#usage">Usage</a> \n    <a href="#custom-types">Custom types</a> \n    <a href="#traditional-api">Traditional API</a>  \n    <a href="#installation">Installation</a>  \n    <a href="#more-like-this">More info</a>\n</p>\n\n<hr>\n<h2>\n<a id="user-content-features" class="anchor" href="#features" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Features</h2>\n\n<p><strong>There's only two steps to using SwiftyUserDefaults:</strong></p>\n\n<p>Step 1: Define your keys</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> DefaultsKeys {\n    <span class="pl-k">static</span> <span class="pl-k">let</span> username <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span>?<span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span>)\n    <span class="pl-k">static</span> <span class="pl-k">let</span> launchCount <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span><span class="pl-c1">Int</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>launchCount<span class="pl-pds">"</span></span>)\n}</pre></div>\n\n<p>Step 2: Just use it!</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Get and set user defaults easily</span>\n<span class="pl-k">let</span> username <span class="pl-k">=</span> Defaults[<span class="pl-k">.</span>username]\nDefaults[<span class="pl-k">.</span>hotkeyEnabled] <span class="pl-k">=</span> <span class="pl-c1">true</span>\n\n<span class="pl-c">// Modify value types in place</span>\nDefaults[<span class="pl-k">.</span>launchCount]<span class="pl-k">++</span>\nDefaults[<span class="pl-k">.</span>volume] <span class="pl-k">+=</span> <span class="pl-c1">0</span><span class="pl-k">.</span><span class="pl-c1">1</span>\nDefaults[<span class="pl-k">.</span>strings] <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">"</span>... can easily be extended!<span class="pl-pds">"</span></span>\n\n<span class="pl-c">// Use and modify typed arrays</span>\nDefaults[<span class="pl-k">.</span>libraries]<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">"</span>SwiftyUserDefaults<span class="pl-pds">"</span></span>)\nDefaults[<span class="pl-k">.</span>libraries][<span class="pl-c1">0</span>] <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">"</span> 2.0<span class="pl-pds">"</span></span>\n\n<span class="pl-c">// Easily work with custom serialized types</span>\nDefaults[<span class="pl-k">.</span>color] <span class="pl-k">=</span> NSColor<span class="pl-k">.</span>whiteColor()\nDefaults[<span class="pl-k">.</span>color]?<span class="pl-k">.</span>whiteComponent <span class="pl-c">// =&gt; 1.0</span></pre></div>\n\n<p>The convenient dot syntax is only available if you define your keys by extending magic <code>DefaultsKeys</code> class. You can also just pass the <code>DefaultsKey</code> value in square brackets, or use a more traditional string-based API. How? Keep reading.</p>\n\n<h2>\n<a id="user-content-usage" class="anchor" href="#usage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Usage</h2>\n\n<h3>\n<a id="user-content-define-your-keys" class="anchor" href="#define-your-keys" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Define your keys</h3>\n\n<p>To get the most out of SwiftyUserDefaults, define your user defaults keys ahead of time:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> colorKey <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>)</pre></div>\n\n<p>Just create a <code>DefaultsKey</code> object, put the type of the value you want to store in angle brackets, the key name in parentheses, and you're good to go.</p>\n\n<p>You can now use the <code>Defaults</code> shortcut to access those values:</p>\n\n<div class="highlight highlight-source-swift"><pre>Defaults[colorKey] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>\nDefaults[colorKey] <span class="pl-c">// =&gt; "red", typed as String</span></pre></div>\n\n<p>The compiler won't let you set a wrong value type, and fetching conveniently returns <code>String</code>.</p>\n\n<h3>\n<a id="user-content-take-shortcuts" class="anchor" href="#take-shortcuts" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Take shortcuts</h3>\n\n<p>For extra convenience, define your keys by extending magic <code>DefaultsKeys</code> class and adding static properties:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> DefaultsKeys {\n    <span class="pl-k">static</span> <span class="pl-k">let</span> username <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span>?<span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span>)\n    <span class="pl-k">static</span> <span class="pl-k">let</span> launchCount <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span><span class="pl-c1">Int</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>launchCount<span class="pl-pds">"</span></span>)\n}</pre></div>\n\n<p>And use the shortcut dot syntax:</p>\n\n<div class="highlight highlight-source-swift"><pre>Defaults[<span class="pl-k">.</span>username] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>joe<span class="pl-pds">"</span></span>\nDefaults[<span class="pl-k">.</span>launchCount]</pre></div>\n\n<h3>\n<a id="user-content-just-use-it" class="anchor" href="#just-use-it" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Just use it!</h3>\n\n<p>You can easily modify value types (strings, numbers, array) in place, as if you were working with a plain old dictionary:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// Modify value types in place</span>\nDefaults[<span class="pl-k">.</span>launchCount]<span class="pl-k">++</span>\nDefaults[<span class="pl-k">.</span>volume] <span class="pl-k">+=</span> <span class="pl-c1">0</span><span class="pl-k">.</span><span class="pl-c1">1</span>\nDefaults[<span class="pl-k">.</span>strings] <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">"</span>... can easily be extended!<span class="pl-pds">"</span></span>\n\n<span class="pl-c">// Use and modify typed arrays</span>\nDefaults[<span class="pl-k">.</span>libraries]<span class="pl-k">.</span>append(<span class="pl-s"><span class="pl-pds">"</span>SwiftyUserDefaults<span class="pl-pds">"</span></span>)\nDefaults[<span class="pl-k">.</span>libraries][<span class="pl-c1">0</span>] <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">"</span> 2.0<span class="pl-pds">"</span></span>\n\n<span class="pl-c">// Easily work with custom serialized types</span>\nDefaults[<span class="pl-k">.</span>color] <span class="pl-k">=</span> NSColor<span class="pl-k">.</span>whiteColor()\nDefaults[<span class="pl-k">.</span>color]?<span class="pl-k">.</span>whiteComponent <span class="pl-c">// =&gt; 1.0</span></pre></div>\n\n<h3>\n<a id="user-content-supported-types" class="anchor" href="#supported-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Supported types</h3>\n\n<p>SwiftyUserDefaults supports all of the standard <code>NSUserDefaults</code> types, like strings, numbers, booleans, arrays and dictionaries.</p>\n\n<p>Here's a full table:</p>\n\n<table>\n<thead><tr>\n<th>Optional variant</th>\n<th>Non-optional variant</th>\n<th>Default value</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>String?</code></td>\n<td><code>String</code></td>\n<td><code>""</code></td>\n</tr>\n<tr>\n<td><code>Int?</code></td>\n<td><code>Int</code></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>Double?</code></td>\n<td><code>Double</code></td>\n<td><code>0.0</code></td>\n</tr>\n<tr>\n<td><code>Bool?</code></td>\n<td><code>Bool</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>NSData?</code></td>\n<td><code>NSData</code></td>\n<td><code>NSData()</code></td>\n</tr>\n<tr>\n<td><code>[AnyObject]?</code></td>\n<td><code>[AnyObject]</code></td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td><code>[String: AnyObject]?</code></td>\n<td><code>[String: AnyObject]</code></td>\n<td><code>[:]</code></td>\n</tr>\n<tr>\n<td><code>NSDate?</code></td>\n<td>n/a</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td><code>NSURL?</code></td>\n<td>n/a</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td><code>AnyObject?</code></td>\n<td>n/a</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td><code>NSString?</code></td>\n<td><code>NSString</code></td>\n<td><code>""</code></td>\n</tr>\n<tr>\n<td><code>NSArray?</code></td>\n<td><code>NSArray</code></td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td><code>NSDictionary?</code></td>\n<td><code>NSDictionary</code></td>\n<td><code>[:]</code></td>\n</tr>\n</tbody>\n</table>\n<p>You can mark a type as optional to get <code>nil</code> if the key doesn't exist. Otherwise, you'll get a default value that makes sense for a given type.</p>\n\n<h4>\n<a id="user-content-typed-arrays" class="anchor" href="#typed-arrays" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Typed arrays</h4>\n\n<p>Additionally, typed arrays are available for these types:</p>\n\n<table>\n<thead><tr>\n<th>Array type</th>\n<th>Optional variant</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>[String]</code></td>\n<td><code>[String]?</code></td>\n</tr>\n<tr>\n<td><code>[Int]</code></td>\n<td><code>[Int]?</code></td>\n</tr>\n<tr>\n<td><code>[Double]</code></td>\n<td><code>[Double]?</code></td>\n</tr>\n<tr>\n<td><code>[Bool]</code></td>\n<td><code>[Bool]?</code></td>\n</tr>\n<tr>\n<td><code>[NSData]</code></td>\n<td><code>[NSData]?</code></td>\n</tr>\n<tr>\n<td><code>[NSDate]</code></td>\n<td><code>[NSDate]?</code></td>\n</tr>\n</tbody>\n</table>\n<h3>\n<a id="user-content-custom-types" class="anchor" href="#custom-types" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Custom types</h3>\n\n<p>You can easily store custom <code>NSCoding</code>-compliant types by extending <code>NSUserDefaults</code> with this stub subscript:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> NSUserDefaults {\n    <span class="pl-k">subscript</span>(key: DefaultsKey<span class="pl-k">&lt;</span>NSColor?<span class="pl-k">&gt;</span>) <span class="pl-k">-&gt;</span> NSColor? {\n        <span class="pl-k">get</span> { <span class="pl-k">return</span> unarchive(key) }\n        <span class="pl-k">set</span> { archive(key, newValue) }\n    }\n}</pre></div>\n\n<p>Just copy&amp;paste this and change <code>NSColor</code> to your class name.</p>\n\n<p>Here's a usage example:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> DefaultsKeys {\n    <span class="pl-k">static</span> <span class="pl-k">let</span> color <span class="pl-k">=</span> DefaultsKey<span class="pl-k">&lt;</span>NSColor?<span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>)\n}\n\nDefaults[<span class="pl-k">.</span>color] <span class="pl-c">// =&gt; nil</span>\nDefaults[<span class="pl-k">.</span>color] <span class="pl-k">=</span> NSColor<span class="pl-k">.</span>whiteColor()\nDefaults[<span class="pl-k">.</span>color] <span class="pl-c">// =&gt; w 1.0, a 1.0</span>\nDefaults[<span class="pl-k">.</span>color]?<span class="pl-k">.</span>whiteComponent <span class="pl-c">// =&gt; 1.0</span></pre></div>\n\n<h4>\n<a id="user-content-custom-types-with-default-values" class="anchor" href="#custom-types-with-default-values" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Custom types with default values</h4>\n\n<p>If you don't want to deal with <code>nil</code> when fetching a user default value, you can remove <code>?</code> marks and supply the default value, like so:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> NSUserDefaults {\n    <span class="pl-k">subscript</span>(key: DefaultsKey<span class="pl-k">&lt;</span>NSColor<span class="pl-k">&gt;</span>) <span class="pl-k">-&gt;</span> NSColor {\n        <span class="pl-k">get</span> { <span class="pl-k">return</span> unarchive(key) <span class="pl-k">??</span> NSColor<span class="pl-k">.</span>clearColor() }\n        <span class="pl-k">set</span> { archive(key, newValue) }\n    }\n}</pre></div>\n\n<h4>\n<a id="user-content-enums" class="anchor" href="#enums" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Enums</h4>\n\n<p>In addition to <code>NSCoding</code>, you can store <code>enum</code> values the same way:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">enum</span> MyEnum: <span class="pl-c1">String</span> {\n    <span class="pl-k">case</span> A, B, C\n}\n\n<span class="pl-k">extension</span> NSUserDefaults {\n    <span class="pl-k">subscript</span>(key: DefaultsKey<span class="pl-k">&lt;</span>MyEnum?<span class="pl-k">&gt;</span>) <span class="pl-k">-&gt;</span> MyEnum? {\n        <span class="pl-k">get</span> { <span class="pl-k">return</span> unarchive(key) }\n        <span class="pl-k">set</span> { archive(key, newValue) }\n    }\n}</pre></div>\n\n<p>The only requirement is that the enum has to be <code>RawRepresentable</code> by a simple type like <code>String</code> or <code>Int</code>.</p>\n\n<h3>\n<a id="user-content-existence" class="anchor" href="#existence" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Existence</h3>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">if</span> <span class="pl-k">!</span>Defaults<span class="pl-k">.</span>hasKey(<span class="pl-k">.</span>hotkey) {\n    Defaults<span class="pl-k">.</span>remove(<span class="pl-k">.</span>hotkeyOptions)\n}</pre></div>\n\n<p>You can use the <code>hasKey</code> method to check for key's existence in the user defaults. <code>remove()</code> is an alias for <code>removeObjectForKey()</code>, that also works with <code>DefaultsKeys</code> shortcuts.</p>\n\n<h3>\n<a id="user-content-shared-user-defaults" class="anchor" href="#shared-user-defaults" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Shared user defaults</h3>\n\n<p>If you're sharing your user defaults between different apps or an app and its extensions, you can use SwiftyUserDefaults by overriding the <code>Defaults</code> shortcut with your own. Just add in your app:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">var</span> Defaults <span class="pl-k">=</span> NSUserDefaults(suiteName: <span class="pl-s"><span class="pl-pds">"</span>com.my.app<span class="pl-pds">"</span></span>)<span class="pl-k">!</span></pre></div>\n\n<h2>\n<a id="user-content-traditional-api" class="anchor" href="#traditional-api" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Traditional API</h2>\n\n<p>There's also a more traditional string-based API available. This is considered legacy API, and it's recommended that you use statically defined keys instead.</p>\n\n<div class="highlight highlight-source-swift"><pre>Defaults[<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>string            <span class="pl-c">// returns String?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>launchCount<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>int         <span class="pl-c">// returns Int?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>chimeVolume<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>double      <span class="pl-c">// returns Double?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>loggingEnabled<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>bool     <span class="pl-c">// returns Bool?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>lastPaths<span class="pl-pds">"</span></span>]<span class="pl-k">.</span><span class="pl-c1">array</span>         <span class="pl-c">// returns NSArray?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>credentials<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>dictionary  <span class="pl-c">// returns NSDictionary?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>hotkey<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>data             <span class="pl-c">// returns NSData?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>firstLaunchAt<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>date      <span class="pl-c">// returns NSDate?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>anything<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>object         <span class="pl-c">// returns NSObject?</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>anything<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>number         <span class="pl-c">// returns NSNumber?</span></pre></div>\n\n<p>When you don't want to deal with the <code>nil</code> case, you can use these helpers that return a default value for non-existing defaults:</p>\n\n<div class="highlight highlight-source-swift"><pre>Defaults[<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>]<span class="pl-k">.</span><span class="pl-c1">stringValue</span>            <span class="pl-c">// defaults to ""</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>launchCount<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>intValue         <span class="pl-c">// defaults to 0</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>chimeVolume<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>doubleValue      <span class="pl-c">// defaults to 0.0</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>loggingEnabled<span class="pl-pds">"</span></span>]<span class="pl-k">.</span><span class="pl-c1">boolValue</span>     <span class="pl-c">// defaults to false</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>lastPaths<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>arrayValue         <span class="pl-c">// defaults to []</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>credentials<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>dictionaryValue  <span class="pl-c">// defaults to [:]</span>\nDefaults[<span class="pl-s"><span class="pl-pds">"</span>hotkey<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>dataValue             <span class="pl-c">// defaults to NSData()</span></pre></div>\n\n<h2>\n<a id="user-content-installation" class="anchor" href="#installation" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Installation</h2>\n\n<h4>\n<a id="user-content-cocoapods" class="anchor" href="#cocoapods" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>CocoaPods</h4>\n\n<p>If you're using CocoaPods, just add this line to your Podfile:</p>\n\n<div class="highlight highlight-source-ruby"><pre>pod <span class="pl-s"><span class="pl-pds">'</span>SwiftyUserDefaults<span class="pl-pds">'</span></span></pre></div>\n\n<p>Install by running this command in your terminal:</p>\n\n<div class="highlight highlight-source-shell"><pre>pod install</pre></div>\n\n<p>Then import the library in all files where you use it:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">import</span> <span class="pl-c1">SwiftyUserDefaults</span></pre></div>\n\n<h4>\n<a id="user-content-carthage" class="anchor" href="#carthage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Carthage</h4>\n\n<p>Just add to your Cartfile:</p>\n\n<div class="highlight highlight-source-ruby"><pre>github <span class="pl-s"><span class="pl-pds">"</span>radex/SwiftyUserDefaults<span class="pl-pds">"</span></span></pre></div>\n\n<h4>\n<a id="user-content-manually" class="anchor" href="#manually" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Manually</h4>\n\n<p>Simply copy <code>Sources/SwiftyUserDefaults.swift</code> to your Xcode project.</p>\n\n<h2>\n<a id="user-content-more-like-this" class="anchor" href="#more-like-this" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>More like this</h2>\n\n<p>If you like SwiftyUserDefaults, check out <a href="https://github.com/radex/SwiftyTimer">SwiftyTimer</a>, which applies the same swifty approach to <code>NSTimer</code>.</p>\n\n<p>You might also be interested in my blog posts which explain the design process behind those libraries:</p>\n\n<ul>\n<li><a href="http://radex.io/swift/nsuserdefaults/">Swifty APIs: NSUserDefaults</a></li>\n<li><a href="http://radex.io/swift/nsuserdefaults/static">Statically-typed NSUserDefaults</a></li>\n<li><a href="http://radex.io/swift/nstimer/">Swifty APIs: NSTimer</a></li>\n<li><a href="http://radex.io/swift/methods/">Swifty methods</a></li>\n</ul>\n<h3>\n<a id="user-content-contributing" class="anchor" href="#contributing" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Contributing</h3>\n\n<p>If you have comments, complaints or ideas for improvements, feel free to open an issue or a pull request. Or <a href="http://twitter.com/radexp">ping me on Twitter</a>.</p>\n\n<h3>\n<a id="user-content-author-and-license" class="anchor" href="#author-and-license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Author and license</h3>\n\n<p>Radek Pietruszewski</p>\n\n<ul>\n<li><a href="http://github.com/radex">github.com/radex</a></li>\n<li><a href="http://twitter.com/radexp">twitter.com/radexp</a></li>\n<li><a href="http://radex.io">radex.io</a></li>\n<li><a href="mailto:this.is@radex.io">this.is@radex.io</a></li>\n</ul>\n<p>SwiftyUserDefaults is available under the MIT license. See the LICENSE file for more info.</p>\n	Read Statically-typed NSUserDefaults for more information about this project. Features \n    Usage \n    Custom types \n    Traditional API  \n    Installation  \n    More info There's only two steps to using SwiftyUserDefaults: Step 1: Define your keys Step 2: Just use it! The convenient dot syntax is only available if you define your keys by extending magic  class. You can also just pass the  value in square brackets, or use a more traditional string-based API. How? Keep reading. To get the most out of SwiftyUserDefaults, define your user defaults keys ahead of time: Just create a  object, put the type of the value you want to store in angle brackets, the key name in parentheses, and you're good to go. You can now use the  shortcut to access those values: The compiler won't let you set a wrong value type, and fetching conveniently returns . For extra convenience, define your keys by extendin	\N	2016-04-25 08:35:48.458038	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	https://camo.githubusercontent.com/98109d08c6cc43619808c1ddcf9d6ecc2ca2f721/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d696f732532302537432532306f737825323025374325323077617463686f7325323025374325323074766f732d6c69676874677265792e737667	0
31c601c9-fb0c-4711-9234-003764650132	18	0	Swift: filter	http://www.thomashanning.com/swift-filter/	swift-filter	{"version":"1.0","provider_name":"Thomas Hanning","provider_url":"http://www.thomashanning.com","author_name":"Thomas","author_url":"http://www.thomashanning.com/author/thomas/","title":"Swift: filter","type":"rich","width":600,"height":338,"html":"\\u003cblockquote class=\\"wp-embedded-content\\"\\u003e\\u003ca href=\\"http://www.thomashanning.com/swift-filter/\\"\\u003eSwift: filter\\u003c/a\\u003e\\u003c/blockquote\\u003e\\n\\u003cscript type='text/javascript'\\u003e\\n\\u003c!--//--\\u003e\\u003c![CDATA[//\\u003e\\u003c!--\\n\\t\\t!function(a,b){\\"use strict\\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\\"MSIE 10\\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\\\./),i=b.querySelectorAll(\\"iframe.wp-embedded-content\\"),j=b.querySelectorAll(\\"blockquote.wp-embedded-content\\");for(c=0;c\\u003cj.length;c++)j[c].style.display=\\"none\\";for(c=0;c\\u003ci.length;c++)if(d=i[c],d.style.display=\\"\\",!d.getAttribute(\\"data-secret\\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\\"#?secret=\\"+f,d.setAttribute(\\"data-secret\\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\\"security\\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\\"'+d.secret+'\\"]'),k=b.querySelectorAll('blockquote[data-secret=\\"'+d.secret+'\\"]');for(e=0;e\\u003ck.length;e++)k[e].style.display=\\"none\\";for(e=0;e\\u003cj.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display=\\"\\",\\"height\\"===d.message){if(g=parseInt(d.value,10),g\\u003e1e3)g=1e3;else if(200\\u003e~~g)g=200;f.height=g}if(\\"link\\"===d.message)if(h=b.createElement(\\"a\\"),i=b.createElement(\\"a\\"),h.href=f.getAttribute(\\"src\\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\\"message\\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\\"DOMContentLoaded\\",c,!1),a.addEventListener(\\"load\\",c,!1)}(window,document);\\n//--\\u003e\\u003c!]]\\u003e\\n\\u003c/script\\u003e\\u003ciframe sandbox=\\"allow-scripts\\" security=\\"restricted\\" src=\\"http://www.thomashanning.com/swift-filter/embed/\\" width=\\"600\\" height=\\"338\\" title=\\"Embedded WordPress Post\\" frameborder=\\"0\\" marginwidth=\\"0\\" marginheight=\\"0\\" scrolling=\\"no\\" class=\\"wp-embedded-content\\"\\u003e\\u003c/iframe\\u003e","thumbnail_url":"http://www.thomashanning.com/wp-content/uploads/2016/04/filter.png","thumbnail_width":600,"thumbnail_height":399}	Swift: filter - Thomas Hanning	[]	thomashanning.com	1	32479	2016-04-25 08:39:39.482919	2016-04-25 08:39:40.384452	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Swift provides you some handy functions like filter and map for manipulating arrays. In this post we will take a look at filter and how you can combine it with map.","title":"Swift: filter","url":"http://www.thomashanning.com/swift-filter/","site_name":"Thomas Hanning","type":"article","image":"http://12572-presscdn-0-99.pagely.netdna-cdn.com/wp-content/uploads/2016/04/filter.png"}	<p><strong>Swift provides you some handy functions like filter and map for manipulating arrays. In this post we will take a look at filter and how you can combine it with map.</strong></p>\n<p>So, let’s imagine you have an array and you want to to create a new array that has all elements of the array that are bigger than 10. You can do this by using a for loop:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571d8ae0d1154803741199" class="crayon-syntax crayon-theme-xcode crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nlet anArray = Array(1...20)\r\n\r\nvar anotherArray = [Int]()\r\n\r\nfor i in anArray {\r\n    if i &gt; 10 {\r\n        anotherArray.append(i)\r\n    }\r\n}\r\n\r\nprint(anotherArray) // [11,12,13,14,15,16,17,18,19,20]</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1154803741199-2">2</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1154803741199-4">4</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1154803741199-6">6</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1154803741199-8">8</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1154803741199-10">10</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1154803741199-11">11</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e ">Array</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-o">...</span><span class="crayon-cn">20</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1154803741199-2"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-3">\n<span class="crayon-r">var</span><span class="crayon-h"> </span><span class="crayon-v">anotherArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-t">Int</span><span class="crayon-sy">]</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1154803741199-4"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-5">\n<span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-e">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">anArray</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1154803741199-6">\n<span class="crayon-h">    </span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-e">i</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-7">\n<span class="crayon-h">        </span><span class="crayon-v">anotherArray</span><span class="crayon-sy">.</span><span class="crayon-v ">append</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1154803741199-8">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-9"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1154803741199-10"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1154803741199-11">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">anotherArray</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// [11,12,13,14,15,16,17,18,19,20]</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0021 seconds] -->\r\n<p>\nThat works great, but it’s also a lot of code.</p>\n<h3>Filter</h3>\n<p>But thereis a shorter way by using the function \r\n\t\t\t<span id="crayon-571d8ae0d115d855112757" class="crayon-syntax crayon-syntax-inline  crayon-theme-xcode crayon-theme-xcode-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">filter</span></span></span>that is available on every array:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571d8ae0d1162222591302" class="crayon-syntax crayon-theme-xcode crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nlet anotherArray = anArray.filter({ (a:Int) -&gt; Bool in\r\n    return a &gt; 10\r\n})\r\n\r\nprint(anotherArray)</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571d8ae0d1162222591302-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1162222591302-2">2</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1162222591302-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1162222591302-4">4</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1162222591302-5">5</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571d8ae0d1162222591302-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">anotherArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-sy">.</span><span class="crayon-v ">filter</span><span class="crayon-sy">(</span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">a</span><span class="crayon-o">:</span><span class="crayon-t">Int</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-t">Bool</span><span class="crayon-h"> </span><span class="crayon-st">in</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1162222591302-2">\n<span class="crayon-h">    </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span>\n</div>\n<div class="crayon-line" id="crayon-571d8ae0d1162222591302-3">\n<span class="crayon-sy">}</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1162222591302-4"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1162222591302-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">anotherArray</span><span class="crayon-sy">)</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0009 seconds] -->\r\n<p>\nThe function takes a closure as an argument. The closure itself gets a value of the array type as an argument and returns a bool. The closure will be executed on every value of the array and within the closure you decide whether the value should be contained in the new array or not.</p>\n<p>By using one of Swift’s short cuts to write a closure, you can also do it as follows:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571d8ae0d1166162063495" class="crayon-syntax crayon-theme-xcode crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nlet anotherArray = anArray.filter ({$0 &gt; 10})\r\n\r\nprint(anotherArray) // [11,12,13,14,15,16,17,18,19,20]</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571d8ae0d1166162063495-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1166162063495-2">2</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1166162063495-3">3</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571d8ae0d1166162063495-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">anotherArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-sy">.</span><span class="crayon-v ">filter</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-sy">{</span><span class="crayon-sy">$</span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-sy">}</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1166162063495-2"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1166162063495-3">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">anotherArray</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// [11,12,13,14,15,16,17,18,19,20]</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0006 seconds] -->\r\n<p>\nCompared to the first version, this is very short.</p>\n<h3><strong>Combined with map</strong></h3>\n\r\n\t\t\t<span id="crayon-571d8ae0d116b400492857" class="crayon-syntax crayon-syntax-inline  crayon-theme-xcode crayon-theme-xcode-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">map</span></span></span>is another interesting function that is available on an array. It also takes aclosure andreturns a transformed element. So now we first filter the array for every value that is greater than ten, and then we will double that value:<br><!-- Crayon Syntax Highlighter v_2.7.2_beta --><div id="crayon-571d8ae0d1170585299707" class="crayon-syntax crayon-theme-xcode crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nlet anArray = Array(1...20)\r\n\r\nlet anotherArray = anArray.filter({$0 &gt; 10}).map({$0 * 2})\r\n\r\nprint(anotherArray) // [22, 24, 26, 28, 30, 32, 34, 36, 38, 40]</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571d8ae0d1170585299707-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1170585299707-2">2</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1170585299707-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571d8ae0d1170585299707-4">4</div>\n<div class="crayon-num" data-line="crayon-571d8ae0d1170585299707-5">5</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571d8ae0d1170585299707-1">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e ">Array</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-o">...</span><span class="crayon-cn">20</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1170585299707-2"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1170585299707-3">\n<span class="crayon-r">let</span><span class="crayon-h"> </span><span class="crayon-v">anotherArray</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-sy">.</span><span class="crayon-v ">filter</span><span class="crayon-sy">(</span><span class="crayon-sy">{</span><span class="crayon-sy">$</span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">&gt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-sy">}</span><span class="crayon-sy">)</span><span class="crayon-sy">.</span><span class="crayon-v ">map</span><span class="crayon-sy">(</span><span class="crayon-sy">{</span><span class="crayon-sy">$</span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">}</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571d8ae0d1170585299707-4"> </div>\n<div class="crayon-line" id="crayon-571d8ae0d1170585299707-5">\n<span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-v">anotherArray</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// [22, 24, 26, 28, 30, 32, 34, 36, 38, 40]</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0011 seconds] -->\r\n\nFore more details about \r\n\t\t\t<span id="crayon-571d8ae0d1174411767404" class="crayon-syntax crayon-syntax-inline  crayon-theme-xcode crayon-theme-xcode-inline crayon-font-monaco" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important;"><span class="crayon-pre crayon-code" style="font-size: 12px !important; line-height: 15px !important;font-size: 12px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><span class="crayon-v">map</span></span></span>, take a look at <a href="http://www.thomashanning.com/swift-map-and-flatmap/">one of my previous blog posts</a>.\n<p>However, you should only doit this way if the terms are not too complicated. If they are, it will becomevery difficult to read. Generally speaking, you should always write more code, if this leads to more readable code.</p>\n<h3>References</h3>\n<p>Title Image: @Joe Belanger/ shutterstock.com</p>\n<span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid red;"></span><span style="display:none" class="tl-placeholder-f-type-post_footer"></span>	Swift provides you some handy functions like filter and map for manipulating arrays. In this post we will take a look at filter and how you can combine it with map. So, let's imagine you have an array and you want to to create a new array that has all elements of the array that are bigger than 10. You can do this by using a for loop: That works great, but it's also a lot of code. But thereis a shorter way by using the function \r\n\t\t\tfilterthat is available on every array: The function takes a closure as an argument. The closure itself gets a value of the array type as an argument and returns a bool. The closure will be executed on every value of the array and within the closure you decide whether the value should be contained in the new array or not. By using one of Swift's short cuts to write a closure, you can also do it as follows: Compared to the first version, this is very short. Howe	\N	2016-04-25 08:39:39.480611	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
2f89a439-bc32-4d89-ae43-d27dd17740ce	21	0	Ready for the Future: Writing Better Swift, with Daniel Steinberg	https://realm.io/news/doios-daniel-steinberg-ready-for-the-future/	ready-for-the-future-writing-better-swift-with-daniel-steinberg	{}	Ready for the Future: Writing Better Swift, with Daniel Steinberg - Realm is a mobile database: a replacement for SQLite & Core Data	[{"type":"icon","href":"/img/favicon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/img/favicon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/img/favicon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/img/favicon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/img/favicon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/img/favicon-152x152.png","sizes":"152x152","width":152,"height":152}]	realm.io	2	32481.3010299999987	2016-04-26 13:19:59.258702	2016-04-26 13:20:08.340286	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Swift is brand spanking new. How can we possibly be expected to write idiomatic code? On the other hand, Objective-C has been around for more than thirty years. We know what it looks like and feels like. The Objective-C of our iOS youth is very different than today’s Objective-C. Seen in this light, Swift is more evolutionary than you might think. In this do {iOS} talk by Daniel Steinberg, we’ll look at Swift code in the light of the code of Objective-C and other languages that have come before it, and learn how to write code that is a pleasure for others to read. Join us in making lasagne with Daniel’s delicious, readable, and testable recipe.","title":"Ready for the Future: Writing Better Swift, with Daniel Steinberg","url":null,"site_name":null,"type":"Article","image":"https://realm.io/assets/news/doios-daniel-steinberg-cover.png"}	\n<section class="newsletter-meetup" style="text-align:center"><a class="btn btn-lg btn-primary" href="http://eepurl.com/2mbQX" target="_blank" onclick="ga('send', {'hitType': 'event', 'eventCategory': 'English', 'eventAction': 'clickArticleNewsletterTop', 'eventLabel': window.location.pathname});">Get new videos &amp; tutorials</a>\n<small>-- we won't email you for any other reason, ever.</small>\n</section><hr>\n<div class="author-info">\n<div class="author-info-name">\nAbout the Speaker: Daniel Steinberg\n</div>\n<div class="author-info-bio">\n<p>Daniel is the author of the books 'A Swift Kickstart' and 'Developing iOS 7 Apps for iPad and iPhone', the official companion book to the popular iTunes U series from Stanford University. Daniel presents iPhone, Cocoa, and Swift training and consults through his company Dim Sum Thinking. He is also the host of the CocoaConf Podcast.</p>\n</div>\n<div class="author-info-links">\n<a href="https://twitter.com/dimsumthinking" target="_blank" class="author-info-link">\n<i class="fa fa-twitter"></i>@dimsumthinking\n</a>\n<a href="http://dimsumthinking.com/index.html" target="_blank" class="author-info-link">\n<i class="fa fa-link"></i>Website\n</a>\n</div>\n</div>\n<hr>\n<h3 id="lasagne-coding-000javascriptpresentzchangechapter00true">Lasagne Coding <a href="javascript:presentz.changeChapter(0,0,true);">(0:00)</a>\n</h3>\n<p>I want to start with a recipe for lasagne. This lasagne is context-specific: it depends on what you know about each one of these steps. For a chef, each one of those steps means one thing; for a home cook, they mean something else. For example, bolognese sauce for a home cook might mean they know how to cook it, but it also might mean they go and get a jar of it to open.</p>\n<p>Bchamel sauce is a different matter altogether. Bchamel is actually an important sauce to cooks, and it's not really good from a jar. It's what we call a "mother sauce." (In classic French cooking, there are five mother sauces, and a lot of sauces stem from those.)</p>\n<p>We might have a recipe for lasagne, and it might have to break out what we mean by a bchamel sauce. First, you make a roux out of butter and flour, you add milk to it, then you season it to taste. That gives you a pretty good sauce for lasagne.</p>\n<h3 id="objective-c-context-302javascriptpresentzchangechapter06true">Objective-C Context <a href="javascript:presentz.changeChapter(0,6,true);">(3:02)</a>\n</h3>\n<p>Despite what you've heard, Objective-C isn't dead. There's nothing wrong with Objective-C. It's a lovely language, but you won't find work if you stay with it. In an example from a class I teach, there's just a simple timer. I want to show you a little bit of the model.</p>\n<p>There's the <code class="highlighter-rouge">elapsedTime</code> method, and that's what returns the time being displayed. That's what gets the callback. Classically, we create a new instance of an <code class="highlighter-rouge">NSDate</code> with <code class="highlighter-rouge">alloc init</code>. Do you Swifters remember <code class="highlighter-rouge">alloc init</code>? We will then calculate the elapsed time. One of the things in Swift that I really miss is an asterisk, because I can look at this code and tell that an <code class="highlighter-rouge">NSDate</code> is a reference type and an <code class="highlighter-rouge">NSTimeInterval</code> isn't. In Swift, we don't have that clue, which is kind of a shame.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-objc" data-lang="objc"><span class="k">-</span> <span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="n">elapsedTime</span> <span class="p">{</span>\n    <span class="n">NSDate</span> <span class="o">*</span><span class="n">now</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDate</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">]</span>\n    <span class="n">NSTimeInterval</span> <span class="n">elapsedTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">now</span> <span class="nf">timeIntervalSinceDate</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">startTime</span><span class="p">];</span>\n    <span class="k">return</span> <span class="n">elapsedTime</span><span class="p">;</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>We calculate the elapsed time and then we return it, and that's what our <code class="highlighter-rouge">elapsedTime</code> method does. If you're aggressive, these three lines can be replaced with this one line.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-objc" data-lang="objc"><span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="nf">timeIntervalSinceNow</span><span class="p">];</span></code></pre>\n</div>\n<p>There's a <code class="highlighter-rouge">timeIntervalSinceNow</code>, and this is wonderful, except the result is a negative time. Context.</p>\n<p>We want to get rid of that negative. We can get rid of it in code by placing a negative out front of that, but then every time someone gets to that line of code, they have to stop and think, "Why is there a minus sign out front?"</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-objc" data-lang="objc"><span class="k">return</span> <span class="o">-</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="nf">timeIntervalSinceNow</span><span class="p">];</span></code></pre>\n</div>\n<p>The context that the minus sign belongs to is missing. It's not in your head when you're looking at this code. The problem is that Cocoa has a method, <code class="highlighter-rouge">timeIntervalSinceNow</code>, and what we really wish it had was a method called <code class="highlighter-rouge">timeIntervalUntilNow</code>.</p>\n<p>We know how to use categories, so let's make one up. We won't worry about name spacing for now.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-objc" data-lang="objc"><span class="k">@interface</span> <span class="nc">NSDate</span> <span class="p">(</span><span class="nl">TimeCalculations</span><span class="p">)</span>\n<span class="err">-</span> <span class="err">(</span><span class="nc">NSTimeInterval</span><span class="p">)</span><span class="n">timeIntervalUntilNow</span><span class="p">;</span>\n<span class="k">@end</span></code></pre>\n</div>\n<p>This is our header file, which I miss from Objective-C too. It tells me exactly what I'm allowed to call. Other than that, I'm all in with Swift. Love it.</p>\n<p>Here's a category on top of <code class="highlighter-rouge">NSDate</code> that I'm calling <code class="highlighter-rouge">TimerCalculations</code>. I declared this method that I want, and then I jump over to the implementation file, and I implement the method. <code class="highlighter-rouge">timeIntervalUntilNow</code> is what I get when I return the negative of <code class="highlighter-rouge">timeIntervalSinceNow</code>.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-objc" data-lang="objc"><span class="k">@implementation</span> <span class="nc">NSDate</span> <span class="p">(</span><span class="nl">TimeCalculations</span><span class="p">)</span>\n<span class="err">-</span> <span class="err">(</span><span class="nc">NSTimeInterval</span><span class="p">)</span><span class="n">timeIntervalUntilNow</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="o">-</span><span class="p">[</span><span class="n">self</span> <span class="nf">timeIntervalSinceNow</span><span class="p">]</span>\n  <span class="p">}</span>\n<span class="k">@end</span></code></pre>\n</div>\n<p>You may say, "Well, Daniel, it's got that same minus sign." Yes, but now it's in <strong>context</strong>. That minus sign is completely documented. I say that <code class="highlighter-rouge">timeIntervalUntilNow</code> is the negative of <code class="highlighter-rouge">timeIntervalSinceNow</code>, and it makes complete sense to me and to other people that come to my code. <strong>By providing context, you'll write code that's clean, clear, and like lasagne.</strong></p>\n<p>No more confusing things here; I'm just calling <code class="highlighter-rouge">timeIntervalUntilNow</code>, and in the bchamel sauce is where I have my negative sign. That's nice and clean.</p>\n<h3 id="swift-timer-example-722javascriptpresentzchangechapter012true">Swift Timer Example <a href="javascript:presentz.changeChapter(0,12,true);">(7:22)</a>\n</h3>\n<p>Now, it would be cleaner if we didn't need <code class="highlighter-rouge">self</code> and square brackets and semicolons, but perhaps I get ahead of myself. Let's look at the model in Swift.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Timer</span> <span class="p">{</span>\n    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">NSDate</span><span class="p">()</span>\n    \n    <span class="k">var</span> <span class="nv">elapsedTime</span><span class="p">:</span> <span class="kt">NSTimeInterval</span> <span class="p">{</span>\n        <span class="k">return</span> <span class="n">startTime</span><span class="o">.</span><span class="n">timeIntervalUntilNow</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>In Swift, the model is a little cleaner. I love properties in Swift. In Objective-C, I have to import a header file, declare a property, initialize it in viewDidLoad or somewhere else. I love that I could just create a new <code class="highlighter-rouge">NSDate</code> instance like this.</p>\n<p>In my <code class="highlighter-rouge">Timer</code> struct and I create my <code class="highlighter-rouge">elapsedTime</code> - I don't know if you've noticed, but in Swift we have a tendency to prefer to implement simple methods as a computed property instead.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">NSDate</span> <span class="p">{</span>\n    <span class="k">var</span> <span class="nv">timeIntervalUntilNow</span><span class="p">:</span> <span class="kt">NSTimeInterval</span> <span class="p">{</span>\n        <span class="k">return</span> <span class="o">-</span><span class="n">timeIntervalSinceNow</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>We just call <code class="highlighter-rouge">startTime</code> and <code class="highlighter-rouge">timeIntervalUntilNow</code>, and we don't implement that in a category anymore. We implement it in an extension in the same file so it doesn't pollute our code base We extend <code class="highlighter-rouge">NSDate</code> and just return the opposite of timeIntervalSinceNow.</p>\n<p>To me, this is a description of the "sauce on the side". This is one of the sauces. In the same file, I provide detail, so we're creating a nice lasagne here, with code that is clean, compact, clear, and testable. It's a bit of a cheat since we started with Objective-C and converted to Swift, so we're not really doing anything hard or clever, yet you get pretty far.</p>\n<p>When you're first learning Swift coming from Objective-C, you think you'll just write Objective-C things using a new syntax. But that's not thinking in Swift; you're just transliterating. To think in Swift, we have to do things differently.</p>\n<h3 id="app-sales-swift--dangerous-946javascriptpresentzchangechapter016true">App Sales: Swift &amp; Dangerous <a href="javascript:presentz.changeChapter(0,16,true);">(9:46)</a>\n</h3>\n<p>Say I want to track app sales for a week. I want seven data points. I'm going to do it randomly, using GameplayKit, and I'm going to create a <code class="highlighter-rouge">SequenceType</code>.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">GameplayKit</span>\n<span class="kd">struct</span> <span class="kt">AppSales</span><span class="p">:</span> <span class="kt">SequenceType</span> <span class="p">{</span>\n    <span class="k">let</span> <span class="nv">numberOfDays</span><span class="p">:</span> <span class="kt">Int</span>\n    <span class="k">let</span> <span class="nv">randomDistribution</span> <span class="o">=</span> <span class="kt">GKGaussianDistribution</span><span class="p">(</span><span class="nv">lowestValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">highestValue</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>\n    \n    <span class="kd">func</span> <span class="nf">generate</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">AnyGenerator</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span> <span class="p">{</span>\n        <span class="k">var</span> <span class="nv">count</span> <span class="o">=</span> <span class="mi">0</span>\n        <span class="k">return</span> <span class="nf">anyGenerator</span><span class="p">({</span>\n            <span class="k">if</span> <span class="n">count</span><span class="o">++</span> <span class="o">&lt;</span> <span class="k">self</span><span class="o">.</span><span class="n">numberOfDays</span> <span class="p">{</span>\n                <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">randomDistribution</span><span class="o">.</span><span class="nf">nextInt</span><span class="p">()</span>\n            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="k">return</span> <span class="kc">nil</span>\n            <span class="p">}</span>\n        <span class="p">})</span>\n    <span class="p">}</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>I love this call to GameplayKit. This call says, "I'm creating a Gaussian distribution between zero and 10, and it means most days I'll sell around five copies." I'll get the hump of my Gaussian distribution, with a little less on either side. So I'll sell about five copys per day.</p>\n<p>The <code class="highlighter-rouge">generate</code> method is where we're going to generate these things that make up our <code class="highlighter-rouge">SequenceType</code>. So, if I haven't gotten to the number of days that I've specified, then I'm going to go ahead and give you the next integer in my Gaussian distribution. Otherwise, if you've exhausted the days of the week, I'm going to return nil.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksSales</span> <span class="o">=</span> <span class="kt">AppSales</span><span class="p">(</span><span class="nv">numberOfDays</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span></code></pre>\n</div>\n<p><code class="highlighter-rouge">SequenceType</code> has become really important to Apple. Map, filter, reduce have all been moved into the protocol extension for <code class="highlighter-rouge">SequenceType</code>.</p>\n<p>Icreate an instance of last week's sales that feels like an array, but it's not. Remember, it is a <code class="highlighter-rouge">SequenceType</code>, so there are things I can do.</p>\n<p>Fast enumeration is implemented on <code class="highlighter-rouge">SequenceType</code> in a really nice way; it just calls next, next, next, until it gets to nil, and then it stops. That's how fast enumeration works. So <code class="highlighter-rouge">for in</code> works really nicely. Once I've got last week's sales, I can just fast enumerate through it.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksSales</span> <span class="o">=</span> <span class="kt">AppSales</span><span class="p">(</span><span class="nv">numberOfDays</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>\n<span class="k">for</span> <span class="n">dailySales</span> <span class="k">in</span> <span class="n">lastWeeksSales</span> <span class="p">{</span>\n    <span class="nf">print</span><span class="p">(</span><span class="n">dailySales</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="o">-&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span></code></pre>\n</div>\n<p>I print out my daily sales. Notice that they're clustered around five. I've got my types.</p>\n<p>The other thing is that because <code class="highlighter-rouge">AppSales</code> is a <code class="highlighter-rouge">SequenceType</code>, it supports all of map, filter, reduce, and flatMap, but if you feed it a <code class="highlighter-rouge">SequenceType</code>, what it gives you back is an array. If you feed it a <code class="highlighter-rouge">SequenceType</code> that is a sequence of <code class="highlighter-rouge">Int</code>s, it's going to give you back an array of <code class="highlighter-rouge">Int</code>s by design.</p>\n<h3 id="mapping-with-context-1204javascriptpresentzchangechapter021true">Mapping With Context <a href="javascript:presentz.changeChapter(0,21,true);">(12:04)</a>\n</h3>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksSales</span> <span class="o">=</span> <span class="kt">AppSales</span><span class="p">(</span><span class="nv">numberOfDays</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>\n<span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dailySales</span> <span class="k">in</span> \n    <span class="kt">Double</span><span class="p">(</span><span class="n">dailySales</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.99</span> <span class="o">*</span> <span class="mf">0.70</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>We look at last week's sales, and we want to generate the revenues from the sales. We start with that array of <code class="highlighter-rouge">Int</code>s that isn't really an array, but a <code class="highlighter-rouge">SequenceType</code>, and we map it with a closure. We take today's sales, we have to turn it into a <code class="highlighter-rouge">Double</code>. (You don't get automatic type promotion in Swift.)</p>\n<p>I'm selling it for $1.99, and I get to keep 70%. When I look at the results, the <code class="highlighter-rouge">Double</code>s that I get out have lots of decimals, which wouldn't look great in a spreadsheet.</p>\n<p>I think it'd be better if I specified what this $1.99 referred to, because $1.99 for me is in dollars, and 70 is in percents. That's hard for me to remember, because there are two <code class="highlighter-rouge">Double</code>s there. There's no way to think of one as being different from the other because we aren't carrying our context with us.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksSales</span> <span class="o">=</span> <span class="kt">AppSales</span><span class="p">(</span><span class="nv">numberOfDays</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>\n\n<span class="k">let</span> <span class="nv">unitPrice</span> <span class="o">=</span> <span class="mf">1.99</span>\n<span class="k">let</span> <span class="nv">sellersPercentage</span> <span class="o">=</span> <span class="mf">0.70</span>\n\n<span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dailySales</span> <span class="k">in</span> \n    <span class="kt">Double</span><span class="p">(</span><span class="n">dailySales</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.99</span> <span class="o">*</span> <span class="mf">0.70</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>I take out the $1.99, and instead I do this little explaining variable. The unit price is 1.99 dollars, so I'm calculating using the daily sales x the unit price.</p>\n<p>By the way, you can't just type ".70" in Swift and have it know that you mean a <code class="highlighter-rouge">Double</code>. I need to explain what that is. All of a sudden, this calculation communicates better to me. I take my daily sales, I multiply it by the unit price and by the seller's percentage, and that's the money I'm going to keep.</p>\n<p>I have an explaining variable for the unit price and for the seller's percentage. Why don't I do the same thing for the closure? Why don't I pull up that closure, and make a function called <code class="highlighter-rouge">revenuesForCopiesSold</code>? I calculate last week's sales by mapping the daily sales and revenues for copies sold, and I pretty much explained everything I'm doing. I feel confident that when I come to this, I can dig in deep and find out what my bchamel sauce is. This tells me the big picture, and if I have to dig in deeper, I can.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksSales</span> <span class="o">=</span> <span class="kt">AppSales</span><span class="p">(</span><span class="nv">numberOfDays</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>\n\n<span class="k">let</span> <span class="nv">unitPrice</span> <span class="o">=</span> <span class="mf">1.99</span>\n<span class="k">let</span> <span class="nv">sellersPercentage</span> <span class="o">=</span> <span class="mf">0.70</span>\n\n<span class="kd">func</span> <span class="nf">revenuesForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">numberOfCopies</span><span class="p">)</span> <span class="o">*</span> <span class="n">unitPrice</span> <span class="o">*</span> <span class="n">sellersPercentage</span>\n<span class="p">}</span>\n\n<span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dailySales</span> <span class="k">in</span> \n    <span class="nf">revenuesForCopiesSold</span><span class="p">(</span><span class="n">dailySales</span><span class="p">)</span>\n<span class="p">}</span></code></pre>\n</div>\n<h3 id="writing-readable-code-1439javascriptpresentzchangechapter023true">Writing Readable Code <a href="javascript:presentz.changeChapter(0,23,true);">(14:39)</a>\n</h3>\n<p>You aren't really a Swift developer if you don't use <code class="highlighter-rouge">$0</code>. Actually, I prefer this version, where I used the parentheses. I know it's not a trailing closure, but I just put the method name there and I feel pretty good about that.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="n">revenuesForCopiesSold</span> <span class="p">)</span></code></pre>\n</div>\n<p>If one map is good, two maps is clearly better. I'm going to make the distribution wider. It'll go from -5 to 15, so it still averages at five, but I'm going to get more values that are further from five.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">randomDistribution</span> <span class="o">=</span> <span class="kt">GKGaussianDistribution</span><span class="p">(</span><span class="nv">lowestValue</span><span class="p">:</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="nv">highestValue</span><span class="p">:</span> <span class="mi">15</span><span class="p">)</span></code></pre>\n</div>\n<p>Negative sales don't make me happy, so I'd like the negatives to count as zero. I could filter copies and only keep the ones greater than zero. I would just filter the elements that are greater than zero. Big win, I used <code class="highlighter-rouge">$0</code>. I'm feeling like a programmer.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="n">filter</span><span class="p">{</span><span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">}</span>\n                                      <span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="n">revenuesForCopiesSold</span> <span class="p">)</span></code></pre>\n</div>\n<h3 id="solving-unreadable-pain-1649javascriptpresentzchangechapter029true">Solving Unreadable Pain <a href="javascript:presentz.changeChapter(0,29,true);">(16:49)</a>\n</h3>\n<p>I have a week's worth of sales, then I filter it, and I might have fewer than seven values. That might matter, or that might not matter. In this case, it doesn't (but it might!). I want to keep brackets of seven along the way. Since <code class="highlighter-rouge">filter</code> can change the size of the array, I might instead want to map anything that is negative to zero.</p>\n<p>I just change anything that's a negative number to zero, and I reason to myself, "Doesn't happen that much. It's outside two standard deviations..." And I really did that so that I could show you this code.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="n">filter</span><span class="p">{</span><span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="nv">$0</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}</span>\n                                      <span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="n">revenuesForCopiesSold</span> <span class="p">)</span></code></pre>\n</div>\n<p>Because now, I really feel like a programmer. I've got <code class="highlighter-rouge">$0</code> and <code class="highlighter-rouge">0</code> confused so much that I can't remember what's what, and for the win, I have the ternary operator in there. At least somebody on my team won't understand this, and so I win one today.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">negativeNumbersToZero</span><span class="p">(</span><span class="nv">number</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="n">negativeNumbersToZero</span> <span class="p">)</span>\n                                      <span class="o">.</span><span class="nf">map</span><span class="p">(</span> <span class="n">revenuesForCopiesSold</span> <span class="p">)</span></code></pre>\n</div>\n<p>Again, I'm going to pull out that calculation, the target of the map, into its own function. The function <code class="highlighter-rouge">negativeNumbersToZero</code> returns whatever's bigger, zero or the number, and now <code class="highlighter-rouge">lastWeeksRevenues</code> is looking pretty good. I'm going to first map the negative numbers to zero, and then I'm going to figure out what the revenues are for copies sold.</p>\n<p>I know this may look overly simplified, and I'm okay with that. This is feeling pretty readable to me, it's feeling like the steps in lasagne. However, I'm not happy with the map there.</p>\n<p>Why am I exposing that to you? Why do you need to know that that's the process I'm using to find these things? Why don't you put it into its own function? And so, I'm going to come back to the lasagne, and show you how to deal with that.</p>\n<p>First, though, I want to return to the bchamel sauce (as I torture this metaphor). Here again we have this function, <code class="highlighter-rouge">revenuesForCopiesSold</code>, which returned a <code class="highlighter-rouge">Double</code> with an unclear representation. In Swift, we'll create a new type for it, because it's really cheap and easy compared to Objective-C.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">typealias</span> <span class="kt">USDollars</span> <span class="o">=</span> <span class="kt">Double</span>\n\n<span class="kd">func</span> <span class="nf">revenuesForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">numberOfCopies</span><span class="p">)</span> <span class="o">*</span> <span class="n">unitPrice</span> <span class="o">*</span> <span class="n">sellersPercentage</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>I will just say, please use <code class="highlighter-rouge">USDollars</code> for <code class="highlighter-rouge">Double</code>, and now I know exactly what it represents. My <code class="highlighter-rouge">revenuesForCopiesSold</code> returns <code class="highlighter-rouge">USDollars</code>, so I know what it's measured in.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">toTheNearestPenny</span><span class="p">(</span><span class="nv">dollarAmount</span><span class="p">:</span> <span class="kt">USDollars</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nf">round</span><span class="p">(</span><span class="n">dollarAmount</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>I probably want to round it off to the nearest penny.</p>\n<p>Now, I can combine them into one function: <code class="highlighter-rouge">revenuesInDollarsForCopiesSold</code> which takes the number of copies you sold and returns the US dollars, and it does it with this calculation on the bottom row which takes the numbers of copies, calculates the revenues for copies sold, and then uses that to round it to the nearest penny.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">revenuesInDollarsForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nf">toTheNearestPenny</span><span class="p">(</span><span class="nf">revenuesForCopiesSold</span><span class="p">(</span><span class="n">numberOfCopies</span><span class="p">))</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>As I read it, it seems backwards. We started on the inside and we worked our way out.</p>\n<h3 id="responsible-custom-operators--generics-2158javascriptpresentzchangechapter042true">Responsible Custom Operators &amp; Generics <a href="javascript:presentz.changeChapter(0,42,true);">(21:58)</a>\n</h3>\n<p>Now I will reluctantly show you a custom operator.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">infix</span> <span class="k">operator</span> <span class="err"></span> <span class="p">{</span><span class="k">as</span><span class="n">sociativity</span> <span class="k">left</span><span class="p">}</span></code></pre>\n</div>\n<p>You may recognize this as the bullet from the lasagne recipe. I'm going to define an <code class="highlighter-rouge">infix operator</code>, which goes between the two things that it operates on. If I've got a bunch of these in a row, I've got to tell you what order to do them in, so I'm going to associate it from the left. As you read left to right, I'll do the first one, and then it gets piped into the next one, so they're going to associate from the left.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="err"></span><span class="o">&lt;</span><span class="kt">T</span><span class="p">,</span> <span class="kt">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> \n         <span class="nv">transform</span><span class="p">:</span> <span class="kt">T</span> <span class="o">-&gt;</span> <span class="kt">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">U</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="nf">transform</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>         \n<span class="p">}</span></code></pre>\n</div>\n<p>Ooh boy, there's a generic. The <code class="highlighter-rouge">infix operator</code> takes two pieces of input: some data and some function, and it does something with it. We can follow these types and see that the input is of type T, and the transform maps something of type T to type U.</p>\n<p>This is generics used for good. It's saying that whatever type of thing you input must match the parameter of the function. And, whatever the output of the function is, that's going to be the return type of this operator.</p>\n<p>At this point, people teaching functional programming with generics will say, "Well, clearly this function can only return one thing." You've got to remember that "clearly" is in the eye of the beholder. Before you've seen this and gotten used to this, it's not clear at all. Once someone explains it to you the first time and you've seen it, through familiarity you realize that you now have the context.</p>\n<p>The only thing you can really do is apply the function to the input, and then you get something of type U. And so, if I've got some element and some function with this operator in between, I'm going to apply this function to that element, and that's going to give me my output. In a way, I'm turning around the order in which I do things.</p>\n<p>I feel dirty, because I've created a custom operator after telling people to not do that. But you're going to feel good in a moment, because we're going to use it. Like many things, using it might convince you that it's a good thing.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">revenuesInDollarsForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">numberOfCopies</span>\n        <span class="err"></span> <span class="n">revenuesForCopiesSold</span>\n        <span class="err"></span> <span class="n">toTheNearestPenny</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>Now, I start with my number of copies and I use my operator to pipe that into my revenues for copies sold, and that gives me something that I calculate, associative left, so that gives me something. Then I pipe that result into my <code class="highlighter-rouge">toTheNearestPenny</code>. Now it feels nice.</p>\n<h3 id="back-to-lasagne-the-team-player-2535javascriptpresentzchangechapter046true">Back to Lasagne, the Team Player <a href="javascript:presentz.changeChapter(0,46,true);">(25:35)</a>\n</h3>\n<p>I calculated <code class="highlighter-rouge">lastWeeksRevenues</code>, and I had these two maps, one to the next. I want to turn this into something that looks like piping one to the other. I have to think about what map does, why map applies here, and so I'm going to move map. I'll pull these two maps into functions.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">replaceNagiveSalesWithZeroSales</span><span class="p">(</span><span class="nv">sales</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">sales</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">negativeNumbersToZero</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="kd">func</span> <span class="nf">calculateRevenuesFromSales</span><span class="p">(</span><span class="nv">sales</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">USDollars</span><span class="p">]</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">sales</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">revenuesInDollarsForCopiesSold</span><span class="p">)</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>Notice that it's still doing the same map, but I can reason through what it does. I give you an array of <code class="highlighter-rouge">Int</code>s, and I'm going to map the negative numbers to zero. Not only is that small and clear, but I can write unit tests for that.</p>\n<p>The second method also takes an array of <code class="highlighter-rouge">Int</code>s and calculates the revenues in dollars for the copies sold. Small methods that do one thing. Small methods that I can test with input, and see how they do. Except... the types don't match.</p>\n<p>That's why I used a <code class="highlighter-rouge">SequenceType</code> earlier, because <code class="highlighter-rouge">lastWeeksSales</code> is a <code class="highlighter-rouge">SequenceType</code>, not an array of <code class="highlighter-rouge">Int</code>s. My first method is expecting an array of <code class="highlighter-rouge">Int</code>s. If two maps are good, three maps are better.</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">anArrayOfDailySales</span><span class="p">(</span><span class="nv">rawSales</span><span class="p">:</span> <span class="kt">AppSales</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">rawSales</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="nv">$0</span><span class="p">}</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>It just outputs an array, and it takes whichever element you put in as the next element. So it's just going to convert.</p>\n<p>I can chain these guys together, and that's looking like lasagne:</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span>\n                        <span class="err"></span> <span class="n">anArrayOfDailySales</span>\n                        <span class="err"></span> <span class="n">replaceNagiveSalesWithZeroSales</span>\n                        <span class="err"></span> <span class="n">calculateRevenuesFromSales</span></code></pre>\n</div>\n<p>I take <code class="highlighter-rouge">lastWeeksSales</code>, and from it I calculate an array of daily sales, I replace the negative sales with zero sales, and then I calculate the revenues from those sales, and I'm feeling that's just like lasagne. It feels just like this to me. It's readable code, and I know that makes you nervous. But you should learn to favor this.</p>\n<p>Someone can come to your code and figure out what you're doing. I know you don't keep your job that way, so instead, you do this to your recipe. I don't know which ingredients do you mean by this:</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span>\n                        <span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="nv">$0</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}</span>\n                        <span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="nf">round</span><span class="p">(</span><span class="kt">Double</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">*</span> <span class="n">unitPrice</span> <span class="o">*</span> <span class="n">sellersPercentage</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">}</span></code></pre>\n</div>\n<p>This is the code that you write because this makes you feel better. We write this stuff in place, and we figure that if you can't understand it, you really shouldn't be on my team. In our hearts, some of us believe this.</p>\n<p>I don't want to work on your team. I want to work on a team that writes code that they want to read later, and that they want me to read. I'd rather take my code, and when I need to know more about one of these guys, I zoom in on it:</p>\n<div class="highlighter-rouge">\n<pre class="highlight"><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lastWeeksRevenues</span> <span class="o">=</span> <span class="n">lastWeeksSales</span>\n                        <span class="err"></span> <span class="n">anArrayOfDailySales</span>\n                        <span class="err"></span> <span class="n">replaceNagiveSalesWithZeroSales</span>\n                        <span class="err"></span> <span class="n">calculateRevenuesFromSales</span>\n                        \n<span class="kd">func</span> <span class="nf">calculateRevenuesFromSales</span><span class="p">(</span><span class="nv">sales</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">USDollars</span><span class="p">]</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">sales</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">revenuesInDollarsForCopiesSold</span><span class="p">)</span>\n<span class="p">}</span>\n\n<span class="kd">func</span> <span class="nf">revenuesInDollarsForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="n">numberOfCopies</span>\n        <span class="err"></span> <span class="n">revenuesForCopiesSold</span>\n        <span class="err"></span> <span class="n">toTheNearestPenny</span>\n<span class="p">}</span>\n\n<span class="kd">func</span> <span class="nf">revenuesForCopiesSold</span><span class="p">(</span><span class="nv">numberOfCopies</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">USDollars</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">numberOfCopies</span><span class="p">)</span> <span class="o">*</span> <span class="n">unitPrice</span> <span class="o">*</span> <span class="n">sellersPercentage</span>\n<span class="p">}</span></code></pre>\n</div>\n<p>Each piece communicates in place. Each piece is clear to me while I'm thinking about it. I can hold it in my head, but I don't need to hold the whole thing in my head. If something goes wrong, I can trace where that happened by looking at which test failed. We can zoom in until it's completely clear to us.</p>\n<p>Our code is now <strong>clean, clear, and testable</strong>. We feel good about ourselves, and it provides the context for each piece of information.</p>\n<p><em>For a discussion of how to possibly remove the custom operator with transducers, check out the video at the top at this timestamp:</em> <a href="javascript:presentz.changeChapter(0,59,true);">(29:48)</a></p>\n<div class="hackernews-link hidden">\n<br>\nSee the discussion on <a target="_blank">Hacker News</a>.\n</div>\n<hr>\n<section class="newsletter-meetup" style="text-align:center"><a class="btn btn-lg btn-primary" href="http://eepurl.com/2mbQX" target="_blank" onclick="ga('send', {'hitType': 'event', 'eventCategory': 'English', 'eventAction': 'clickArticleNewsletterBottom', 'eventLabel': window.location.pathname});">Get new videos &amp; tutorials</a>\n<small>-- we won't email you for any other reason, ever.</small>\n</section><div class="share-buttons">\n<ul>\n<li>\n<ul class="share-button-group">\n<li class="twitter">\n<a title="Twitter" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n<li class="facebook">\n<a title="Facebook" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n<li class="hackernews">\n<a title="Hacker News" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n<li class="reddit">\n<a title="Reddit" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n</ul>\n</li>\n<li>\n<ul class="share-button-group">\n<li class="linkedin">\n<a title="LinkedIn" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n<li class="gplus">\n<a title="Google+" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n<li class="email">\n<a title="Email this" target="_blank"></a>\n<span class="count invisible"></span>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n	Daniel is the author of the books 'A Swift Kickstart' and 'Developing iOS 7 Apps for iPad and iPhone', the official companion book to the popular iTunes U series from Stanford University. Daniel presents iPhone, Cocoa, and Swift training and consults through his company Dim Sum Thinking. He is also the host of the CocoaConf Podcast. I want to start with a recipe for lasagne. This lasagne is context-specific: it depends on what you know about each one of these steps. For a chef, each one of those steps means one thing; for a home cook, they mean something else. For example, bolognese sauce for a home cook might mean they know how to cook it, but it also might mean they go and get a jar of it to open. Bchamel sauce is a different matter altogether. Bchamel is actually an important sauce to cooks, and it's not really good from a jar. It's what we call a "mother sauce." (In classic French coo	\N	2016-04-26 13:19:59.121601	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c,9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	\N	0
77a8f21f-365a-4fee-baf7-c18ce6cc9994	12	0	Fast JSON parsing for Swift	https://github.com/delba/JASON?utm_campaign=Swift%2BSandbox&utm_medium=email&utm_source=Swift_Sandbox_38	fast-json-parsing-for-swift	{}	GitHub - delba/JASON: Fast JSON parsing for Swift	[{"type":"icon","href":"/apple-touch-icon.png","sizes":null,"width":null,"height":null},{"type":"icon","href":"/apple-touch-icon-57x57.png","sizes":"57x57","width":57,"height":57},{"type":"icon","href":"/apple-touch-icon-60x60.png","sizes":"60x60","width":60,"height":60},{"type":"icon","href":"/apple-touch-icon-72x72.png","sizes":"72x72","width":72,"height":72},{"type":"icon","href":"/apple-touch-icon-76x76.png","sizes":"76x76","width":76,"height":76},{"type":"icon","href":"/apple-touch-icon-114x114.png","sizes":"114x114","width":114,"height":114},{"type":"icon","href":"/apple-touch-icon-120x120.png","sizes":"120x120","width":120,"height":120},{"type":"icon","href":"/apple-touch-icon-144x144.png","sizes":"144x144","width":144,"height":144},{"type":"icon","href":"/apple-touch-icon-152x152.png","sizes":"152x152","width":152,"height":152},{"type":"icon","href":"/apple-touch-icon-180x180.png","sizes":"180x180","width":180,"height":180}]	github.com	2	32475.3010299999987	2016-04-23 13:57:35.804037	2016-04-26 13:20:11.142773	d15947e9-3b46-4472-a0cb-dea1a222954c	{"description":"JASON - Fast JSON parsing for Swift","title":"delba/JASON","url":"https://github.com/delba/JASON","site_name":"GitHub","type":"object","image":"https://avatars1.githubusercontent.com/u/2891970?v=3\\u0026s=400"}	<p align="center">\n  <a href="https://raw.githubusercontent.com/delba/JASON/assets/JASON.png" target="_blank"><img src="https://raw.githubusercontent.com/delba/JASON/assets/JASON.png" style="max-width:100%;"></a>\n</p>\n\n<p align="center">\n    <a href="https://travis-ci.org/delba/JASON"><img alt="Travis Status" src="https://camo.githubusercontent.com/9962b5bb06a2e88a468f1cf09d3444198e76bf01/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f64656c62612f4a41534f4e2e737667" data-canonical-src="https://img.shields.io/travis/delba/JASON.svg" style="max-width:100%;"></a>\n    <a href="https://img.shields.io/cocoapods/v/JASON.svg"><img alt="CocoaPods compatible" src="https://camo.githubusercontent.com/572360341771f47b722e6611e4254482b1e0f0f0/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4a41534f4e2e737667" data-canonical-src="https://img.shields.io/cocoapods/v/JASON.svg" style="max-width:100%;"></a>\n    <a href="https://github.com/Carthage/Carthage"><img alt="Carthage compatible" src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"></a>\n</p>\n\n<p><strong>JASON</strong> is a <a href="https://github.com/delba/JASON/tree/benchmarks">faster</a> <code>JSON</code> deserializer written in Swift.</p>\n\n<div class="highlight highlight-source-gfm"><pre>JASON is the best framework we found to manage JSON at Swapcard. This is by far the fastest and\nthe most convenient out there, it made our code clearer and improved the global performance\nof the app when dealing with large amout of data.</pre></div>\n\n<blockquote>\n<p><em><a href="https://github.com/gautier-gdx">Gautier Gdoux</a>, lead iOS developer at <a href="https://www.swapcard.com/">Swapcard</a></em></p>\n</blockquote>\n\n<p align="center">\n<a href="#features">Features</a>  <a href="#usage">Usage</a>  <a href="#example">Example</a>  <a href="#references">References</a>  <a href="#installation">Installation</a>  <a href="#license">License</a>\n</p>\n\n<h2>\n<a id="user-content-features" class="anchor" href="#features" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Features</h2>\n\n<ul class="task-list">\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Very fast - <a href="https://github.com/delba/JASON/tree/benchmarks"><code>benchmarks</code></a>\n</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Fully tested</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Fully documented\n<p></p>\n</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Clean code</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Beautiful API</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Regular updates\n<p></p>\n</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Support for iOS, OSX, tvOS</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Compatible with <a href="https://github.com/delba/JASON#carthage">Carthage</a> / <a href="https://github.com/delba/JASON#cocoapods">CocoaPods</a>\n</li>\n<li class="task-list-item">\n<span class="handle js-handle">\n          <svg aria-hidden="true" class="drag-handle" width="16" height="15" version="1.1" viewbox="0 0 16 15"><path d="M12,4V5H4V4h8ZM4,8h8V7H4V8Zm0,3h8V10H4v1Z"></path></svg></span>\n        <input type="checkbox" class="task-list-item-checkbox" checked disabled> Provide extensions - <a href="https://github.com/delba/JASON/tree/master/Extensions"><code>Extensions/</code></a>\n</li>\n</ul>\n<h2>\n<a id="user-content-usage" class="anchor" href="#usage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Usage</h2>\n\n<h4>\n<a id="user-content-initialization" class="anchor" href="#initialization" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Initialization</h4>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> json <span class="pl-k">=</span> JSON(anything) <span class="pl-c">// where `anything` is `AnyObject?`</span></pre></div>\n\n<p>If you're using <a href="https://github.com/Alamofire/Alamofire"><code>Alamofire</code></a>, include <a href="https://github.com/delba/JASON/blob/master/Extensions/JASON%2BAlamofire.swift"><code>JASON+Alamofire.swift</code></a> in your project for even more awesomeness:</p>\n\n<div class="highlight highlight-source-swift"><pre>Alamofire<span class="pl-k">.</span>request(<span class="pl-k">.</span>GET, peopleURL)<span class="pl-k">.</span>responseJASON { response <span class="pl-k">in</span>\n    <span class="pl-k">if</span> <span class="pl-k">let</span> json <span class="pl-k">=</span> response<span class="pl-k">.</span>result<span class="pl-k">.</span><span class="pl-c1">value</span> {\n        <span class="pl-k">let</span> people <span class="pl-k">=</span> json<span class="pl-k">.</span><span class="pl-c1">map</span>(Person<span class="pl-k">.</span><span class="pl-k">init</span>)\n        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>people: <span class="pl-pse">\\(</span><span class="pl-s1">people</span><span class="pl-pse">)</span><span class="pl-pds">"</span></span>)\n    }\n}</pre></div>\n\n<h4>\n<a id="user-content-parsing" class="anchor" href="#parsing" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Parsing</h4>\n\n<p>Use subscripts to parse the <code>JSON</code> object:</p>\n\n<div class="highlight highlight-source-swift"><pre>json[<span class="pl-s"><span class="pl-pds">"</span>people<span class="pl-pds">"</span></span>][<span class="pl-c1">0</span>][<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>]\n\n<span class="pl-c">// Or with a path:</span>\n\njson[path: <span class="pl-s"><span class="pl-pds">"</span>people<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>]</pre></div>\n\n<h4>\n<a id="user-content-type-casting" class="anchor" href="#type-casting" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Type casting</h4>\n\n<p>Cast <code>JSON</code> value to its appropriate type by using the computed property <code>json.&lt;type&gt;</code>:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> name <span class="pl-k">=</span> json[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>string <span class="pl-c">// the name as String?</span></pre></div>\n\n<p>The non-optional variant <code>json.&lt;type&gt;Value</code> will return a default value if not present/convertible:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> name <span class="pl-k">=</span> json[<span class="pl-s"><span class="pl-pds">"</span>wrong<span class="pl-pds">"</span></span>]<span class="pl-k">.</span><span class="pl-c1">stringValue</span> <span class="pl-c">// the name will be ""</span></pre></div>\n\n<p>You can also access the internal value as <code>AnyObject?</code> if you want to cast it yourself:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">let</span> something <span class="pl-k">=</span> json[<span class="pl-s"><span class="pl-pds">"</span>something<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>object</pre></div>\n\n<p><em>See the <a href="https://github.com/delba/JASON#references">References section</a> for the full list of properties.</em></p>\n\n<h4>\n<a id="user-content-jsonkey" class="anchor" href="#jsonkey" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a><code>JSONKey</code>:</h4>\n\n<blockquote>\n<p>This idea is stolen from <a href="https://github.com/radex/SwiftyUserDefaults"><code>SwiftyUserDefaults</code></a> by <strong>Radek Pietruszewski</strong> (<a href="https://github.com/radex">GitHub</a>, <a href="https://twitter.com/radexp">Twitter</a>, <a href="http://radex.io">Blog</a>).\n<br>\nI can't recommend enough to read his article about it! <img class="emoji" title=":boom:" alt=":boom:" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a5.png" height="20" width="20" align="absmiddle"><a href="http://radex.io/swift/nsuserdefaults/static/">Statically-typed NSUserDefaults</a> <img class="emoji" title=":boom:" alt=":boom:" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a5.png" height="20" width="20" align="absmiddle"></p>\n</blockquote>\n\n<p>Define and use your <code>JSONKey</code> as follow:</p>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-c">// With a int key:</span>\n\n<span class="pl-k">let</span> personKey <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span>JSON<span class="pl-k">&gt;</span>(<span class="pl-c1">0</span>)\n<span class="pl-k">let</span> personJSON <span class="pl-k">=</span> peopleJSON[personKey]\n\n<span class="pl-c">// With a string key:</span>\n\n<span class="pl-k">let</span> nameKey <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)\n<span class="pl-k">let</span> name <span class="pl-k">=</span> personJSON[nameKey]\n\n<span class="pl-c">// With a path:</span>\n\n<span class="pl-k">let</span> twitterURLKey <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span>NSURL?<span class="pl-k">&gt;</span>(path: <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>twitter<span class="pl-pds">"</span></span>)\n<span class="pl-k">let</span> twitterURL <span class="pl-k">=</span> peopleJSON[twitterURLKey]</pre></div>\n\n<p>You might find more convenient to extend <code>JSONKeys</code> as shown in the <a href="https://github.com/delba/JASON#example">Example section</a>.</p>\n\n<p><em>See the <a href="https://github.com/delba/JASON#references">References section</a> for the full list of <code>JSONKey</code> types.</em></p>\n\n<h2>\n<a id="user-content-example" class="anchor" href="#example" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Example</h2>\n\n<blockquote>\n<p>This example uses the <strong>Dribbble API</strong> (<a href="http://developer.dribbble.com/v1/">docs</a>).\n<br>\nAn example of the server response can be found in <a href="https://github.com/delba/JASON/blob/master/Tests/Supporting%20Files/shots.json"><code>Tests/Supporting Files/shots.json</code></a></p>\n</blockquote>\n\n<ul>\n<li>\n<strong>Step 1:</strong> Extend <code>JSONKeys</code> to define your <code>JSONKey</code>\n</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">extension</span> JSONKeys {\n    <span class="pl-k">static</span> <span class="pl-k">let</span> id    <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span><span class="pl-c1">Int</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>)\n    <span class="pl-k">static</span> <span class="pl-k">let</span> title <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>)\n\n    <span class="pl-k">static</span> <span class="pl-k">let</span> normalImageURL <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span>NSURL?<span class="pl-k">&gt;</span>(path: <span class="pl-s"><span class="pl-pds">"</span>images<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>normal<span class="pl-pds">"</span></span>)\n    <span class="pl-k">static</span> <span class="pl-k">let</span> hidpiImageURL  <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span>NSURL?<span class="pl-k">&gt;</span>(path: <span class="pl-s"><span class="pl-pds">"</span>images<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hidpi<span class="pl-pds">"</span></span>)\n\n    <span class="pl-k">static</span> <span class="pl-k">let</span> user <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span>JSON<span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>)\n    <span class="pl-k">static</span> <span class="pl-k">let</span> name <span class="pl-k">=</span> JSONKey<span class="pl-k">&lt;</span><span class="pl-c1">String</span><span class="pl-k">&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>) \n}</pre></div>\n\n<ul>\n<li>\n<strong>Step 2:</strong> Create the <code>Shot</code> and <code>User</code> models</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">struct</span> Shot {\n    <span class="pl-k">let</span> id: <span class="pl-c1">Int</span>\n    <span class="pl-k">let</span> title: <span class="pl-c1">String</span>\n\n    <span class="pl-k">var</span> normalImageURL: NSURL<span class="pl-k">!</span>\n    <span class="pl-k">var</span> hidpiImageURL: NSURL?\n\n    <span class="pl-k">let</span> user: User\n\n    <span class="pl-k">init</span>(_ json: JSON) {\n        id    <span class="pl-k">=</span> json[<span class="pl-k">.</span>id]\n        title <span class="pl-k">=</span> json[<span class="pl-k">.</span>title]\n\n        normalImageURL <span class="pl-k">=</span> json[<span class="pl-k">.</span>normalImageURL]\n        hidpiImageURL  <span class="pl-k">=</span> json[<span class="pl-k">.</span>hidpiImageURL]\n\n        user <span class="pl-k">=</span> User(json[<span class="pl-k">.</span>user])\n    }\n}</pre></div>\n\n<div class="highlight highlight-source-swift"><pre><span class="pl-k">struct</span> User {\n    <span class="pl-k">let</span> id: <span class="pl-c1">Int</span>\n    <span class="pl-k">let</span> name: <span class="pl-c1">String</span>\n\n    <span class="pl-k">init</span>(_ json: JSON) {\n        id   <span class="pl-k">=</span> json[<span class="pl-k">.</span>id]\n        name <span class="pl-k">=</span> json[<span class="pl-k">.</span>name]\n    }\n}</pre></div>\n\n<ul>\n<li>\n<strong>Step 3:</strong> Use the <a href="https://github.com/delba/JASON/blob/master/Extensions/JASON%2BAlamofire.swift"><code>JASON+Alamofire.swift</code></a> extension to fetch the shots</li>\n</ul>\n<div class="highlight highlight-source-swift"><pre>Alamofire<span class="pl-k">.</span>request(<span class="pl-k">.</span>GET, shotsURL)<span class="pl-k">.</span>responseJASON { response <span class="pl-k">in</span>\n    <span class="pl-k">if</span> <span class="pl-k">let</span> json <span class="pl-k">=</span> response<span class="pl-k">.</span>result<span class="pl-k">.</span><span class="pl-c1">value</span> {\n        <span class="pl-k">let</span> shots <span class="pl-k">=</span> json<span class="pl-k">.</span><span class="pl-c1">map</span>(Shot<span class="pl-k">.</span><span class="pl-k">init</span>)\n    }\n}</pre></div>\n\n<h2>\n<a id="user-content-references" class="anchor" href="#references" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>References</h2>\n\n<blockquote>\n<p>Include <a href="https://github.com/delba/JASON/blob/master/Extensions/JASON%2BProperties.swift"><code>JASON+Properties.swift</code></a> for even more types!</p>\n</blockquote>\n\n<table>\n<thead><tr>\n<th>Property</th>\n<th>JSONKey Type</th>\n<th>Default value</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>string</code></td>\n<td><code>String?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>stringValue</code></td>\n<td><code>String</code></td>\n<td><code>""</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>Int?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>intValue</code></td>\n<td><code>Int</code></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>Double?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>doubleValue</code></td>\n<td><code>Double</code></td>\n<td><code>0.0</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>Float?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>floatValue</code></td>\n<td><code>Float</code></td>\n<td><code>0.0</code></td>\n</tr>\n<tr>\n<td><code>cgFloat</code></td>\n<td><code>CGFloat?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>cgFloatValue</code></td>\n<td><code>CGFloat</code></td>\n<td><code>0.0</code></td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td><code>Bool?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>boolValue</code></td>\n<td><code>Bool</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>nsURL</code></td>\n<td><code>NSURL?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>dictionary</code></td>\n<td><code>[String: AnyObject]?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>dictionaryValue</code></td>\n<td><code>[String: AnyObject]</code></td>\n<td><code>[:]</code></td>\n</tr>\n<tr>\n<td><code>jsonDictionary</code></td>\n<td><code>[String: JSON]?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>jsonDictionaryValue</code></td>\n<td><code>[String: JSON]</code></td>\n<td><code>[:]</code></td>\n</tr>\n<tr>\n<td><code>nsDictionary</code></td>\n<td><code>NSDictionary?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>nsDictionaryValue</code></td>\n<td><code>NSDictionary</code></td>\n<td><code>NSDictionary()</code></td>\n</tr>\n<tr>\n<td><code>array</code></td>\n<td><code>[AnyObject]?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>arrayValue</code></td>\n<td><code>[AnyObject]</code></td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td><code>jsonArray</code></td>\n<td><code>[JSON]?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>jsonArrayValue</code></td>\n<td><code>[JSON]</code></td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td><code>nsArray</code></td>\n<td><code>NSArray?</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>nsArrayValue</code></td>\n<td><code>NSArray</code></td>\n<td><code>NSArray()</code></td>\n</tr>\n</tbody>\n</table>\n<h2>\n<a id="user-content-installation" class="anchor" href="#installation" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Installation</h2>\n\n<h4>\n<a id="user-content-carthage" class="anchor" href="#carthage" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>Carthage</h4>\n\n<p><a href="https://github.com/Carthage/Carthage">Carthage</a> is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.</p>\n\n<p>You can install Carthage with <a href="http://brew.sh/">Homebrew</a> using the following command:</p>\n\n<div class="highlight highlight-source-shell"><pre>$ brew update\n$ brew install carthage</pre></div>\n\n<p>To integrate <strong><code>JASON</code></strong> into your Xcode project using Carthage, specify it in your <code>Cartfile</code>:</p>\n\n<pre lang="ogdl"><code>github "delba/JASON" &gt;= 2.0\n</code></pre>\n\n<h4>\n<a id="user-content-cocoapods" class="anchor" href="#cocoapods" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>CocoaPods</h4>\n\n<p><a href="http://cocoapods.org">CocoaPods</a> is a dependency manager for Cocoa projects.</p>\n\n<p>You can install it with the following command:</p>\n\n<div class="highlight highlight-source-shell"><pre>$ gem install cocoapods</pre></div>\n\n<p>To integrate <strong><code>JASON</code></strong> into your Xcode project using CocoaPods, specify it in your <code>Podfile</code>:</p>\n\n<div class="highlight highlight-source-ruby"><pre>use_frameworks!\n\npod <span class="pl-s"><span class="pl-pds">'</span>JASON<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>~&gt; 2.0<span class="pl-pds">'</span></span></pre></div>\n\n<h2>\n<a id="user-content-license" class="anchor" href="#license" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"><path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"></path></svg></a>License</h2>\n\n<p>Copyright (c) 2015-2016 Damien (<a href="http://delba.io">http://delba.io</a>)</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n	JASON is a faster  deserializer written in Swift. Gautier Gdoux, lead iOS developer at Swapcard Features  Usage  Example  References  Installation  License If you're using , include  in your project for even more awesomeness: Use subscripts to parse the  object: Cast  value to its appropriate type by using the computed property : The non-optional variant  will return a default value if not present/convertible: You can also access the internal value as  if you want to cast it yourself: See the References section for the full list of properties. This idea is stolen from  by Radek Pietruszewski (GitHub, Twitter, Blog).\n\nI can't recommend enough to read his article about it! Statically-typed NSUserDefaults Define and use your  as follow: You might find more convenient to extend  as shown in the Example section. See the References section for the full list of  types. This example uses the Drib	\N	2016-04-23 13:57:35.801787	0	1	swiftfan20841	{d15947e9-3b46-4472-a0cb-dea1a222954c,9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	https://raw.githubusercontent.com/delba/JASON/assets/JASON.png	0
199a2e5f-81b8-474d-9307-e691726a37b8	22	0	Protocol-Oriented TableView and CollectionView	http://basememara.com/protocol-oriented-tableview-collectionview/	protocol-oriented-tableview-and-collectionview	{}	Protocol-Oriented TableView and CollectionView	[]	basememara.com	1	32481	2016-04-26 16:04:48.328932	2016-04-26 16:04:49.282721	9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	{"description":"Working with the UITableView and UICollectionView is verbose and inconvenient. Let's add some sugar to make it more pleasant to work with these controls.","title":"Protocol-Oriented TableView and CollectionView","url":"http://basememara.com/protocol-oriented-tableview-collectionview/","site_name":"Basem Emara","type":"article","image":"http://basememara.com/wp-content/uploads/2015/04/swift-stage.png"}	<p>It’s no secret that working with the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/">UITableView</a> is verbose and inconvenient. It’s been around since iOS 2.0 and it feels just as archaic. Then, Apple graced us with the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/">UICollectionView</a> in iOS 6.0 and it was indeedmuch awaited, but the API’s were inconsistent with the UITableView and still felt just as irritating. In this post, I’d like to reconcile the two API’s and add some sugar to make it more pleasant to work with these commonlyused controls.</p>\n<h2>TheTable and Collection Family Tree</h2>\n<p>The UITableView and UICollectionView share an ancestor: <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollView_Class/index.html#//apple_ref/swift/cl/c:objc(cs)UIScrollView">UIScrollView</a>. This is the best relationship Apple decided to give between the two; yippie it scrolls! Instead, I’d like to take on another perspective; they both are <em>containers of data</em>. So the first thing I’d like to do is create a new protocol called “<em>DataViewable</em>” and force the table and collection views to conform to it (see my previous post about <a href="http://basememara.com/protocol-conformance-extension-swift/">Protocol Conformance Extensions</a>):</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaadcc507949281" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic protocol DataViewable {\r\n    func reloadData()\r\n}\r\n\r\nextension UITableView: DataViewable {}\r\nextension UICollectionView: DataViewable {}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaadcc507949281-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadcc507949281-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaadcc507949281-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadcc507949281-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaadcc507949281-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadcc507949281-6">6</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaadcc507949281-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">protocol</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadcc507949281-2">\n<span class="crayon-h">    </span><span class="crayon-e">func </span><span class="crayon-e">reloadData</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadcc507949281-3"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadcc507949281-4"> </div>\n<div class="crayon-line" id="crayon-571f901eaadcc507949281-5">\n<span class="crayon-e">extension </span><span class="crayon-v">UITableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadcc507949281-6">\n<span class="crayon-e">extension </span><span class="crayon-v">UICollectionView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-sy">}</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0013 seconds] -->\r\n<p>Both the table and collection views already have the “<em>reloadData</em>” function, but strangely don’t exist in any of their shared ancestors. Now that I’ve forced them to conform to my new “<em>DataViewable</em>” protocol, I can call this essentialfunction on either view without knowing whether it is a table or collection.</p>\n<p><img src="http://basememara.com/wp-content/uploads/2016/04/wonka-tables-1-500x496.jpg" alt="wonka-tables" width="300" height="496" class="aligncenter size-medium wp-image-709"></p>\n<h2>ExtendingTable and Collection Controllers</h2>\n<p>When creating an app that has table and collection screens forthe same data, it is difficult to create extensionswith shared logic. The reason is because the table and collection API’s are so close, but are inconsistent nor do they share data-aware ancestors or protocols. Nowwith the new “<em>DataViewable</em>” protocol in place, I could execute logic against tables and collections interchangeably.</p>\n<p>For example, say I’m feeding the same data to a UITableViewController screen and a UICollectionViewController screen. I can have them conform to a protocol and extend it with data population and reloading. See the new “<em>DataControllable</em>” protocol below:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaaddc835702267" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic protocol DataControllable: class {\r\n    var models: [Contentable] { get set }\r\n    var dataView: DataViewable { get }\r\n}\r\n\r\npublic extension DataControllable {\r\n    \r\n    public func setupDataSource() {\r\n        MyService.get { items in\r\n            self.models = items\r\n            self.dataView.reloadData()\r\n        }\r\n    }\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaaddc835702267-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaaddc835702267-14">14</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">protocol </span><span class="crayon-v">DataControllable</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-2">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-e">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-e">get </span><span class="crayon-i">set</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-3">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-i">get</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-5"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-6">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">extension</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-7"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-8">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">func </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-9">\n<span class="crayon-h">        </span><span class="crayon-v">MyService</span><span class="crayon-sy">.</span><span class="crayon-i">get</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-e">items </span><span class="crayon-st">in</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-10">\n<span class="crayon-h">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">models</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">items</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-11">\n<span class="crayon-e">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">dataView</span><span class="crayon-sy">.</span><span class="crayon-e">reloadData</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-12">\n<span class="crayon-h">        </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaaddc835702267-13">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaaddc835702267-14"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0020 seconds] -->\r\n<p>Instead of working with “<em>self.tableView</em>” or “<em>self.collectionView</em>“, my protocol is going to work with “<em>self.dataView</em>“, which is a “<em>DataViewable</em>” control that I created earlier. Even though it can either be a table or collection underneath, I can call “<em>reloadData</em>” on it, or any other relationship I’d like to bridgebetween tables and collections.</p>\n<p>The table and collection view controllers would look something like this:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaade3861133483" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nclass TableViewController: UITableViewController, DataControllable {\r\n\r\n    var models: [Contentable] = []\r\n\r\n    var dataView: DataViewable {\r\n        return tableView\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupDataSource()\r\n    }\r\n}\r\n\r\nclass CollectionViewController: UICollectionViewController, DataControllable {\r\n\r\n    var models: [Contentable] { get set }\r\n\r\n    var dataView: DataViewable {\r\n        return collectionView!\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupDataSource()\r\n    }\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-14">14</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-16">16</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-18">18</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-19">19</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-20">20</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-21">21</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-22">22</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-23">23</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-24">24</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-25">25</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaade3861133483-26">26</div>\n<div class="crayon-num" data-line="crayon-571f901eaade3861133483-27">27</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaade3861133483-1">\n<span class="crayon-t">class</span><span class="crayon-v"> TableViewController:</span><span class="crayon-h"> </span><span class="crayon-v">UITableViewController</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-2"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-3">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-v">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-4"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-5">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-6">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-i">tableView</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-7">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-8"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-9">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-10">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-11">\n<span class="crayon-h">        </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-12">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-13"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-14"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-15">\n<span class="crayon-t">class</span><span class="crayon-v"> CollectionViewController:</span><span class="crayon-h"> </span><span class="crayon-v">UICollectionViewController</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-16"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-17">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-e">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-e">get </span><span class="crayon-i">set</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-18"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-19">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-20">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">collectionView</span><span class="crayon-o">!</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-21">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-22"> </div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-23">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-24">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-25">\n<span class="crayon-h">        </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaade3861133483-26">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaade3861133483-27"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0044 seconds] -->\r\n<p>Notice by simply calling “<em>setupDataSource</em>” on either thetable and collection view controllers, it gets populated and refreshed with the same logic.</p>\n<h2>What the NIB?!</h2>\n<p>There is another glaring inconsistency in the table and collection views: “<em>registerNib</em>“. For table views, the function signature is the first and the collection views is the bottom:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaadea156617056" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nfunc registerNib(_ nib: UINib?, forCellReuseIdentifier identifier: String) // UTableView\r\nfunc registerNib(_ nib: UINib?, forCellWithReuseIdentifier identifier: String) // UICollectionView</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaadea156617056-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadea156617056-2">2</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaadea156617056-1">\n<span class="crayon-e">func </span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-i">_</span><span class="crayon-v"> nib:</span><span class="crayon-h"> </span><span class="crayon-v">UINib</span><span class="crayon-sy">?</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">forCellReuseIdentifier </span><span class="crayon-v">identifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// UTableView</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadea156617056-2">\n<span class="crayon-e">func </span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-i">_</span><span class="crayon-v"> nib:</span><span class="crayon-h"> </span><span class="crayon-v">UINib</span><span class="crayon-sy">?</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">forCellWithReuseIdentifier </span><span class="crayon-v">identifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// UICollectionView</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0010 seconds] -->\r\n<p>Spotthe difference?… “<em>forCellReuseIdentifier</em>” versus “<em>forCellWithReuseIdentifier</em>“. This almost looks like a typo, why the difference?! This makes it difficult for them to conform to the same protocol. So before we attempt to marry them, let’s reconcile the APIby extending the table and collection views and add an identical “<em>registerNib</em>” signature, let’s also make it less burdensome while we’re at it:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaadef138229360" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic extension UITableView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return "Cell"\r\n    }\r\n    \r\n    public func registerNib(nibName: String, cellIdentifier: String = defaultCellIdentifier, bundleIdentifier: String? = nil) {\r\n        self.registerNib(UINib(nibName: nibName,\r\n            bundle: bundleIdentifier != nil ? NSBundle(identifier: bundleIdentifier!) : nil),\r\n            forCellReuseIdentifier: cellIdentifier)\r\n    }\r\n}\r\n\r\npublic extension UICollectionView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return "Cell"\r\n    }\r\n\r\n    public func registerNib(nibName: String, cellIdentifier: String = defaultCellIdentifier, bundleIdentifier: String? = nil) {\r\n        self.registerNib(UINib(nibName: nibName,\r\n            bundle: bundleIdentifier != nil ? NSBundle(identifier: bundleIdentifier!) : nil),\r\n            forCellWithReuseIdentifier: cellIdentifier)\r\n    }\r\n\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-14">14</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-16">16</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-18">18</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-19">19</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-20">20</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-21">21</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-22">22</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-23">23</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-24">24</div>\n<div class="crayon-num" data-line="crayon-571f901eaadef138229360-25">25</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaadef138229360-26">26</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaadef138229360-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">extension</span><span class="crayon-h"> </span><span class="crayon-e">UITableView</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-2"> </div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-3">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-m">static</span><span class="crayon-h"> </span><span class="crayon-t">var</span><span class="crayon-v"> defaultCellIdentifier:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-4">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-s">"Cell"</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-5">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-6"><span class="crayon-h">    </span></div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-7">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">func </span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-v">nibName</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cellIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">defaultCellIdentifier</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">?</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">nil</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-8">\n<span class="crayon-h">        </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-e">UINib</span><span class="crayon-sy">(</span><span class="crayon-v">nibName</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">nibName</span><span class="crayon-sy">,</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-9">\n<span class="crayon-h">            </span><span class="crayon-v">bundle</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-i">nil</span><span class="crayon-h"> </span><span class="crayon-sy">?</span><span class="crayon-h"> </span><span class="crayon-e">NSBundle</span><span class="crayon-sy">(</span><span class="crayon-v">identifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-o">!</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">nil</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-10">\n<span class="crayon-h">            </span><span class="crayon-v">forCellReuseIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">cellIdentifier</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-11">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-12"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-13"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-14">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">extension</span><span class="crayon-h"> </span><span class="crayon-e">UICollectionView</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-15"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-16">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-m">static</span><span class="crayon-h"> </span><span class="crayon-t">var</span><span class="crayon-v"> defaultCellIdentifier:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-17">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-s">"Cell"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-18">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-19"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-20">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">func </span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-v">nibName</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cellIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">defaultCellIdentifier</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">?</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">nil</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-21">\n<span class="crayon-h">        </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-e">UINib</span><span class="crayon-sy">(</span><span class="crayon-v">nibName</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">nibName</span><span class="crayon-sy">,</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-22">\n<span class="crayon-h">            </span><span class="crayon-v">bundle</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-i">nil</span><span class="crayon-h"> </span><span class="crayon-sy">?</span><span class="crayon-h"> </span><span class="crayon-e">NSBundle</span><span class="crayon-sy">(</span><span class="crayon-v">identifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-o">!</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">nil</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-23">\n<span class="crayon-h">            </span><span class="crayon-v">forCellWithReuseIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">cellIdentifier</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-24">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaadef138229360-25"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaadef138229360-26"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0049 seconds] -->\r\n<p>The “<em>registerNib</em>” signatures are now the same for tables and collections, but I’ve also made it more convenient by adding optionaland defaultparameters, like for the cell identifier.Also, the function isaccepting strings instead of forcing the end developer to create <em>nib</em> and <em>bundle</em> instances first topass them in. I’ll let the function create instances underneath automatically. This way, I can simply do this:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae0b325163048" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nself.dataView.registerNib("MyTableViewCell")\r\nself.dataView.registerNib("MyCollectionViewCell")</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae0b325163048-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae0b325163048-2">2</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae0b325163048-1">\n<span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">dataView</span><span class="crayon-sy">.</span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-s">"MyTableViewCell"</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae0b325163048-2">\n<span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">dataView</span><span class="crayon-sy">.</span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-s">"MyCollectionViewCell"</span><span class="crayon-sy">)</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0006 seconds] -->\r\n<p></p>\n<h2>Sugar and Spice</h2>\n<p>For the finale, I’d like to tackle the dreaded “<em>dequeueReusableCellWithIdentifier</em>” API. The philosophy of Objective-C is to make everything as verbose as possible. On the other hand, the philosophy of Swift is to make everything as swift as possible. So for this archaic API, I’d like to convert it to a subscript. Makes sense that you’d retrieve cells out of a table using subscripts, doesn’t it?! Here it goes:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae12609651562" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic extension UITableView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return "Cell"\r\n    }\r\n    \r\n    public subscript(indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n        return self.dequeueReusableCellWithIdentifier(UITableView.defaultCellIdentifier, forIndexPath: indexPath)\r\n    }\r\n\r\n    public subscript(indexPath: NSIndexPath, identifier: String) -&gt; UITableViewCell {\r\n        return self.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath)\r\n    }\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaae12609651562-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae12609651562-14">14</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae12609651562-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">extension</span><span class="crayon-h"> </span><span class="crayon-e">UITableView</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-2"> </div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-3">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-m">static</span><span class="crayon-h"> </span><span class="crayon-t">var</span><span class="crayon-v"> defaultCellIdentifier:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-4">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-s">"Cell"</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-5">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-6"><span class="crayon-h">    </span></div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-7">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">subscript</span><span class="crayon-sy">(</span><span class="crayon-v">indexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSIndexPath</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-e">UITableViewCell</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-8">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-e">dequeueReusableCellWithIdentifier</span><span class="crayon-sy">(</span><span class="crayon-v">UITableView</span><span class="crayon-sy">.</span><span class="crayon-v">defaultCellIdentifier</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">forIndexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">indexPath</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-9">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-10"> </div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-11">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">subscript</span><span class="crayon-sy">(</span><span class="crayon-v">indexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSIndexPath</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">identifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-e">UITableViewCell</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-12">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-e">dequeueReusableCellWithIdentifier</span><span class="crayon-sy">(</span><span class="crayon-v">identifier</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">forIndexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">indexPath</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae12609651562-13">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae12609651562-14"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0025 seconds] -->\r\n<p>Now I can simply do this:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae17316630309" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\noverride func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n    let cell = tableView[indexPath] as! MyTableViewCell\r\n    ...\r\n    return cell\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae17316630309-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae17316630309-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae17316630309-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae17316630309-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae17316630309-5">5</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae17316630309-1">\n<span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">tableView</span><span class="crayon-sy">(</span><span class="crayon-v">tableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UITableView</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">cellForRowAtIndexPath </span><span class="crayon-v">indexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSIndexPath</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-e">UITableViewCell</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae17316630309-2">\n<span class="crayon-h">    </span><span class="crayon-e">let </span><span class="crayon-v">cell</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">tableView</span><span class="crayon-sy">[</span><span class="crayon-v">indexPath</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-st">as</span><span class="crayon-o">!</span><span class="crayon-h"> </span><span class="crayon-i">MyTableViewCell</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae17316630309-3">\n<span class="crayon-h">    </span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae17316630309-4">\n<span class="crayon-h">    </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-i">cell</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae17316630309-5"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0019 seconds] -->\r\n<p>Extracting the cell from the table using “<em>tableView[indexPath]</em>” instead of “<em>tableView.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath)</em>” feels so much more natural. I’ve overloaded it too in case you want to use a different cell identifier.</p>\n<h2>Putting It All Together</h2>\n<p>We’ve made some breakthroughs withtables and collections in this post. Let’ssummarize the evolution.</p>\n<p>First is the “<em>DataViewable</em>” protocol to marry the “<em>UITableView</em>” and “<em>UICollectionView</em>” together:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae1d966417242" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic protocol DataViewable {\r\n    func reloadData()\r\n    func registerNib(nibName: String, cellIdentifier: String, bundleIdentifier: String?)\r\n}\r\n\r\nextension UITableView: DataViewable {}\r\nextension UICollectionView: DataViewable {}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae1d966417242-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae1d966417242-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae1d966417242-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae1d966417242-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae1d966417242-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae1d966417242-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaae1d966417242-7">7</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae1d966417242-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">protocol</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae1d966417242-2">\n<span class="crayon-h">    </span><span class="crayon-e">func </span><span class="crayon-e">reloadData</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae1d966417242-3">\n<span class="crayon-h">    </span><span class="crayon-e">func </span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-v">nibName</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cellIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">bundleIdentifier</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-sy">?</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae1d966417242-4"><span class="crayon-sy">}</span></div>\n<div class="crayon-line" id="crayon-571f901eaae1d966417242-5"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae1d966417242-6">\n<span class="crayon-e">extension </span><span class="crayon-v">UITableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae1d966417242-7">\n<span class="crayon-e">extension </span><span class="crayon-v">UICollectionView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-sy">}</span>\n</div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0013 seconds] -->\r\n<p>Next is the “<em>DataControllable</em>” protocol to extend the “<em>UITableViewController</em>” and <em>UICollectionViewController</em>” simultaneously:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae23411345605" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\npublic protocol DataControllable: class {\r\n    var models: [Contentable] { get set }\r\n    var dataView: DataViewable { get }\r\n    var cellNibName: String { get }\r\n}\r\n\r\npublic extension DataControllable {\r\n    \r\n    public func setupInterface() {\r\n        self.dataView.registerNib(cellNibName)\r\n    }\r\n    \r\n    public func setupDataSource() {\r\n        MyService.get { items in\r\n            self.models = items\r\n            self.dataView.reloadData()\r\n        }\r\n    }\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-14">14</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-16">16</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae23411345605-18">18</div>\n<div class="crayon-num" data-line="crayon-571f901eaae23411345605-19">19</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae23411345605-1">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">protocol </span><span class="crayon-v">DataControllable</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-2">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-e">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-e">get </span><span class="crayon-i">set</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-3">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-i">get</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-4">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> cellNibName:</span><span class="crayon-h"> </span><span class="crayon-t">String</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-i">get</span><span class="crayon-h"> </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-5"><span class="crayon-sy">}</span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-6"> </div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-7">\n<span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">extension</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-8"><span class="crayon-h">    </span></div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-9">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">func </span><span class="crayon-e">setupInterface</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-10">\n<span class="crayon-h">        </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">dataView</span><span class="crayon-sy">.</span><span class="crayon-e">registerNib</span><span class="crayon-sy">(</span><span class="crayon-v">cellNibName</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-11">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-12"><span class="crayon-h">    </span></div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-13">\n<span class="crayon-h">    </span><span class="crayon-m">public</span><span class="crayon-h"> </span><span class="crayon-e">func </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-14">\n<span class="crayon-h">        </span><span class="crayon-v">MyService</span><span class="crayon-sy">.</span><span class="crayon-i">get</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-e">items </span><span class="crayon-st">in</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-15">\n<span class="crayon-h">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">models</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">items</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-16">\n<span class="crayon-e">            </span><span class="crayon-r">self</span><span class="crayon-sy">.</span><span class="crayon-v">dataView</span><span class="crayon-sy">.</span><span class="crayon-e">reloadData</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-17">\n<span class="crayon-h">        </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae23411345605-18">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae23411345605-19"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0041 seconds] -->\r\n<p>The “<em>setupInterface</em>” and “<em>setupDataSource</em>” functions is where you’d put your view and data retrieval logic. The table and collection views would both get reloaded too.</p>\n<p>Finally, the table view controller would like this in the end:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae29031195293" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nclass TableViewController: UITableViewController, DataControllable {\r\n\r\n    let cellNibName = "TableViewCell"\r\n    var models: [Contentable] = []\r\n    \r\n    var dataView: DataViewable {\r\n        return tableView\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupInterface()\r\n        setupDataSource()\r\n    }\r\n    \r\n    override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {\r\n        return 1\r\n    }\r\n    \r\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return models.count\r\n    }\r\n    \r\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n        let cell = tableView[indexPath] as! TableViewCell\r\n        let model = models[indexPath.row]\r\n        return cell.bind(model)\r\n    }\r\n\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-14">14</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-16">16</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-18">18</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-19">19</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-20">20</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-21">21</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-22">22</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-23">23</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-24">24</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-25">25</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-26">26</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-27">27</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-28">28</div>\n<div class="crayon-num" data-line="crayon-571f901eaae29031195293-29">29</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae29031195293-30">30</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae29031195293-1">\n<span class="crayon-t">class</span><span class="crayon-v"> TableViewController:</span><span class="crayon-h"> </span><span class="crayon-v">UITableViewController</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-2"> </div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-3">\n<span class="crayon-h">    </span><span class="crayon-e">let </span><span class="crayon-e ">cellNibName</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"TableViewCell"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-4">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-v">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-5"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-6">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-7">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-i">tableView</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-8">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-9"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-10">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-11">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-12">\n<span class="crayon-h">        </span><span class="crayon-e">setupInterface</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-13">\n<span class="crayon-h">        </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-14">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-15"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-16">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">numberOfSectionsInTableView</span><span class="crayon-sy">(</span><span class="crayon-v">tableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UITableView</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-17">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">1</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-18">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-19"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-20">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">tableView</span><span class="crayon-sy">(</span><span class="crayon-v">tableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UITableView</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">numberOfRowsInSection </span><span class="crayon-v">section</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-21">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">models</span><span class="crayon-sy">.</span><span class="crayon-i">count</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-22">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-23"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-24">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">tableView</span><span class="crayon-sy">(</span><span class="crayon-v">tableView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UITableView</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">cellForRowAtIndexPath </span><span class="crayon-v">indexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSIndexPath</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-e">UITableViewCell</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-25">\n<span class="crayon-h">        </span><span class="crayon-e">let </span><span class="crayon-v">cell</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">tableView</span><span class="crayon-sy">[</span><span class="crayon-v">indexPath</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-st">as</span><span class="crayon-o">!</span><span class="crayon-h"> </span><span class="crayon-e">TableViewCell</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-26">\n<span class="crayon-e">        </span><span class="crayon-e">let </span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">models</span><span class="crayon-sy">[</span><span class="crayon-v">indexPath</span><span class="crayon-sy">.</span><span class="crayon-v">row</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-27">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">cell</span><span class="crayon-sy">.</span><span class="crayon-e">bind</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-28">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae29031195293-29"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae29031195293-30"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0075 seconds] -->\r\n<p>Similarly, the collection view controller as well:</p>\n<!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id="crayon-571f901eaae2f984068455" class="crayon-syntax crayon-theme-obsidian crayon-font-monaco crayon-os-mac print-yes notranslate" data-settings=" minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">\r\n\t\t\r\n\t\t\t<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">\nclass CollectionViewController: UICollectionViewController, DataControllable {\r\n\r\n    let cellNibName = "CollectionViewCell"\r\n    var models: [Contentable] = []\r\n    \r\n    var dataView: DataViewable {\r\n        return collectionView!\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupInterface()\r\n        setupDataSource()\r\n    }\r\n\r\n    override func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&gt; Int {\r\n        return 1\r\n    }\r\n\r\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {\r\n        return models.count\r\n    }\r\n\r\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell {\r\n        let cell = collectionView[indexPath] as! CollectionViewCell\r\n        let model = models[indexPath.row]\r\n        return cell.bind(model)\r\n    }\r\n\r\n}</textarea></div>\r\n\t\t\t<div class="crayon-main" style="">\r\n\t\t\t\t<table class="crayon-table"><tr class="crayon-row">\n<td class="crayon-nums " data-settings="show">\r\n\t\t\t\t\t<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;">\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-1">1</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-2">2</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-3">3</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-4">4</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-5">5</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-6">6</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-7">7</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-8">8</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-9">9</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-10">10</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-11">11</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-12">12</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-13">13</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-14">14</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-15">15</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-16">16</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-17">17</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-18">18</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-19">19</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-20">20</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-21">21</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-22">22</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-23">23</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-24">24</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-25">25</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-26">26</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-27">27</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-28">28</div>\n<div class="crayon-num" data-line="crayon-571f901eaae2f984068455-29">29</div>\n<div class="crayon-num crayon-striped-num" data-line="crayon-571f901eaae2f984068455-30">30</div>\n</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;">\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-1">\n<span class="crayon-t">class</span><span class="crayon-v"> CollectionViewController:</span><span class="crayon-h"> </span><span class="crayon-v">UICollectionViewController</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">DataControllable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-2"> </div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-3">\n<span class="crayon-h">    </span><span class="crayon-e">let </span><span class="crayon-e ">cellNibName</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">"CollectionViewCell"</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-4">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> models:</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-v">Contentable</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">[</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-5"><span class="crayon-h">    </span></div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-6">\n<span class="crayon-h">    </span><span class="crayon-t">var</span><span class="crayon-v"> dataView:</span><span class="crayon-h"> </span><span class="crayon-e">DataViewable</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-7">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">collectionView</span><span class="crayon-o">!</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-8">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-9"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-10">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-11">\n<span class="crayon-h">        </span><span class="crayon-r">super</span><span class="crayon-sy">.</span><span class="crayon-e">viewDidLoad</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-12">\n<span class="crayon-h">        </span><span class="crayon-e">setupInterface</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-13">\n<span class="crayon-h">        </span><span class="crayon-e">setupDataSource</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-14">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-15"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-16">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">numberOfSectionsInCollectionView</span><span class="crayon-sy">(</span><span class="crayon-v">collectionView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UICollectionView</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-17">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">1</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-18">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-19"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-20">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">collectionView</span><span class="crayon-sy">(</span><span class="crayon-v">collectionView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UICollectionView</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">numberOfItemsInSection </span><span class="crayon-v">section</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-t">Int</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-21">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">models</span><span class="crayon-sy">.</span><span class="crayon-i">count</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-22">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-23"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-24">\n<span class="crayon-h">    </span><span class="crayon-e">override </span><span class="crayon-e">func </span><span class="crayon-e">collectionView</span><span class="crayon-sy">(</span><span class="crayon-v">collectionView</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">UICollectionView</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">cellForItemAtIndexPath </span><span class="crayon-v">indexPath</span><span class="crayon-o">:</span><span class="crayon-h"> </span><span class="crayon-v">NSIndexPath</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">-&gt;</span><span class="crayon-h"> </span><span class="crayon-e">UICollectionViewCell</span><span class="crayon-h"> </span><span class="crayon-sy">{</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-25">\n<span class="crayon-h">        </span><span class="crayon-e">let </span><span class="crayon-v">cell</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">collectionView</span><span class="crayon-sy">[</span><span class="crayon-v">indexPath</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-st">as</span><span class="crayon-o">!</span><span class="crayon-h"> </span><span class="crayon-e">CollectionViewCell</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-26">\n<span class="crayon-e">        </span><span class="crayon-e">let </span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">models</span><span class="crayon-sy">[</span><span class="crayon-v">indexPath</span><span class="crayon-sy">.</span><span class="crayon-v">row</span><span class="crayon-sy">]</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-27">\n<span class="crayon-h">        </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">cell</span><span class="crayon-sy">.</span><span class="crayon-e">bind</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">)</span>\n</div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-28">\n<span class="crayon-h">    </span><span class="crayon-sy">}</span>\n</div>\n<div class="crayon-line" id="crayon-571f901eaae2f984068455-29"> </div>\n<div class="crayon-line crayon-striped-line" id="crayon-571f901eaae2f984068455-30"><span class="crayon-sy">}</span></div>\n</div></td>\r\n\t\t\t\t\t</tr></table>\n</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0044 seconds] -->\r\n<p>It doesn’t seem so verbose anymore and the controllers feel much slimmer. To see a full working demo with these concepts in action, check out the <a href="https://github.com/ZamzamInc/ExtendedTableCollection">GitHub repository</a>. It contains the protocols discussed, as well as a framework with embedded NIB’s using the<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/">UIStackView</a> so you can get a sense how this would work in the real world.</p>\n<p><img src="http://basememara.com/wp-content/uploads/2016/04/CapturFiles_330-459x800.png" alt="CapturFiles_330" width="459" height="800" class="aligncenter size-medium wp-image-706" srcset="http://basememara.com/wp-content/uploads/2016/04/CapturFiles_330-459x800.png 459w, http://basememara.com/wp-content/uploads/2016/04/CapturFiles_330-588x1024.png 588w, http://basememara.com/wp-content/uploads/2016/04/CapturFiles_330.png 742w" sizes="(max-width: 459px) 100vw, 459px"></p>\n<hr>\n<p><img src="http://basememara.com/wp-content/uploads/2016/04/CapturFiles_335-1-462x800.png" alt="CapturFiles_335" width="462" height="800" class="aligncenter size-medium wp-image-708" srcset="http://basememara.com/wp-content/uploads/2016/04/CapturFiles_335-1-462x800.png 462w, http://basememara.com/wp-content/uploads/2016/04/CapturFiles_335-1-592x1024.png 592w, http://basememara.com/wp-content/uploads/2016/04/CapturFiles_335-1.png 744w" sizes="(max-width: 462px) 100vw, 462px"></p>\n<p> </p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<div id="ts-fab-below" class="ts-fab-wrapper">\n<span class="screen-reader-text">The following two tabs change content below.</span><ul class="ts-fab-list">\n<li class="ts-fab-bio-link"><a href="#ts-fab-bio-below">Bio</a></li>\n<li class="ts-fab-latest-posts-link"><a href="#ts-fab-latest-posts-below">Latest Posts</a></li>\n</ul>\n<div class="ts-fab-tabs">\n\t<div class="ts-fab-tab" id="ts-fab-bio-below">\n\t\t<div class="ts-fab-avatar">\n<img alt="" src="http://2.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=80&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=160&amp;d=mm&amp;r=g 2x" class="avatar avatar-80 photo" height="80" width="80"><div class="ts-fab-social-links">\n<a href="http://twitter.com/basememara" title="Twitter" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/twitter.png" width="24" height="24" alt="My Twitter profile"></a><a href="https://www.facebook.com/basememara" title="Facebook" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/facebook.png" width="24" height="24" alt="My Facebook profile"></a><a href="https://plus.google.com/+BasemEmara?rel=author" title="Google+"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/googleplus.png" width="24" height="24" alt="My Google+ profile"></a><a href="http://www.linkedin.com/in/basememara" title="LinkedIn" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/linkedin.png" width="24" height="24" alt="My LinkedIn profile"></a>\n</div>\n\t\t</div>\n\t\t\n\t\t<div class="ts-fab-text">\n\t\t\t<div class="ts-fab-header"><h4><a href="http://basememara.com" rel="nofollow">Basem Emara</a></h4></div>\n<!-- /.ts-fab-header -->\n\t\t\t<div class="ts-fab-content">Basem has over 10 years experience as a consultant and developer for dozens of projects for educational, advocacy, non-profit, small business, enterprise, and governmental organizations. As an innovator who recognizes and leverages the power of the web, he has been able to help real estate agencies, schools, hospitals, wholesale distributors, shipping carriers, and other businesses pioneer their industries utilizing the best that today's technology has to offer from a more creative point of view. Simple yet elegant is the key to his approach, as well as the belief that continual process improvement is always possible.</div>\n\t\t</div>\n\t</div>\n\t<div class="ts-fab-tab" id="ts-fab-latest-posts-below">\n\t\t<div class="ts-fab-avatar">\n<img alt="" src="http://2.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=80&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=160&amp;d=mm&amp;r=g 2x" class="avatar avatar-80 photo" height="80" width="80"><div class="ts-fab-social-links">\n<a href="http://twitter.com/basememara" title="Twitter" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/twitter.png" width="24" height="24" alt="My Twitter profile"></a><a href="https://www.facebook.com/basememara" title="Facebook" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/facebook.png" width="24" height="24" alt="My Facebook profile"></a><a href="https://plus.google.com/+BasemEmara?rel=author" title="Google+" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/googleplus.png" width="24" height="24" alt="My Google+ profile"></a><a href="http://www.linkedin.com/in/basememara" title="LinkedIn" rel="nofollow"><img src="http://basememara.com/wp-content/plugins/fancier-author-box/images/linkedin.png" width="24" height="24" alt="My LinkedIn profile"></a>\n</div>\n\t\t</div>\n\t\t<div class="ts-fab-text">\n\t\t\t<div class="ts-fab-header">\n\t\t\t\t<h4>Latest posts by Basem Emara <span class="latest-see-all">(<a href="http://basememara.com/author/basememara/" rel="nofollow">see all</a>)</span>\n</h4>\n\t\t\t</div>\n\t\t\t<ul class="ts-fab-latest">\n<li>\n\t\t\t\t\t<a href="http://basememara.com/protocol-oriented-tableview-collectionview/">Protocol-Oriented TableView and CollectionView</a><span> - April 26, 2016</span> \n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href="http://basememara.com/protocol-conformance-extension-swift/">Protocol Conformance Extensions in Swift</a><span> - March 28, 2016</span> \n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href="http://basememara.com/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods/">Creating Cross-Platform Swift Frameworks for iOS, watchOS, and tvOS via Carthage and CocoaPods</a><span> - March 22, 2016</span> \n\t\t\t\t</li>\n\t\t</ul>\n</div>\n\t</div>\n\t\t</div>\n\t</div>\n<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-official sd-sharing">\n<h3 class="sd-title">Share this:</h3>\n<div class="sd-content"><ul>\n<li class="share-facebook"><div class="fb-share-button" data-href="http://basememara.com/protocol-oriented-tableview-collectionview/" data-layout="button_count"></div></li>\n<li class="share-twitter"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://basememara.com/protocol-oriented-tableview-collectionview/" data-text="Protocol-Oriented TableView and CollectionView" data-via="basememara">Tweet</a></li>\n<li class="share-linkedin"><div class="linkedin_button"></div></li>\n<li class="share-google-plus-1"><div class="googleplus1_button"><div class="g-plus" data-action="share" data-annotation="bubble" data-href="http://basememara.com/protocol-oriented-tableview-collectionview/"></div></div></li>\n<li class="share-pinterest"><div class="pinterest_button"><a href="https://www.pinterest.com/pin/create/button/?url=http%3A%2F%2Fbasememara.com%2Fprotocol-oriented-tableview-collectionview%2F&amp;media=http%3A%2F%2Fbasememara.com%2Fwp-content%2Fuploads%2F2015%2F04%2Fswift-stage.png&amp;description=Protocol-Oriented%20TableView%20and%20CollectionView" data-pin-do="buttonPin" data-pin-config="beside"><img src="//assets.pinterest.com/images/pidgets/pinit_fg_en_rect_gray_20.png"></a></div></li>\n<li class="share-reddit"><div class="reddit_button"></div></li>\n<li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button" href="http://basememara.com/protocol-oriented-tableview-collectionview/?share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li>\n<li class="share-print"><a rel="nofollow" data-shared="" class="share-print sd-button" href="http://basememara.com/protocol-oriented-tableview-collectionview/#print" target="_blank" title="Click to print"><span>Print</span></a></li>\n<li class="share-end">\n</ul></div>\n</div></div>\n<div id="jp-relatedposts" class="jp-relatedposts">\n\t<h3 class="jp-relatedposts-headline"><em>Related</em></h3>\n</div>\n<!--<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n\t\t\txmlns:dc="http://purl.org/dc/elements/1.1/"\n\t\t\txmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">\n\t\t<rdf:Description rdf:about="http://basememara.com/protocol-oriented-tableview-collectionview/"\n    dc:identifier="http://basememara.com/protocol-oriented-tableview-collectionview/"\n    dc:title="Protocol-Oriented TableView and CollectionView"\n    trackback:ping="http://basememara.com/protocol-oriented-tableview-collectionview/trackback/" />\n</rdf:RDF>-->\n	It's no secret that working with the UITableView is verbose and inconvenient. It's been around since iOS 2.0 and it feels just as archaic. Then, Apple graced us with the UICollectionView in iOS 6.0 and it was indeedmuch awaited, but the API's were inconsistent with the UITableView and still felt just as irritating. In this post, I'd like to reconcile the two API's and add some sugar to make it more pleasant to work with these commonlyused controls. The UITableView and UICollectionView share an ancestor: UIScrollView. This is the best relationship Apple decided to give between the two; yippie it scrolls! Instead, I'd like to take on another perspective; they both are containers of data. So the first thing I'd like to do is create a new protocol called "DataViewable" and force the table and collection views to conform to it (see my previous post about Protocol Conformance Extensions): Both 	\N	2016-04-26 16:04:48.192349	0	0	terhechte	{9aefd16c-ddfd-4011-ab32-1ac15ff2e23c}	http://basememara.com/wp-content/uploads/2016/04/wonka-tables-1-500x496.jpg	0
\.


--
-- TOC entry 2197 (class 0 OID 0)
-- Dependencies: 177
-- Name: posts_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('posts_iid_seq', 22, true);


--
-- TOC entry 2162 (class 0 OID 16385)
-- Dependencies: 174
-- Data for Name: schema_info; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY schema_info (version) FROM stdin;
3
\.


--
-- TOC entry 2168 (class 0 OID 16456)
-- Dependencies: 180
-- Data for Name: user_invites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY user_invites (id, iid, email, code, user_id, created_at, updated_at, twitter, github, invited_user_id) FROM stdin;
\.


--
-- TOC entry 2198 (class 0 OID 0)
-- Dependencies: 179
-- Name: user_invites_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('user_invites_iid_seq', 1, false);


--
-- TOC entry 2164 (class 0 OID 16402)
-- Dependencies: 176
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY users (id, iid, uid, provider, handle, about, email, url, twitter, karma, name, auth, created_at, updated_at, admin, registered, parent_id, invites_count, github, secret, manifesto, flagged) FROM stdin;
00575dc6-5c8e-4ca5-b7d8-0cd9f7da6b75	6	723874459770339328	twitter	alonecoooder741		\N	\N	alonecoooder741	5	alonecoooder748	{"provider":"twitter","uid":"723874459770339328","info":{"nickname":"alonecoooder741","name":"alonecoooder748","location":"","image":"https://abs.twimg.com/sticky/default_profile_images/default_profile_3_normal.png","description":"","urls":{"Website":null,"Twitter":"https://twitter.com/alonecoooder741"}},"credentials":{"token":"723874459770339328-WlfMegbvA2wjs2G61H90heu3TK1eK0A","secret":"UgtsO95wZWXZq826IK7gNiYUCBjLEDP9kNEfrKSfKUXJM"}}	2016-04-23 14:03:44.4407	2016-04-23 14:03:47.568672	f	\N	\N	5	\N	c4126d199a5fba78981dd64e69f298bd1ed024b49fea006682d70fb570355960	t	0
9aefd16c-ddfd-4011-ab32-1ac15ff2e23c	1	6473172	twitter	terhechte	Indie Developer. Swift, Objective-C, Clojure, Python. http://t.co/cKULf8dz6b	\N	\N	terhechte	19	Benedikt Terhechte	{"provider":"twitter","uid":"6473172","info":{"nickname":"terhechte","name":"Benedikt Terhechte","location":"Hamburg, Germany","image":"https://pbs.twimg.com/profile_images/470279059084025857/zLklF_WF_normal.jpeg","description":"Indie Developer. Swift, Objective-C, Clojure, Python. http://t.co/cKULf8dz6b","urls":{"Website":"http://t.co/WlD6FwPiQ4","Twitter":"https://twitter.com/terhechte"}},"credentials":{"token":"6473172-sPoVwwiXdVuoNwNtjBdWQMWNtSUjkJ4xLsBh5uPFEv","secret":"lFygfHjFZb3NAj1SqQjrMauli4BP5GICVaGeudBhUHFrY"}}	2016-04-17 10:52:56.219613	2016-04-26 13:22:32.063764	t	t	\N	5	\N	0986d7b9ad5b635a7c3152a281a0c5e0d062136b4806b45e99c55443c08c1153	t	0
f5a3735f-fba7-4403-bccb-c1ea2553b23c	2	132234	github	terhechte	\N	\N	\N	\N	1	Benedikt Terhechte	{"provider":"github","uid":"132234","info":{"nickname":"terhechte","email":null,"name":"Benedikt Terhechte","image":"https://avatars.githubusercontent.com/u/132234?v=3","urls":{"GitHub":"https://github.com/terhechte","Blog":"http://appventure.me"}},"credentials":{"token":"11b8dd4671dfd9b2070e793885fe0604e4f6ae2b","expires":false}}	2016-04-17 11:14:51.826883	2016-04-18 02:05:29.388331	f	\N	\N	5	terhechte	0f602989c5f2178fbd3b555ca2ad2624f6a46b5aacf2fa3f893f3bfd15c4bed7	t	0
1c0226cf-7d6f-4e48-9f07-68caf18b0d9e	4	135444	github	ReneLindhorst	\N	\N	\N	\N	2	René Lindhorst	{"provider":"github","uid":"135444","info":{"nickname":"ReneLindhorst","email":null,"name":"René Lindhorst","image":"https://avatars.githubusercontent.com/u/135444?v=3","urls":{"GitHub":"https://github.com/ReneLindhorst","Blog":"www.lindhorst.it"}},"credentials":{"token":"7fb0d93c358746080734522431264f2d96fefd33","expires":false}}	2016-04-17 17:54:25.726384	2016-04-26 08:32:14.932457	f	\N	\N	5	ReneLindhorst	d8027cc636c250cb8bd9629fae6022dcdd4a3c460f1e3d37fe27a2922bdb8517	t	0
d15947e9-3b46-4472-a0cb-dea1a222954c	5	723871799222652928	twitter	swiftfan20841		\N	\N	swiftfan20841	5	swiftfan2084	{"provider":"twitter","uid":"723871799222652928","info":{"nickname":"swiftfan20841","name":"swiftfan2084","location":"","image":"https://abs.twimg.com/sticky/default_profile_images/default_profile_1_normal.png","description":"","urls":{"Website":null,"Twitter":"https://twitter.com/swiftfan20841"}},"credentials":{"token":"723871799222652928-pKYAHMRBO9npYVDsrA7luX2eaJfTGHe","secret":"KwBejeJnHa9H3TVg1r7404YEbJEqTKvo3X7KiUhcJmAxY"}}	2016-04-23 13:54:17.365042	2016-04-23 13:56:09.732103	f	\N	\N	5	\N	19ebda96dfbd9a0d4e5ebca40ab901ea5125d9c0b861f74bb51a80d54a02db83	t	0
7b20098a-1d3a-4aa6-86e4-24a0d525be9e	3	3023206433	twitter	social_collage	Social Collage is a fantastic new Mac OS X app that allows you to take images from Instagram and automatically generate collages or life posters out of them.	\N	\N	social_collage	4	Social Collage	{"provider":"twitter","uid":"3023206433","info":{"nickname":"social_collage","name":"Social Collage","location":"","image":"https://pbs.twimg.com/profile_images/564055262315544576/rNIWTl65_normal.png","description":"Social Collage is a fantastic new Mac OS X app that allows you to take images from Instagram and automatically generate collages or life posters out of them.","urls":{"Website":"http://t.co/KKWDcL63Vc","Twitter":"https://twitter.com/social_collage"}},"credentials":{"token":"3023206433-DRJY3wwUxZxyG7h8JAzggVidfzaaFUKzn128PSi","secret":"eElk5iLmugWvf2k03c45BAlihGY0p8VT1aHs2n4IPv5DY"}}	2016-04-17 12:15:57.684897	2016-04-17 12:16:13.020019	f	\N	\N	5	\N	40563c812a405fd436ea2571ecfa65759150844c491ba40caa42e3d217e2cc6a	t	0
\.


--
-- TOC entry 2199 (class 0 OID 0)
-- Dependencies: 175
-- Name: users_iid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('users_iid_seq', 6, true);


--
-- TOC entry 2035 (class 2606 OID 16559)
-- Name: comment_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comment_votes
    ADD CONSTRAINT comment_votes_pkey PRIMARY KEY (id);


--
-- TOC entry 2024 (class 2606 OID 16492)
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- TOC entry 2026 (class 2606 OID 16517)
-- Name: post_visits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY post_visits
    ADD CONSTRAINT post_visits_pkey PRIMARY KEY (id);


--
-- TOC entry 2030 (class 2606 OID 16538)
-- Name: post_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY post_votes
    ADD CONSTRAINT post_votes_pkey PRIMARY KEY (id);


--
-- TOC entry 2014 (class 2606 OID 16444)
-- Name: posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- TOC entry 2020 (class 2606 OID 16465)
-- Name: user_invites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY user_invites
    ADD CONSTRAINT user_invites_pkey PRIMARY KEY (id);


--
-- TOC entry 2010 (class 2606 OID 16417)
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 2033 (class 1259 OID 16570)
-- Name: comment_votes_comment_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX comment_votes_comment_id_index ON comment_votes USING btree (comment_id);


--
-- TOC entry 2036 (class 1259 OID 16571)
-- Name: comment_votes_user_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX comment_votes_user_id_index ON comment_votes USING btree (user_id);


--
-- TOC entry 2022 (class 1259 OID 16508)
-- Name: comments_iid_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX comments_iid_index ON comments USING btree (iid);


--
-- TOC entry 2027 (class 1259 OID 16528)
-- Name: post_visits_post_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX post_visits_post_id_index ON post_visits USING btree (post_id);


--
-- TOC entry 2028 (class 1259 OID 16529)
-- Name: post_visits_user_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX post_visits_user_id_index ON post_visits USING btree (user_id);


--
-- TOC entry 2031 (class 1259 OID 16549)
-- Name: post_votes_post_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX post_votes_post_id_index ON post_votes USING btree (post_id);


--
-- TOC entry 2032 (class 1259 OID 16550)
-- Name: post_votes_user_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX post_votes_user_id_index ON post_votes USING btree (user_id);


--
-- TOC entry 2012 (class 1259 OID 16450)
-- Name: posts_iid_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX posts_iid_index ON posts USING btree (iid);


--
-- TOC entry 2015 (class 1259 OID 16451)
-- Name: posts_published_at_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX posts_published_at_index ON posts USING btree (published_at);


--
-- TOC entry 2016 (class 1259 OID 16452)
-- Name: posts_slug_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX posts_slug_index ON posts USING btree (slug);


--
-- TOC entry 2017 (class 1259 OID 16453)
-- Name: posts_user_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX posts_user_id_index ON posts USING btree (user_id);


--
-- TOC entry 2018 (class 1259 OID 16476)
-- Name: user_invites_code_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX user_invites_code_key ON user_invites USING btree (code);


--
-- TOC entry 2021 (class 1259 OID 16477)
-- Name: user_invites_user_id_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX user_invites_user_id_index ON user_invites USING btree (user_id);


--
-- TOC entry 2007 (class 1259 OID 16423)
-- Name: users_handle_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX users_handle_index ON users USING btree (handle);


--
-- TOC entry 2008 (class 1259 OID 16424)
-- Name: users_iid_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX users_iid_index ON users USING btree (iid);


--
-- TOC entry 2011 (class 1259 OID 16425)
-- Name: users_uid_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX users_uid_index ON users USING btree (uid);


--
-- TOC entry 2051 (class 2620 OID 16573)
-- Name: pgt_cc_posts__id__comments_count__post_id; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER pgt_cc_posts__id__comments_count__post_id BEFORE INSERT OR DELETE ON comments FOR EACH ROW EXECUTE PROCEDURE cc_posts_comments_count();


--
-- TOC entry 2050 (class 2620 OID 16575)
-- Name: trg_posts_user_handle; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trg_posts_user_handle BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE c_posts_user_handle();


--
-- TOC entry 2052 (class 2620 OID 16577)
-- Name: trg_posts_voted; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trg_posts_voted BEFORE INSERT ON post_votes FOR EACH ROW EXECUTE PROCEDURE c_posts_voted();


--
-- TOC entry 2049 (class 2606 OID 16565)
-- Name: comment_votes_comment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comment_votes
    ADD CONSTRAINT comment_votes_comment_id_fkey FOREIGN KEY (comment_id) REFERENCES comments(id);


--
-- TOC entry 2048 (class 2606 OID 16560)
-- Name: comment_votes_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comment_votes
    ADD CONSTRAINT comment_votes_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2043 (class 2606 OID 16503)
-- Name: comments_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES comments(id);


--
-- TOC entry 2042 (class 2606 OID 16498)
-- Name: comments_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES posts(id);


--
-- TOC entry 2041 (class 2606 OID 16493)
-- Name: comments_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2045 (class 2606 OID 16523)
-- Name: post_visits_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_visits
    ADD CONSTRAINT post_visits_post_id_fkey FOREIGN KEY (post_id) REFERENCES posts(id);


--
-- TOC entry 2044 (class 2606 OID 16518)
-- Name: post_visits_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_visits
    ADD CONSTRAINT post_visits_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2047 (class 2606 OID 16544)
-- Name: post_votes_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_votes
    ADD CONSTRAINT post_votes_post_id_fkey FOREIGN KEY (post_id) REFERENCES posts(id);


--
-- TOC entry 2046 (class 2606 OID 16539)
-- Name: post_votes_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY post_votes
    ADD CONSTRAINT post_votes_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2038 (class 2606 OID 16445)
-- Name: posts_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2040 (class 2606 OID 16471)
-- Name: user_invites_invited_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_invites
    ADD CONSTRAINT user_invites_invited_user_id_fkey FOREIGN KEY (invited_user_id) REFERENCES users(id);


--
-- TOC entry 2039 (class 2606 OID 16466)
-- Name: user_invites_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_invites
    ADD CONSTRAINT user_invites_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id);


--
-- TOC entry 2037 (class 2606 OID 16418)
-- Name: users_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES users(id);


--
-- TOC entry 2183 (class 0 OID 0)
-- Dependencies: 7
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2016-04-27 13:02:20 UTC

--
-- PostgreSQL database dump complete
--

